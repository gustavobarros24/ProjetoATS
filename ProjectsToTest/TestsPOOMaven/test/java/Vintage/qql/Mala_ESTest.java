/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 15:33:55 GMT 2025
 */

package Vintage.qql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Vintage.qql.Mala;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Mala_ESTest extends Mala_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Mala mala0 = new Mala();
      Mala mala1 = new Mala(mala0);
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      
      mala0.setValorizacao(1.0F);
      boolean boolean0 = mala0.equals(mala1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Mala mala0 = new Mala();
      Mala mala1 = mala0.clone();
      mala0.setAnoColecao(356);
      boolean boolean0 = mala0.equals(mala1);
      assertEquals(356, mala0.getAnoColecao());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Mala mala0 = new Mala();
      Mala mala1 = mala0.clone();
      mala1.setDimensao((-756.5F));
      boolean boolean0 = mala1.equals(mala0);
      assertEquals((-756.5F), mala1.getDimensao(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-3349));
      Mala mala0 = new Mala("D.BRo~_LX;T{v<c", "Vintage.qql.Mala", "", integer0, (-3349), 0.0F, false, (-3349), "?H;W<*TeR,:Qex7]Bv", "Vintage.qql.Mala", (-3349), "TL&:1nD3L", 1.0F, "", (-3349), false, 0.0F);
      float float0 = mala0.calcularPrecoFinal();
      assertEquals((-2306.5881F), mala0.getPrecoFinal(), 0.01F);
      assertEquals((-2306.5881F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(1041);
      Mala mala0 = new Mala("", "", "", integer0, 0.0F, 0.0F, false, 262, "", ">56f@Y>^i]=u*%Fq", 1041, (String) null, 0.0F, (String) null, 262, false, 0.0F);
      boolean boolean0 = mala0.isPremium();
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(262, mala0.getAnoColecao());
      assertEquals(0.0F, mala0.getDimensao(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Mala mala0 = new Mala(", material: ", ", material: ", ", material: ", integer0, 101100.0F, 998.2F, false, 1877, "(LPtr\"<hbP4o+1", "(LPtr\"<hbP4o+1", 315, "*1|?nyZ#r-&$V]2:h|", 315, "", 1, true, 1);
      float float0 = mala0.getValorizacao();
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(1, mala0.getAnoColecao());
      assertEquals("", mala0.getMaterial());
      assertTrue(mala0.isPremium());
      assertEquals(315.0F, mala0.getDimensao(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(1041);
      Mala mala0 = new Mala("", "", "", integer0, 0.0F, 0.0F, false, 262, "", ">56f@Y>^i]=u*%Fq", 1041, (String) null, 0.0F, (String) null, 262, false, 0.0F);
      mala0.setValorizacao((-634.11694F));
      float float0 = mala0.getValorizacao();
      assertEquals((-634.11694F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(1041);
      Mala mala0 = new Mala("", "", "", integer0, 0.0F, 0.0F, false, 262, "", ">56f@Y>^i]=u*%Fq", 1041, (String) null, 0.0F, (String) null, 262, false, 0.0F);
      String string0 = mala0.getMaterial();
      assertEquals(0.0F, mala0.getDimensao(), 0.01F);
      assertNull(string0);
      assertEquals(262, mala0.getAnoColecao());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertFalse(mala0.isPremium());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Mala mala0 = new Mala((String) null, (String) null, (String) null, integer0, (-3985.8F), 0.0F, true, 1828, "Vintage.qql.Mala", "JB[Z1M:et${S{", 1, "Vintage.qql.Mala", (-1), (String) null, 5633, true, 0.0F);
      mala0.setMaterial("r;9dL");
      mala0.getMaterial();
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals((-1.0F), mala0.getDimensao(), 0.01F);
      assertTrue(mala0.isPremium());
      assertEquals(5633, mala0.getAnoColecao());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(1041);
      Mala mala0 = new Mala("", "", "", integer0, 0.0F, 0.0F, false, 262, "", ">56f@Y>^i]=u*%Fq", 1041, (String) null, 0.0F, (String) null, 262, false, 0.0F);
      float float0 = mala0.getDimensao();
      assertEquals(262, mala0.getAnoColecao());
      assertFalse(mala0.isPremium());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Mala mala0 = new Mala(", material: ", ", material: ", ", material: ", integer0, 101100.0F, 998.2F, false, 1877, "(LPtr\"<hbP4o+1", "(LPtr\"<hbP4o+1", 315, "*1|?nyZ#r-&$V]2:h|", 315, "", 1, true, 1);
      float float0 = mala0.getDimensao();
      assertEquals("", mala0.getMaterial());
      assertEquals(1.0F, mala0.getValorizacao(), 0.01F);
      assertTrue(mala0.isPremium());
      assertEquals(315.0F, float0, 0.01F);
      assertEquals(1, mala0.getAnoColecao());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Mala mala0 = new Mala();
      mala0.setAnoColecao(1408);
      int int0 = mala0.getAnoColecao();
      assertEquals(1408, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-698));
      Mala mala0 = new Mala("Iy*^SHkWgl", "Iy*^SHkWgl", "Iy*^SHkWgl", integer0, (-747.6971F), (-1755.0F), false, (-2000), "_&{kL'QR=f", "", (-2000), "", (-1256.0F), "_&{kL'QR=f", (-310), false, (-1.0F));
      int int0 = mala0.getAnoColecao();
      assertEquals((-310), int0);
      assertEquals((-1.0F), mala0.getValorizacao(), 0.01F);
      assertEquals("_&{kL'QR=f", mala0.getMaterial());
      assertEquals((-1256.0F), mala0.getDimensao(), 0.01F);
      assertFalse(mala0.isPremium());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Mala mala0 = new Mala((String) null, (String) null, (String) null, (Integer) null, (-223.3F), (-78.3F), false, 2290, (String) null, ", marca: ", (-392), (String) null, 1.0F, (String) null, (-1545), true, 1781.271F);
      Mala mala1 = mala0.clone();
      assertTrue(mala1.isPremium());
      assertEquals(1.0F, mala1.getDimensao(), 0.01F);
      assertEquals(1781.271F, mala1.getValorizacao(), 0.01F);
      assertEquals((-1545), mala1.getAnoColecao());
      assertTrue(mala1.equals((Object)mala0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Mala mala0 = new Mala();
      mala0.setPrecoFinal(2509.457F);
      Mala mala1 = mala0.clone();
      assertEquals(0.0F, mala1.getDimensao(), 0.01F);
      assertTrue(mala1.equals((Object)mala0));
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertFalse(mala1.isPremium());
      assertEquals(0, mala1.getAnoColecao());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Mala mala0 = new Mala();
      mala0.setPrecoFinal((-54));
      Mala mala1 = mala0.clone();
      assertEquals(0.0F, mala1.getDimensao(), 0.01F);
      assertEquals(0, mala1.getAnoColecao());
      assertFalse(mala1.isPremium());
      assertTrue(mala1.equals((Object)mala0));
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Mala mala0 = new Mala();
      mala0.setCustosExpedicao(238.13495F);
      Mala mala1 = mala0.clone();
      assertEquals(0, mala1.getAnoColecao());
      assertFalse(mala1.isPremium());
      assertTrue(mala1.equals((Object)mala0));
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals(0.0F, mala1.getDimensao(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Mala mala0 = new Mala();
      mala0.setCustosExpedicao((-1345.0F));
      Mala mala1 = mala0.clone();
      assertFalse(mala1.isPremium());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals(0.0F, mala1.getDimensao(), 0.01F);
      assertTrue(mala1.equals((Object)mala0));
      assertEquals(0, mala1.getAnoColecao());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer((-2138824437));
      Mala mala0 = new Mala("c\u00F3digo: 0, nome: , descri\u00E7\u00E3o: , marca: , pre\u00E7o base: 0.0, corre\u00E7\u00E3o de pre\u00E7o: 0.0, novo: true, n\u00FAmero de donos: 0, condi\u00E7\u00E3o: , transportadora: , vendedor: , tipo: mala, dimens\u00E3o: 0.0, material: , ano da Cole\u00E7\u00E3o: 0, premium: false, valoriza\u00E7\u00E3o: 0.0%", ", pre\u00E7o base: ", "c\u00F3digo: 0, nome: , descri\u00E7\u00E3o: , marca: , pre\u00E7o base: 0.0, corre\u00E7\u00E3o de pre\u00E7o: 0.0, novo: true, n\u00FAmero de donos: 0, condi\u00E7\u00E3o: , transportadora: , vendedor: , tipo: mala, dimens\u00E3o: 0.0, material: , ano da Cole\u00E7\u00E3o: 0, premium: false, valoriza\u00E7\u00E3o: 0.0%", integer0, (-2138824437), 1.0F, false, (-2138824437), ", vendedor: ", "c\u00F3digo: 0, nome: , descri\u00E7\u00E3o: , marca: , pre\u00E7o base: 0.0, corre\u00E7\u00E3o de pre\u00E7o: 0.0, novo: true, n\u00FAmero de donos: 0, condi\u00E7\u00E3o: , transportadora: , vendedor: , tipo: mala, dimens\u00E3o: 0.0, material: , ano da Cole\u00E7\u00E3o: 0, premium: false, valoriza\u00E7\u00E3o: 0.0%", (-1), ".OwY", 1.0F, "c\u00F3digo: 0, nome: , descri\u00E7\u00E3o: , marca: , pre\u00E7o base: 0.0, corre\u00E7\u00E3o de pre\u00E7o: 0.0, novo: true, n\u00FAmero de donos: 0, condi\u00E7\u00E3o: , transportadora: , vendedor: , tipo: mala, dimens\u00E3o: 0.0, material: , ano da Cole\u00E7\u00E3o: 0, premium: false, valoriza\u00E7\u00E3o: 0.0%", (-2138824437), false, 0.0F);
      Mala mala1 = mala0.clone();
      assertTrue(mala1.equals((Object)mala0));
      assertFalse(mala1.isPremium());
      assertEquals("c\u00F3digo: 0, nome: , descri\u00E7\u00E3o: , marca: , pre\u00E7o base: 0.0, corre\u00E7\u00E3o de pre\u00E7o: 0.0, novo: true, n\u00FAmero de donos: 0, condi\u00E7\u00E3o: , transportadora: , vendedor: , tipo: mala, dimens\u00E3o: 0.0, material: , ano da Cole\u00E7\u00E3o: 0, premium: false, valoriza\u00E7\u00E3o: 0.0%", mala1.getMaterial());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals((-2138824437), mala0.getAnoColecao());
      assertEquals(1.0F, mala1.getDimensao(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Mala mala0 = new Mala((String) null, (String) null, (String) null, integer0, (-3985.8F), 0.0F, true, 1828, "Vintage.qql.Mala", "JB[Z1M:et${S{", 1, "Vintage.qql.Mala", (-1), (String) null, 5633, true, 0.0F);
      Mala mala1 = mala0.clone();
      assertEquals((-1.0F), mala1.getDimensao(), 0.01F);
      assertTrue(mala1.isPremium());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertTrue(mala1.equals((Object)mala0));
      assertEquals(5633, mala1.getAnoColecao());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = Integer.getInteger(", marca: ", 3665);
      Mala mala0 = new Mala((String) null, "", "l;dyTN[N1qGxc^,h'J;", integer0, 3665, (-359.05344F), true, 3665, ", marca: ", (String) null, 3665, " con-i\u00E7\u00E3o: ", 0.0F, (String) null, (-1330), false, (-1330));
      Mala mala1 = mala0.clone();
      assertEquals((-1330.0F), mala1.getValorizacao(), 0.01F);
      assertFalse(mala1.isPremium());
      assertEquals((-1330), mala1.getAnoColecao());
      assertTrue(mala1.equals((Object)mala0));
      assertEquals(0.0F, mala0.getDimensao(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Mala mala0 = new Mala((String) null, (String) null, (String) null, integer0, (-3985.8F), 0.0F, true, 1828, "Vintage.qql.Mala", "JB[Z1M:et${S{", 1, "Vintage.qql.Mala", (-1), (String) null, 5633, true, 0.0F);
      float float0 = mala0.calcularPrecoFinal();
      assertEquals((-4003.7478F), mala0.getPrecoFinal(), 0.01F);
      assertEquals((-4003.7478F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Mala mala0 = null;
      try {
        mala0 = new Mala((Mala) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.qql.Artigo", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Mala mala0 = new Mala((String) null, (String) null, (String) null, integer0, (-3985.8F), 0.0F, true, 1828, "Vintage.qql.Mala", "JB[Z1M:et${S{", 1, "Vintage.qql.Mala", (-1), (String) null, 5633, true, 0.0F);
      boolean boolean0 = mala0.isPremium();
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertTrue(boolean0);
      assertEquals((-1.0F), mala0.getDimensao(), 0.01F);
      assertEquals(5633, mala0.getAnoColecao());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Mala mala0 = new Mala((String) null, (String) null, (String) null, integer0, (-3985.8F), 0.0F, true, 1828, "Vintage.qql.Mala", "JB[Z1M:et${S{", 1, "Vintage.qql.Mala", (-1), (String) null, 5633, true, 0.0F);
      float float0 = mala0.getDimensao();
      assertEquals((-1.0F), float0, 0.01F);
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(5633, mala0.getAnoColecao());
      assertTrue(mala0.isPremium());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Mala mala0 = new Mala((String) null, (String) null, (String) null, integer0, (-3985.8F), 0.0F, true, 1828, "Vintage.qql.Mala", "JB[Z1M:et${S{", 1, "Vintage.qql.Mala", (-1), (String) null, 5633, true, 0.0F);
      float float0 = mala0.getValorizacao();
      assertEquals(5633, mala0.getAnoColecao());
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(mala0.isPremium());
      assertEquals((-1.0F), mala0.getDimensao(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Mala mala0 = new Mala();
      int int0 = mala0.getAnoColecao();
      assertEquals(0, int0);
      assertFalse(mala0.isPremium());
      assertEquals(0.0F, mala0.getDimensao(), 0.01F);
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Mala mala0 = new Mala();
      mala0.getMaterial();
      assertEquals(0, mala0.getAnoColecao());
      assertFalse(mala0.isPremium());
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertEquals(0.0F, mala0.getDimensao(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Mala mala0 = new Mala();
      Mala mala1 = mala0.clone();
      mala0.setValorizacao(320);
      boolean boolean0 = mala1.equals(mala0);
      assertEquals(320.0F, mala0.getValorizacao(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Mala mala0 = new Mala();
      Mala mala1 = mala0.clone();
      mala1.setAnoColecao((-1));
      mala1.setPremium(true);
      mala0.setAnoColecao((-1));
      boolean boolean0 = mala1.equals(mala0);
      assertEquals((-1), mala1.getAnoColecao());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Mala mala0 = new Mala();
      mala0.setAnoColecao((-30));
      Mala mala1 = new Mala();
      boolean boolean0 = mala0.equals(mala1);
      assertEquals((-30), mala0.getAnoColecao());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Mala mala0 = new Mala();
      Mala mala1 = new Mala(mala0);
      boolean boolean0 = mala1.equals(mala0);
      assertFalse(mala1.isPremium());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertTrue(boolean0);
      assertEquals(0, mala1.getAnoColecao());
      assertEquals(0.0F, mala1.getDimensao(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Mala mala0 = new Mala();
      mala0.setMaterial((String) null);
      Mala mala1 = new Mala();
      boolean boolean0 = mala0.equals(mala1);
      assertEquals(0.0F, mala1.getDimensao(), 0.01F);
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals(0, mala1.getAnoColecao());
      assertFalse(boolean0);
      assertFalse(mala1.isPremium());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Mala mala0 = new Mala((String) null, (String) null, (String) null, integer0, (-1), (-1), true, 1806, (String) null, (String) null, 1806, (String) null, (-1), (String) null, (-1), true, (-1));
      Mala mala1 = new Mala(mala0);
      mala0.setDimensao(1806);
      boolean boolean0 = mala0.equals(mala1);
      assertEquals(1806.0F, mala0.getDimensao(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Mala mala0 = new Mala();
      mala0.setNome("c\u00F3digo: 0, nome: , descri\u00E7\u00E3o: , marca: , pre\u00E7o base: 0.0, corre\u00E7\u00E3o de pre\u00E7o: 0.0, novo: true, n\u00FAmero de donos: 0, condi\u00E7\u00E3o: , transportadora: , vendedor: , tipo: mala, dimens\u00E3o: 0.0, material: , ano da Cole\u00E7\u00E3o: 0, premium: false, valoriza\u00E7\u00E3o: 0.0%");
      Mala mala1 = new Mala();
      boolean boolean0 = mala0.equals(mala1);
      assertEquals(0, mala1.getAnoColecao());
      assertEquals(0.0F, mala1.getValorizacao(), 0.01F);
      assertEquals(0.0F, mala1.getDimensao(), 0.01F);
      assertFalse(mala1.isPremium());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Mala mala0 = new Mala();
      Integer integer0 = Integer.valueOf(0);
      boolean boolean0 = mala0.equals(integer0);
      assertFalse(mala0.isPremium());
      assertEquals(0.0F, mala0.getDimensao(), 0.01F);
      assertEquals(0, mala0.getAnoColecao());
      assertFalse(boolean0);
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Mala mala0 = new Mala();
      boolean boolean0 = mala0.equals(mala0);
      assertEquals(0.0F, mala0.getValorizacao(), 0.01F);
      assertFalse(mala0.isPremium());
      assertEquals(0.0F, mala0.getDimensao(), 0.01F);
      assertEquals(0, mala0.getAnoColecao());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Mala mala0 = new Mala((String) null, (String) null, (String) null, integer0, (-1), (-1), true, 1806, (String) null, (String) null, 1806, (String) null, (-1), (String) null, (-1), true, (-1));
      float float0 = mala0.calcularPrecoFinal();
      assertEquals(101099.0F, mala0.getPrecoFinal(), 0.01F);
      assertEquals(101099.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Mala mala0 = new Mala();
      String string0 = mala0.toString();
      assertEquals("c\u00F3digo: 0, nome: , descri\u00E7\u00E3o: , marca: , pre\u00E7o base: 0.0, corre\u00E7\u00E3o de pre\u00E7o: 0.0, novo: true, n\u00FAmero de donos: 0, condi\u00E7\u00E3o: , transportadora: , vendedor: , tipo: mala, dimens\u00E3o: 0.0, material: , ano da Cole\u00E7\u00E3o: 0, premium: false, valoriza\u00E7\u00E3o: 0.0%", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Mala mala0 = new Mala();
      Mala mala1 = mala0.clone();
      assertTrue(mala1.equals((Object)mala0));
      
      mala1.setMaterial(", vende2o: ");
      boolean boolean0 = mala0.equals(mala1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Integer integer0 = Integer.getInteger((String) null, 3665);
      Mala mala0 = new Mala((String) null, (String) null, (String) null, integer0, 3665, 3665, false, 3665, (String) null, (String) null, 3665, (String) null, 3665, (String) null, 3665, false, 3665);
      Mala mala1 = new Mala(mala0);
      boolean boolean0 = mala1.equals(mala0);
      assertEquals(3665, mala1.getAnoColecao());
      assertEquals(3665.0F, mala0.getValorizacao(), 0.01F);
      assertFalse(mala1.isPremium());
      assertTrue(boolean0);
      assertEquals(3665.0F, mala1.getDimensao(), 0.01F);
  }
}
