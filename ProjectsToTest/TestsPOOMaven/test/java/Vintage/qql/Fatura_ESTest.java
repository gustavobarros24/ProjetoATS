/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 15:36:27 GMT 2025
 */

package Vintage.qql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Vintage.qql.Encomenda;
import Vintage.qql.Fatura;
import java.time.Clock;
import java.time.LocalDateTime;
import java.time.Month;
import java.time.ZoneOffset;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Fatura_ESTest extends Fatura_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fatura.Tipo fatura_Tipo0 = Fatura.Tipo.COMPRA;
      Encomenda encomenda0 = new Encomenda();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Fatura fatura0 = new Fatura(1.0F, fatura_Tipo0, encomenda0, localDateTime0, linkedList0);
      fatura0.setTipo((Fatura.Tipo) null);
      fatura0.getTipo();
      assertEquals(1.0F, fatura0.getCusto(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fatura.Tipo fatura_Tipo0 = Fatura.Tipo.VENDA;
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Fatura fatura0 = new Fatura((-4538.07F), fatura_Tipo0, (Encomenda) null, localDateTime0, (List<Integer>) null);
      fatura0.getEncomenda();
      assertEquals((-4538.07F), fatura0.getCusto(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fatura.Tipo fatura_Tipo0 = Fatura.Tipo.COMPRA;
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.MEDIO;
      Encomenda encomenda0 = new Encomenda(encomenda_TamanhoEmbalagem0, 2704.3F);
      Map<Integer, Integer> map0 = encomenda0.getArtigos();
      Encomenda.EstadoEncomenda encomenda_EstadoEncomenda0 = Encomenda.EstadoEncomenda.FINALIZADA;
      Encomenda encomenda1 = new Encomenda(0, map0, encomenda_TamanhoEmbalagem0, 0.5F, encomenda_EstadoEncomenda0, (LocalDateTime) null, (LocalDateTime) null, (LocalDateTime) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Fatura fatura0 = new Fatura(2704.3F, fatura_Tipo0, encomenda1, (LocalDateTime) null, linkedList0);
      fatura0.getEncomenda();
      assertEquals(2704.3F, fatura0.getCusto(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fatura.Tipo fatura_Tipo0 = Fatura.Tipo.COMPRA;
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.PEQUENO;
      Encomenda.EstadoEncomenda encomenda_EstadoEncomenda0 = Encomenda.EstadoEncomenda.PENDENTE;
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Encomenda encomenda0 = new Encomenda(0, hashMap0, encomenda_TamanhoEmbalagem0, (-2343.149F), encomenda_EstadoEncomenda0, localDateTime0, localDateTime0, localDateTime0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Fatura fatura0 = new Fatura(0.0F, fatura_Tipo0, encomenda0, localDateTime0, linkedList0);
      fatura0.getEncomenda();
      assertEquals(0.0F, fatura0.getCusto(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fatura.Tipo fatura_Tipo0 = Fatura.Tipo.COMPRA;
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.MEDIO;
      Encomenda.EstadoEncomenda encomenda_EstadoEncomenda0 = Encomenda.EstadoEncomenda.EXPEDIDA;
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Encomenda encomenda0 = new Encomenda((-835), hashMap0, encomenda_TamanhoEmbalagem0, (-835), encomenda_EstadoEncomenda0, localDateTime0, localDateTime0, localDateTime0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Fatura fatura0 = new Fatura((-812.53314F), fatura_Tipo0, encomenda0, localDateTime0, linkedList0);
      fatura0.getEncomenda();
      assertEquals((-812.53314F), fatura0.getCusto(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fatura.Tipo fatura_Tipo0 = Fatura.Tipo.COMPRA;
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.MEDIO;
      Encomenda encomenda0 = new Encomenda(encomenda_TamanhoEmbalagem0, 0.0F);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Fatura fatura0 = new Fatura(0.0F, fatura_Tipo0, encomenda0, (LocalDateTime) null, linkedList0);
      fatura0.getDataFinalizacao();
      assertEquals(0.0F, fatura0.getCusto(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fatura.Tipo fatura_Tipo0 = Fatura.Tipo.COMPRA;
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.GRANDE;
      Encomenda.EstadoEncomenda encomenda_EstadoEncomenda0 = Encomenda.EstadoEncomenda.DEVOLVIDA;
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond((-1262L), 0, zoneOffset0);
      Encomenda encomenda0 = new Encomenda(0, hashMap0, encomenda_TamanhoEmbalagem0, 0.0F, encomenda_EstadoEncomenda0, localDateTime0, localDateTime0, localDateTime0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Fatura fatura0 = new Fatura(0.0F, fatura_Tipo0, encomenda0, localDateTime0, linkedList0);
      float float0 = fatura0.getCusto();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fatura.Tipo fatura_Tipo0 = Fatura.Tipo.VENDA;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Fatura fatura0 = new Fatura((-2480.0F), fatura_Tipo0, (Encomenda) null, (LocalDateTime) null, linkedList0);
      float float0 = fatura0.getCusto();
      assertEquals((-2480.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fatura.Tipo fatura_Tipo0 = Fatura.Tipo.VENDA;
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.PEQUENO;
      Encomenda encomenda0 = new Encomenda(encomenda_TamanhoEmbalagem0, 0.0F);
      Fatura fatura0 = new Fatura(1.0F, fatura_Tipo0, encomenda0, (LocalDateTime) null, (List<Integer>) null);
      fatura0.getArtigos();
      assertEquals(1.0F, fatura0.getCusto(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fatura.Tipo fatura_Tipo0 = Fatura.Tipo.VENDA;
      Encomenda encomenda0 = new Encomenda();
      Month month0 = Month.JULY;
      LocalDateTime localDateTime0 = MockLocalDateTime.of((-1), month0, 1, 1, 0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Fatura fatura0 = new Fatura(587.7628F, fatura_Tipo0, encomenda0, localDateTime0, linkedList0);
      Integer integer0 = new Integer(2593);
      linkedList0.add(integer0);
      fatura0.getArtigos();
      assertEquals(587.7628F, fatura0.getCusto(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fatura.Tipo fatura_Tipo0 = Fatura.Tipo.VENDA;
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.PEQUENO;
      Encomenda encomenda0 = new Encomenda(encomenda_TamanhoEmbalagem0, (-1.0F));
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura(0.0F, fatura_Tipo0, encomenda0, localDateTime0, (List<Integer>) null);
      // Undeclared exception!
      try { 
        fatura0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fatura.Tipo fatura_Tipo0 = Fatura.Tipo.VENDA;
      Encomenda encomenda0 = new Encomenda();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(2, 2, 2, 2, 2, 2, 2);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Fatura fatura0 = new Fatura(0.88F, fatura_Tipo0, encomenda0, localDateTime0, linkedList0);
      fatura0.setCusto(2);
      assertEquals(2.0F, fatura0.getCusto(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fatura.Tipo fatura_Tipo0 = Fatura.Tipo.COMPRA;
      Encomenda encomenda0 = new Encomenda();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Fatura fatura0 = new Fatura(0.0F, fatura_Tipo0, encomenda0, localDateTime0, linkedList0);
      fatura0.getArtigos();
      assertEquals(0.0F, fatura0.getCusto(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fatura.Tipo fatura_Tipo0 = Fatura.Tipo.COMPRA;
      Encomenda encomenda0 = new Encomenda();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Fatura fatura0 = new Fatura(1.0F, fatura_Tipo0, encomenda0, localDateTime0, linkedList0);
      fatura0.getEncomenda();
      assertEquals(1.0F, fatura0.getCusto(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fatura.Tipo fatura_Tipo0 = Fatura.Tipo.VENDA;
      Encomenda encomenda0 = new Encomenda();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(2, 2, 2, 2, 2, 2, 2);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Fatura fatura0 = new Fatura(0.88F, fatura_Tipo0, encomenda0, localDateTime0, linkedList0);
      fatura0.getDataFinalizacao();
      assertEquals(0.88F, fatura0.getCusto(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fatura.Tipo fatura_Tipo0 = Fatura.Tipo.COMPRA;
      Encomenda encomenda0 = new Encomenda();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Fatura fatura0 = new Fatura(0.0F, fatura_Tipo0, encomenda0, localDateTime0, linkedList0);
      fatura0.getTipo();
      assertEquals(0.0F, fatura0.getCusto(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fatura.Tipo fatura_Tipo0 = Fatura.Tipo.COMPRA;
      Encomenda encomenda0 = new Encomenda();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Fatura fatura0 = new Fatura(1.0F, fatura_Tipo0, encomenda0, localDateTime0, linkedList0);
      float float0 = fatura0.getCusto();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fatura.Tipo fatura_Tipo0 = Fatura.Tipo.COMPRA;
      Encomenda encomenda0 = new Encomenda();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Fatura fatura0 = new Fatura(1.0F, fatura_Tipo0, encomenda0, localDateTime0, linkedList0);
      fatura0.toString();
      assertEquals(1.0F, fatura0.getCusto(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fatura.Tipo fatura_Tipo0 = Fatura.Tipo.COMPRA;
      Encomenda encomenda0 = new Encomenda();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Fatura fatura0 = new Fatura(1.0F, fatura_Tipo0, encomenda0, localDateTime0, linkedList0);
      fatura0.setDataFinalizacao(localDateTime0);
      assertEquals(1.0F, fatura0.getCusto(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fatura.Tipo fatura_Tipo0 = Fatura.Tipo.COMPRA;
      Encomenda encomenda0 = new Encomenda();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Fatura fatura0 = new Fatura(1.0F, fatura_Tipo0, encomenda0, localDateTime0, linkedList0);
      fatura0.setArtigos(linkedList0);
      assertEquals(1.0F, fatura0.getCusto(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fatura.Tipo fatura_Tipo0 = Fatura.Tipo.VENDA;
      Encomenda encomenda0 = new Encomenda();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(2, 2, 2, 2, 2, 2, 2);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Fatura fatura0 = new Fatura(0.88F, fatura_Tipo0, encomenda0, localDateTime0, linkedList0);
      fatura0.setEncomenda(encomenda0);
      assertEquals(0.88F, fatura0.getCusto(), 0.01F);
  }
}
