/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 15:34:57 GMT 2025
 */

package Vintage.qql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Vintage.qql.Encomenda;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Encomenda_ESTest extends Encomenda_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Integer integer0 = Integer.getInteger("Vl]Y", 0);
      Integer integer1 = new Integer(1838);
      Integer integer2 = encomenda0.adicionarArtigo(integer0, integer1);
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = encomenda0.adicionarArtigo(integer0, integer2);
      assertNotNull(integer3);
      assertEquals(0.5F, encomenda0.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
      assertEquals(0.25F, encomenda0.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
      assertEquals(1, encomenda0.getCodigo());
      assertEquals(0, (int)integer3);
      assertEquals(0.0F, encomenda0.getPrecoFinal(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Integer integer0 = Integer.getInteger("Vl]Y", 0);
      Integer integer1 = new Integer(1838);
      Integer integer2 = encomenda0.adicionarArtigo(integer0, integer1);
      assertEquals(0, (int)integer2);
      
      Integer integer3 = encomenda0.adicionarArtigo(integer0, integer1);
      assertEquals(0.0F, encomenda0.getPrecoFinal(), 0.01F);
      assertEquals(0.25F, encomenda0.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
      assertEquals(0.5F, encomenda0.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      assertEquals(1, encomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.PEQUENO;
      Encomenda encomenda0 = new Encomenda(encomenda_TamanhoEmbalagem0, 1.0F);
      Integer integer0 = new Integer(359);
      Integer integer1 = new Integer(0);
      Integer integer2 = encomenda0.adicionarArtigo(integer0, integer1);
      assertEquals(359, (int)integer2);
      
      Integer integer3 = encomenda0.removerArtigo(integer0);
      assertEquals(0.5F, encomenda0.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
      assertEquals(0, (int)integer3);
      assertEquals(0.25F, encomenda0.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
      assertEquals(0.0F, encomenda0.getPrecoFinal(), 0.01F);
      assertEquals(1, encomenda0.getCodigo());
      assertNotNull(integer3);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Integer integer0 = new Integer(72);
      encomenda0.adicionarArtigo(integer0, integer0);
      Integer integer1 = encomenda0.removerArtigo(integer0);
      assertNotNull(integer1);
      assertEquals(0.0F, encomenda0.getPrecoFinal(), 0.01F);
      assertEquals(0.25F, encomenda0.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
      assertEquals(1, encomenda0.getCodigo());
      assertEquals(0.5F, encomenda0.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.GRANDE;
      Encomenda encomenda0 = new Encomenda(encomenda_TamanhoEmbalagem0, 498);
      Integer integer0 = new Integer(498);
      Integer integer1 = encomenda0.adicionarArtigo(integer0, integer0);
      Integer integer2 = encomenda0.removerArtigo(integer1);
      assertEquals(0.5F, encomenda0.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
      assertEquals(0.25F, encomenda0.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
      assertEquals(0.0F, encomenda0.getPrecoFinal(), 0.01F);
      assertNotNull(integer2);
      assertEquals(1, encomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.GRANDE;
      Encomenda encomenda0 = new Encomenda(encomenda_TamanhoEmbalagem0, 1183.4314F);
      encomenda0.getTamanhoEmbalagem();
      assertEquals(0.5F, encomenda0.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
      assertEquals(0.25F, encomenda0.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
      assertEquals(1, encomenda0.getCodigo());
      assertEquals(0.0F, encomenda0.getPrecoFinal(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPrecoFinal(818.8063F);
      float float0 = encomenda0.getPrecoFinal();
      assertEquals(818.8063F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0F, encomenda0.getPrecoFinal(), 0.01F);
      
      encomenda0.setPrecoFinal((-1.0F));
      float float0 = encomenda0.getPrecoFinal();
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getDataPrevistaEntrega();
      assertEquals(1, encomenda0.getCodigo());
      assertEquals(0.0F, encomenda0.getPrecoFinal(), 0.01F);
      assertEquals(0.25F, encomenda0.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
      assertEquals(0.5F, encomenda0.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.MEDIO;
      Encomenda encomenda0 = new Encomenda(encomenda_TamanhoEmbalagem0, (-635.0F));
      encomenda0.setDataFinalizacao();
      encomenda0.getDataFinalizacao();
      assertEquals(1, encomenda0.getCodigo());
      assertEquals(0.0F, encomenda0.getPrecoFinal(), 0.01F);
      assertEquals(0.5F, encomenda0.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
      assertEquals(0.25F, encomenda0.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.PEQUENO;
      Encomenda.EstadoEncomenda encomenda_EstadoEncomenda0 = Encomenda.EstadoEncomenda.PENDENTE;
      Encomenda encomenda0 = new Encomenda((-1836), hashMap0, encomenda_TamanhoEmbalagem0, 471.7305F, encomenda_EstadoEncomenda0, (LocalDateTime) null, (LocalDateTime) null, (LocalDateTime) null);
      encomenda0.getDataCriacao();
      assertEquals(0.25F, encomenda0.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
      assertEquals(471.7305F, encomenda0.getPrecoFinal(), 0.01F);
      assertEquals((-1836), encomenda0.getCodigo());
      assertEquals(0.5F, encomenda0.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      int int0 = encomenda0.getCodigo();
      assertEquals(0.0F, encomenda0.getPrecoFinal(), 0.01F);
      assertEquals(1, int0);
      assertEquals(0.5F, encomenda0.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
      assertEquals(0.25F, encomenda0.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Map<Integer, Integer> map0 = encomenda0.getArtigos();
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.MEDIO;
      Encomenda.EstadoEncomenda encomenda_EstadoEncomenda0 = Encomenda.EstadoEncomenda.DEVOLVIDA;
      Encomenda encomenda1 = new Encomenda((-1), map0, encomenda_TamanhoEmbalagem0, (-1), encomenda_EstadoEncomenda0, (LocalDateTime) null, (LocalDateTime) null, (LocalDateTime) null);
      int int0 = encomenda1.getCodigo();
      assertEquals(0.0F, encomenda0.getPrecoFinal(), 0.01F);
      assertEquals(1, encomenda0.getCodigo());
      assertEquals(0.25F, encomenda0.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
      assertEquals(0.25F, encomenda1.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
      assertEquals(0.5F, encomenda1.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
      assertEquals(0.5F, encomenda0.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
      assertEquals((-1.0F), encomenda1.getPrecoFinal(), 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(0);
      Integer integer2 = encomenda0.adicionarArtigo(integer0, integer1);
      assertNotNull(integer2);
      assertEquals(1, encomenda0.getCodigo());
      assertEquals(0.25F, encomenda0.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
      assertEquals(0.5F, encomenda0.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
      assertEquals(0.0F, encomenda0.getPrecoFinal(), 0.01F);
      assertEquals((-1), (int)integer2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Integer integer0 = Integer.getInteger("Vl]Y", 0);
      encomenda0.adicionarArtigo(integer0, integer0);
      Map<Integer, Integer> map0 = encomenda0.getArtigos();
      assertEquals(0.5F, encomenda0.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
      assertEquals(0.25F, encomenda0.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
      assertFalse(map0.isEmpty());
      assertEquals(1, encomenda0.getCodigo());
      assertEquals(0.0F, encomenda0.getPrecoFinal(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      // Undeclared exception!
      try { 
        encomenda0.setDataPrevistaEntrega((LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.qql.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.MEDIO;
      Encomenda encomenda0 = new Encomenda(encomenda_TamanhoEmbalagem0, 0.0F);
      Map<Integer, Integer> map0 = encomenda0.getArtigos();
      Encomenda.EstadoEncomenda encomenda_EstadoEncomenda0 = Encomenda.EstadoEncomenda.EXPEDIDA;
      Encomenda encomenda1 = new Encomenda(1, map0, encomenda_TamanhoEmbalagem0, 0.25F, encomenda_EstadoEncomenda0, (LocalDateTime) null, (LocalDateTime) null, (LocalDateTime) null);
      // Undeclared exception!
      try { 
        encomenda1.devolverEncomenda();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.PEQUENO;
      Encomenda encomenda0 = new Encomenda(encomenda_TamanhoEmbalagem0, 0.0F);
      // Undeclared exception!
      try { 
        encomenda0.adicionarArtigo((Integer) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.qql.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.GRANDE;
      Encomenda.EstadoEncomenda encomenda_EstadoEncomenda0 = Encomenda.EstadoEncomenda.EXPEDIDA;
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda(0, (Map<Integer, Integer>) null, encomenda_TamanhoEmbalagem0, 2925.1F, encomenda_EstadoEncomenda0, localDateTime0, localDateTime0, localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.GRANDE;
      Encomenda.EstadoEncomenda encomenda_EstadoEncomenda0 = Encomenda.EstadoEncomenda.EXPEDIDA;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0L, 0, zoneOffset0);
      Encomenda encomenda0 = new Encomenda(0, hashMap0, encomenda_TamanhoEmbalagem0, 0, encomenda_EstadoEncomenda0, localDateTime0, localDateTime0, localDateTime0);
      encomenda0.getDataCriacao();
      assertEquals(0.0F, encomenda0.getPrecoFinal(), 0.01F);
      assertEquals(0.25F, encomenda0.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
      assertEquals(0.5F, encomenda0.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
      assertEquals(0, encomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.GRANDE;
      Encomenda encomenda0 = new Encomenda(encomenda_TamanhoEmbalagem0, (-951.93F));
      System.setCurrentTimeMillis(26);
      Encomenda.EstadoEncomenda encomenda_EstadoEncomenda0 = Encomenda.EstadoEncomenda.EXPEDIDA;
      encomenda0.setEstado(encomenda_EstadoEncomenda0);
      encomenda0.devolverEncomenda();
      assertEquals(Encomenda.EstadoEncomenda.EXPEDIDA, encomenda0.getEstado());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.GRANDE;
      Encomenda encomenda0 = new Encomenda(encomenda_TamanhoEmbalagem0, (-951.93F));
      encomenda0.devolverEncomenda();
      assertEquals(Encomenda.EstadoEncomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getCodigo());
      assertEquals(0.25F, encomenda0.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
      assertEquals(0.0F, encomenda0.getPrecoFinal(), 0.01F);
      assertEquals(0.5F, encomenda0.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Integer integer0 = new Integer((-1823));
      Integer integer1 = encomenda0.adicionarArtigo(integer0, integer0);
      assertNull(integer1);
      assertEquals(0.5F, encomenda0.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
      assertEquals(0.0F, encomenda0.getPrecoFinal(), 0.01F);
      assertEquals(1, encomenda0.getCodigo());
      assertEquals(0.25F, encomenda0.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Integer integer0 = new Integer(2741);
      encomenda0.adicionarArtigo(integer0, integer0);
      Integer integer1 = new Integer(1459);
      encomenda0.adicionarArtigo(integer1, integer1);
      encomenda0.setTamanhoEmbalagem();
      assertEquals(1, encomenda0.getCodigo());
      assertEquals(0.0F, encomenda0.getPrecoFinal(), 0.01F);
      assertEquals(0.5F, encomenda0.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
      assertEquals(0.25F, encomenda0.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
      assertEquals(Encomenda.TamanhoEmbalagem.MEDIO, encomenda0.getTamanhoEmbalagem());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.GRANDE;
      Encomenda encomenda0 = new Encomenda(encomenda_TamanhoEmbalagem0, 511);
      Integer integer0 = new Integer(511);
      encomenda0.adicionarArtigo(integer0, integer0);
      encomenda0.setTamanhoEmbalagem();
      assertEquals(Encomenda.TamanhoEmbalagem.PEQUENO, encomenda0.getTamanhoEmbalagem());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.GRANDE;
      Encomenda.EstadoEncomenda encomenda_EstadoEncomenda0 = Encomenda.EstadoEncomenda.EXPEDIDA;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0L, 0, zoneOffset0);
      Encomenda encomenda0 = new Encomenda(0, hashMap0, encomenda_TamanhoEmbalagem0, 0, encomenda_EstadoEncomenda0, localDateTime0, localDateTime0, localDateTime0);
      encomenda0.setTamanhoEmbalagem();
      assertEquals(0, encomenda0.getCodigo());
      assertEquals(0.0F, encomenda0.getPrecoFinal(), 0.01F);
      assertEquals(Encomenda.TamanhoEmbalagem.GRANDE, encomenda0.getTamanhoEmbalagem());
      assertEquals(0.5F, encomenda0.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
      assertEquals(0.25F, encomenda0.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond((-1823), 1, zoneOffset0);
      encomenda0.setDataPrevistaEntrega(localDateTime0);
      assertEquals(0.5F, encomenda0.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
      assertEquals(0.25F, encomenda0.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
      assertEquals(1, encomenda0.getCodigo());
      assertEquals(0.0F, encomenda0.getPrecoFinal(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.GRANDE;
      Encomenda.EstadoEncomenda encomenda_EstadoEncomenda0 = Encomenda.EstadoEncomenda.EXPEDIDA;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0L, 0, zoneOffset0);
      Encomenda encomenda0 = new Encomenda(0, hashMap0, encomenda_TamanhoEmbalagem0, 0, encomenda_EstadoEncomenda0, localDateTime0, localDateTime0, localDateTime0);
      encomenda0.setDataPrevistaEntrega(localDateTime0);
      assertEquals(0, encomenda0.getCodigo());
      assertEquals(0.0F, encomenda0.getPrecoFinal(), 0.01F);
      assertEquals(0.25F, encomenda0.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
      assertEquals(0.5F, encomenda0.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.GRANDE;
      Encomenda.EstadoEncomenda encomenda_EstadoEncomenda0 = Encomenda.EstadoEncomenda.EXPEDIDA;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0L, 0, zoneOffset0);
      Encomenda encomenda0 = new Encomenda(0, hashMap0, encomenda_TamanhoEmbalagem0, 0, encomenda_EstadoEncomenda0, localDateTime0, localDateTime0, localDateTime0);
      encomenda0.setEstado((Encomenda.EstadoEncomenda) null);
      assertEquals(0.5F, encomenda0.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
      assertEquals(0.25F, encomenda0.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
      assertEquals(0.0F, encomenda0.getPrecoFinal(), 0.01F);
      assertEquals(0, encomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.GRANDE;
      Encomenda encomenda0 = new Encomenda(encomenda_TamanhoEmbalagem0, 511);
      Map<Integer, Integer> map0 = encomenda0.getArtigos();
      Encomenda.EstadoEncomenda encomenda_EstadoEncomenda0 = Encomenda.EstadoEncomenda.FINALIZADA;
      Encomenda encomenda1 = new Encomenda(511, map0, encomenda_TamanhoEmbalagem0, 0.25F, encomenda_EstadoEncomenda0, (LocalDateTime) null, (LocalDateTime) null, (LocalDateTime) null);
      assertEquals(0.5F, encomenda1.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
      assertEquals(0.25F, encomenda1.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
      assertEquals(1, encomenda0.getCodigo());
      assertEquals(0.25F, encomenda0.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
      assertEquals(0.0F, encomenda0.getPrecoFinal(), 0.01F);
      assertEquals(0.5F, encomenda0.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
      assertEquals(0.25F, encomenda1.getPrecoFinal(), 0.01F);
      assertEquals(511, encomenda1.getCodigo());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      float float0 = encomenda0.getPrecoFinal();
      assertEquals(0.5F, encomenda0.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.25F, encomenda0.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
      assertEquals(1, encomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.GRANDE;
      Encomenda encomenda0 = new Encomenda(encomenda_TamanhoEmbalagem0, 511);
      encomenda0.getDataFinalizacao();
      assertEquals(0.25F, encomenda0.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
      assertEquals(0.5F, encomenda0.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
      assertEquals(0.0F, encomenda0.getPrecoFinal(), 0.01F);
      assertEquals(1, encomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.GRANDE;
      Encomenda.EstadoEncomenda encomenda_EstadoEncomenda0 = Encomenda.EstadoEncomenda.EXPEDIDA;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0L, 0, zoneOffset0);
      Encomenda encomenda0 = new Encomenda(0, hashMap0, encomenda_TamanhoEmbalagem0, 0, encomenda_EstadoEncomenda0, localDateTime0, localDateTime0, localDateTime0);
      encomenda0.devolverEncomenda();
      assertEquals(Encomenda.EstadoEncomenda.DEVOLVIDA, encomenda0.getEstado());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.GRANDE;
      Encomenda.EstadoEncomenda encomenda_EstadoEncomenda0 = Encomenda.EstadoEncomenda.EXPEDIDA;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0L, 0, zoneOffset0);
      Encomenda encomenda0 = new Encomenda(0, hashMap0, encomenda_TamanhoEmbalagem0, 0, encomenda_EstadoEncomenda0, localDateTime0, localDateTime0, localDateTime0);
      int int0 = encomenda0.getCodigo();
      assertEquals(0.5F, encomenda0.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
      assertEquals(0.25F, encomenda0.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
      assertEquals(0.0F, encomenda0.getPrecoFinal(), 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.GRANDE;
      Encomenda.EstadoEncomenda encomenda_EstadoEncomenda0 = Encomenda.EstadoEncomenda.EXPEDIDA;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0L, 0, zoneOffset0);
      Encomenda encomenda0 = new Encomenda(0, hashMap0, encomenda_TamanhoEmbalagem0, 0, encomenda_EstadoEncomenda0, localDateTime0, localDateTime0, localDateTime0);
      String string0 = encomenda0.toString();
      assertEquals("c\u00F3digo: 0, artigos: 0, embalagem: GRANDE, pre\u00E7o final: 0.0, estado: EXPEDIDA, data de cria\u00E7\u00E3o: 1969-12-31T06:00, data de finaliza\u00E7\u00E3o: 1969-12-31T06:00, data prevista de entrega: 1969-12-31T06:00", string0);
      assertEquals(0.25F, encomenda0.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
      assertEquals(0.5F, encomenda0.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getTamanhoEmbalagem();
      assertEquals(0.25F, encomenda0.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
      assertEquals(1, encomenda0.getCodigo());
      assertEquals(0.0F, encomenda0.getPrecoFinal(), 0.01F);
      assertEquals(0.5F, encomenda0.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getEstado();
      assertEquals(1, encomenda0.getCodigo());
      assertEquals(0.0F, encomenda0.getPrecoFinal(), 0.01F);
      assertEquals(0.5F, encomenda0.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
      assertEquals(0.25F, encomenda0.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.GRANDE;
      Encomenda encomenda0 = new Encomenda(encomenda_TamanhoEmbalagem0, 511);
      Integer integer0 = new Integer(511);
      encomenda0.removerArtigo(integer0);
      assertEquals(1, encomenda0.getCodigo());
      assertEquals(0.0F, encomenda0.getPrecoFinal(), 0.01F);
      assertEquals(0.25F, encomenda0.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
      assertEquals(0.5F, encomenda0.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.GRANDE;
      Encomenda.EstadoEncomenda encomenda_EstadoEncomenda0 = Encomenda.EstadoEncomenda.EXPEDIDA;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0L, 0, zoneOffset0);
      Encomenda encomenda0 = new Encomenda(0, hashMap0, encomenda_TamanhoEmbalagem0, 0, encomenda_EstadoEncomenda0, localDateTime0, localDateTime0, localDateTime0);
      encomenda0.getDataPrevistaEntrega();
      assertEquals(0, encomenda0.getCodigo());
      assertEquals(0.0F, encomenda0.getPrecoFinal(), 0.01F);
      assertEquals(0.25F, encomenda0.TAXA_SATISFACAO_ARTIGO_USADO, 0.01F);
      assertEquals(0.5F, encomenda0.TAXA_SATISFACAO_ARTIGO_NOVO, 0.01F);
  }
}
