/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 15:27:41 GMT 2025
 */

package Vintage.mvc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Vintage.mvc.Model;
import Vintage.qql.Artigo;
import Vintage.qql.Encomenda;
import Vintage.qql.Mala;
import Vintage.qql.Sapatilha;
import Vintage.qql.TShirt;
import Vintage.qql.Transportadora;
import Vintage.qql.Utilizador;
import java.time.Clock;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Model_ESTest extends Model_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      HashMap<Integer, Artigo> hashMap1 = new HashMap<Integer, Artigo>();
      HashMap<String, Transportadora> hashMap2 = new HashMap<String, Transportadora>();
      Model model0 = new Model((LocalDateTime) null, hashMap1, hashMap1, hashMap1, hashMap0, hashMap2, 0);
      // Undeclared exception!
      try { 
        model0.getMaiorVendedorValorPeriodo("", localDateTime0, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Model model0 = new Model();
      Utilizador utilizador0 = new Utilizador("=E|j'LN:?=7ekI", "=E|j'LN:?=7ekI", "=E|j'LN:?=7ekI", "A=!=X3sQ");
      model0.addUtilizador(utilizador0);
      // Undeclared exception!
      try { 
        model0.calcularPrecoFinalEncomenda("=E|j'LN:?=7ekI");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Model model0 = new Model();
      Transportadora transportadora0 = new Transportadora();
      model0.addTransportadora(transportadora0);
      model0.alterarFormulaTransportadora("", "");
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Model model0 = new Model();
      Transportadora transportadora0 = new Transportadora((String) null, 5.0F, 5.0F, 2836.4F, 1.0F, 2836.4F);
      model0.addTransportadora(transportadora0);
      model0.showFormulaTransportadora((String) null);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Model model0 = new Model();
      Transportadora transportadora0 = new Transportadora("", 5.0F, 5.0F, (-2565.6367F), 2355.5F, 0.0F);
      model0.addTransportadora(transportadora0);
      model0.getNumTransportadoras();
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Model model0 = new Model();
      Integer integer0 = new Integer(2060);
      model0.addArtigoEncomenda2(integer0);
      model0.getNumArtigos();
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Model model0 = new Model();
      Utilizador utilizador0 = new Utilizador("=E|j'LN:?=7ekI", "=E|j'LN:?=7ekI", "=E|j'LN:?=7ekI", "A=!=X3sQ");
      model0.addUtilizador(utilizador0);
      model0.getMaiorVendedorValor("=E|j'LN:?=7ekI");
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Model model0 = new Model();
      model0.setLucro(101093.414F);
      float float0 = model0.getLucro();
      assertEquals(101093.414F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Model model0 = new Model();
      Map<Integer, Artigo> map0 = model0.getCatalogoArtigos();
      Map<String, Utilizador> map1 = model0.getCatalogoUtilizadores();
      Map<String, Transportadora> map2 = model0.getCatalogoTransportadoras();
      Model model1 = new Model((LocalDateTime) null, map0, map0, map0, map1, map2, (-995.6F));
      float float0 = model1.getLucro();
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(5.0F, model1.TAXA_DE_GARANTIA, 0.01F);
      assertEquals((-995.6F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Model model0 = new Model();
      model0.getArtigosVendidos();
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Model model0 = new Model();
      Integer integer0 = new Integer((-57));
      Sapatilha sapatilha0 = new Sapatilha((String) null, "&o0S]QL|fDn%T1J", "\n", integer0, (-826.0F), (-826.0F), true, (-57), "CITdqQOzEpt2p|N}", (String) null, (-57), "", 17, true, "", 17, true);
      String string0 = model0.addArtigo(sapatilha0);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Model model0 = new Model();
      Mala mala0 = new Mala();
      mala0.setNome("88");
      String string0 = model0.addArtigo(mala0);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals("88", string0);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.showFaturas("2QZ+hVY2K<$%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.showEncomendasFeitas(">q-Jo/$g.M?Mo");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.showEncomenda("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Model model0 = new Model();
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Utilizador utilizador0 = new Utilizador("Dv=\"uPNJLyZ)", "L", "\n", "Vintage.qql.Mala");
      hashMap0.put("Dv=\"uPNJLyZ)", utilizador0);
      BiFunction<Object, Utilizador, Utilizador> biFunction0 = (BiFunction<Object, Utilizador, Utilizador>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any(Vintage.qql.Utilizador.class));
      hashMap0.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        model0.setCatalogoUtilizadores(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.setCatalogoTransportadoras((Map<String, Transportadora>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.setCatalogoArtigosEncomenda((Map<Integer, Artigo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.setCatalogoArtigos((Map<Integer, Artigo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.setArtigosVendidos((Map<Integer, Artigo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.getVendasUtilizador("(~,|6H");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Model model0 = new Model();
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        model0.geraFaturaComprador(utilizador0, (Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.finalizarCompra("z6-;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Model model0 = new Model();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        model0.devolverEncomenda(", stock: ", integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.checkUtilizadorTemFaturas("\"?RQISTu_x9V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Model model0 = new Model();
      Integer integer0 = new Integer(1895);
      // Undeclared exception!
      try { 
        model0.checkUtilizadorTemEncADevolver(integer0, ", data de cria\u00E7\u00E3o: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.checkUtilizadorEncADevolver("a+4ncL3Utn1;~[sB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.checkEncomendaVazia("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.addUtilizador((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.addTransportadora((Transportadora) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.addArtigo((Artigo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Model model0 = null;
      try {
        model0 = new Model((Model) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Model model0 = new Model();
      Transportadora transportadora0 = new Transportadora("q,gA+", 787.737F, 0.0F, 0.0F, 0.0F, 0.0F);
      model0.addTransportadora(transportadora0);
      model0.getCatalogoTransportadoras();
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Model model0 = new Model();
      Map<String, Utilizador> map0 = model0.getCatalogoUtilizadores();
      HashMap<String, Transportadora> hashMap1 = new HashMap<String, Transportadora>();
      Integer integer0 = new Integer((-1));
      Sapatilha sapatilha0 = new Sapatilha(2174, false, "\"?RQISTu_x9V", 2174, true);
      hashMap0.put(integer0, sapatilha0);
      Model model1 = new Model(localDateTime0, hashMap0, hashMap0, hashMap0, map0, hashMap1, 5.0F);
      model1.getArtigosVendidos();
      assertEquals(5.0F, model1.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Model model0 = new Model();
      Map<String, Utilizador> map0 = model0.getCatalogoUtilizadores();
      HashMap<String, Transportadora> hashMap1 = new HashMap<String, Transportadora>();
      Integer integer0 = new Integer((-1));
      TShirt tShirt0 = new TShirt();
      hashMap0.put(integer0, tShirt0);
      Model model1 = new Model(localDateTime0, hashMap0, hashMap0, hashMap0, map0, hashMap1, 5.0F);
      Map<Integer, Artigo> map1 = model1.getArtigosVendidos();
      assertEquals(5.0F, model1.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertEquals(1, map1.size());
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Model model0 = new Model();
      Map<String, Utilizador> map0 = model0.getCatalogoUtilizadores();
      HashMap<String, Transportadora> hashMap1 = new HashMap<String, Transportadora>();
      Integer integer0 = new Integer((-1));
      Sapatilha sapatilha0 = new Sapatilha(2174, false, "\"?RQISTu_x9V", 2174, true);
      hashMap0.put(integer0, sapatilha0);
      Model model1 = new Model(localDateTime0, hashMap0, hashMap0, hashMap0, map0, hashMap1, 5.0F);
      Map<Integer, Artigo> map1 = model1.getCatalogoArtigosEncomenda();
      assertEquals(5.0F, model1.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertEquals(1, map1.size());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Model model0 = new Model();
      Map<String, Utilizador> map0 = model0.getCatalogoUtilizadores();
      HashMap<String, Transportadora> hashMap1 = new HashMap<String, Transportadora>();
      Integer integer0 = new Integer((-1));
      TShirt tShirt0 = new TShirt();
      hashMap0.put(integer0, tShirt0);
      Model model1 = new Model(localDateTime0, hashMap0, hashMap0, hashMap0, map0, hashMap1, 5.0F);
      Map<Integer, Artigo> map1 = model1.getCatalogoArtigosEncomenda();
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(1, map1.size());
      assertEquals(5.0F, model1.TAXA_DE_GARANTIA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Model model0 = new Model();
      model0.getCatalogoArtigosEncomenda();
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Model model0 = new Model();
      Map<String, Utilizador> map0 = model0.getCatalogoUtilizadores();
      HashMap<String, Transportadora> hashMap1 = new HashMap<String, Transportadora>();
      Integer integer0 = new Integer((-1));
      TShirt tShirt0 = new TShirt();
      hashMap0.put(integer0, tShirt0);
      Model model1 = new Model(localDateTime0, hashMap0, hashMap0, hashMap0, map0, hashMap1, 5.0F);
      model1.getCatalogoArtigos();
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(5.0F, model1.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Model model0 = new Model();
      Map<String, Utilizador> map0 = model0.getCatalogoUtilizadores();
      HashMap<String, Transportadora> hashMap1 = new HashMap<String, Transportadora>();
      Integer integer0 = new Integer((-1));
      Sapatilha sapatilha0 = new Sapatilha(2174, false, "\"?RQISTu_x9V", 2174, true);
      hashMap0.put(integer0, sapatilha0);
      Model model1 = new Model(localDateTime0, hashMap0, hashMap0, hashMap0, map0, hashMap1, 5.0F);
      model1.getCatalogoArtigos();
      assertEquals(5.0F, model1.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Model model0 = new Model();
      Map<String, Utilizador> map0 = model0.getCatalogoUtilizadores();
      HashMap<String, Transportadora> hashMap1 = new HashMap<String, Transportadora>();
      Integer integer0 = new Integer((-1927));
      Mala mala0 = new Mala();
      hashMap0.put(integer0, mala0);
      Model model1 = new Model(localDateTime0, hashMap0, hashMap0, hashMap0, map0, hashMap1, 5.0F);
      model1.getCatalogoArtigos();
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(5.0F, model1.TAXA_DE_GARANTIA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Model model0 = new Model();
      float float0 = model0.getLucro();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Model model0 = new Model();
      model0.getCurrentDateTime();
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Model model0 = new Model();
      Utilizador utilizador0 = new Utilizador();
      model0.addUtilizador(utilizador0);
      Map<String, Integer> map0 = model0.getListaMaioresVendedores((LocalDateTime) null, (LocalDateTime) null);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Model model0 = new Model();
      model0.getListaMaioresVendedores((LocalDateTime) null, (LocalDateTime) null);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Model model0 = new Model();
      float float0 = model0.showValorTransportadora("n4`w5Xt%DGqAcj|j9bP", (-1572));
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.showValorTransportadora("", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.alterarValorTransportadora("M", 4, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.alterarValorTransportadora("", 3, 169.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.alterarValorTransportadora("-\"'h>=A[", 2, 2845.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Model model0 = new Model();
      model0.alterarValorTransportadora("2QZ+hVY2K<$%", (-1), (-1.0F));
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.alterarValorTransportadora("\n", 1, (-286.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Model model0 = new Model();
      Utilizador utilizador0 = new Utilizador("VENDA", "-\"'h>=A[", "VENDA", "");
      model0.addUtilizador(utilizador0);
      String string0 = model0.showFaturas("-\"'h>=A[");
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertEquals("\n", string0);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Model model0 = new Model();
      Utilizador utilizador0 = new Utilizador("", "(VB * MLT * (1 + I)) * 0.9", "Kw3Do56I:QXFe\",J_", "");
      model0.addUtilizador(utilizador0);
      model0.startSimulation();
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Model model0 = new Model();
      Transportadora transportadora0 = new Transportadora((String) null, 5.0F, 5.0F, 2836.4F, 1.0F, 2836.4F);
      transportadora0.setLucroEfetivo((-2388.622F));
      model0.addTransportadora(transportadora0);
      // Undeclared exception!
      try { 
        model0.getMaiorTransportadora();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Model model0 = new Model();
      Transportadora transportadora0 = new Transportadora((String) null, 5.0F, 5.0F, 2836.4F, 1.0F, 2836.4F);
      model0.addTransportadora(transportadora0);
      model0.getMaiorTransportadora();
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Model model0 = new Model();
      Utilizador utilizador0 = new Utilizador();
      model0.addUtilizador(utilizador0);
      model0.getMaiorVendedorPeriodo((LocalDateTime) null, (LocalDateTime) null);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.getMaiorVendedorPeriodo(localDateTime0, localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.getMaiorVendedor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Model model0 = new Model();
      Utilizador utilizador0 = new Utilizador("Vintage.mvc.Model", (String) null, ">q-Jo/$g.M?Mo", (String) null);
      model0.addUtilizador(utilizador0);
      boolean boolean0 = model0.checkUtilizadorEncADevolver((String) null);
      assertFalse(boolean0);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Model model0 = new Model();
      Utilizador utilizador0 = new Utilizador("Vintage.mvc.Model", (String) null, ">q-Jo/$g.M?Mo", (String) null);
      model0.addUtilizador(utilizador0);
      boolean boolean0 = model0.checkEncomendaVazia((String) null);
      assertTrue(boolean0);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Model model0 = new Model();
      boolean boolean0 = model0.checkTransportadoraExiste("BV~");
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Model model0 = new Model();
      Utilizador utilizador0 = new Utilizador("Vintage.mc.Moel", (String) null, ">q-Jo/$g.M?Mo", ">q-Jo/$g.M?Mo");
      model0.addUtilizador(utilizador0);
      boolean boolean0 = model0.checkUtilizadorExiste((String) null);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Model model0 = new Model();
      boolean boolean0 = model0.checkUtilizadorExiste("FZ|xN79Wf`r8;i49");
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Model model0 = new Model();
      Utilizador utilizador0 = new Utilizador();
      model0.addUtilizador(utilizador0);
      String string0 = model0.showEncomendasFeitas("");
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Model model0 = new Model();
      Utilizador utilizador0 = new Utilizador("Vintage.mvc.Model", (String) null, ">q-Jo/$g.M?Mo", (String) null);
      model0.addUtilizador(utilizador0);
      String string0 = model0.showEncomenda((String) null);
      assertEquals("\nSem artigos na encomenda!", string0);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Model model0 = new Model();
      Map<String, Utilizador> map0 = model0.getCatalogoUtilizadores();
      HashMap<String, Transportadora> hashMap1 = new HashMap<String, Transportadora>();
      Integer integer0 = new Integer((-1));
      Sapatilha sapatilha0 = new Sapatilha(2174, false, "\"?RQISTu_x9V", 2174, true);
      hashMap0.put(integer0, sapatilha0);
      Model model1 = new Model(localDateTime0, hashMap0, hashMap0, hashMap0, map0, hashMap1, 5.0F);
      // Undeclared exception!
      try { 
        model1.addArtigoEncomenda(integer0, (Integer) null, "19=xCbwA_?ow_qs,?1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Model model0 = new Model();
      Integer integer0 = new Integer(2);
      Integer integer1 = model0.addArtigoEncomenda(integer0, integer0, "");
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Model model0 = new Model();
      HashMap<String, Transportadora> hashMap0 = new HashMap<String, Transportadora>();
      Transportadora transportadora0 = new Transportadora("\n", 5.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      hashMap0.put("", transportadora0);
      model0.setCatalogoTransportadoras(hashMap0);
      model0.showTransportadoras();
      assertEquals(1, model0.getNumTransportadoras());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Model model0 = new Model();
      model0.showTransportadoras();
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Model model0 = new Model();
      Map<String, Utilizador> map0 = model0.getCatalogoUtilizadores();
      HashMap<String, Transportadora> hashMap1 = new HashMap<String, Transportadora>();
      Integer integer0 = new Integer((-1));
      TShirt tShirt0 = new TShirt();
      hashMap0.put(integer0, tShirt0);
      Model model1 = new Model(localDateTime0, hashMap0, hashMap0, hashMap0, map0, hashMap1, 5.0F);
      String string0 = model1.showArtigos();
      assertEquals("c\u00F3digo: 0, nome: , descri\u00E7\u00E3o: , marca: , pre\u00E7o base: 0.0, corre\u00E7\u00E3o de pre\u00E7o: 0.0, novo: true, n\u00FAmero de donos: 0, condi\u00E7\u00E3o: , transportadora: , vendedor: , tipo: t-shirt, tamanho: null, padr\u00E3o: null, desconto: 0%, stock: 0\n", string0);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(5.0F, model1.TAXA_DE_GARANTIA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Model model0 = new Model();
      model0.showArtigos();
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Model model0 = new Model();
      TShirt tShirt0 = new TShirt();
      // Undeclared exception!
      try { 
        model0.addTShirt(tShirt0, "#@~XMog3SKK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Model model0 = new Model();
      Map<String, Utilizador> map0 = model0.getCatalogoUtilizadores();
      HashMap<String, Transportadora> hashMap1 = new HashMap<String, Transportadora>();
      Integer integer0 = new Integer((-1));
      Sapatilha sapatilha0 = new Sapatilha(2174, false, "\"?RQISTu_x9V", 2174, true);
      hashMap0.put(integer0, sapatilha0);
      Sapatilha sapatilha1 = new Sapatilha("\"?RQISTu_x9V", "\"?RQISTu_x9V", "\"?RQISTu_x9V", integer0, 5.0F, 5.0F, true, (-1), "\"?RQISTu_x9V", "\"?RQISTu_x9V", (-1), "\"?RQISTu_x9V", (-1), false, "\"?RQISTu_x9V", (-1), false);
      Model model1 = new Model(localDateTime0, hashMap0, hashMap0, hashMap0, map0, hashMap1, 5.0F);
      Model model2 = new Model(model1);
      String string0 = model2.addSapatilha(sapatilha1, "\"?RQISTu_x9V");
      assertEquals(5.0F, model2.getLucro(), 0.01F);
      assertEquals(5.0F, model1.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(5.0F, model2.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertEquals("null", string0);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Model model0 = new Model();
      Sapatilha sapatilha0 = new Sapatilha(2174, false, "\"?RQISTu_x9V", 2174, true);
      // Undeclared exception!
      try { 
        model0.addSapatilha(sapatilha0, "\"?RQISTu_x9V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Model model0 = new Model();
      Map<String, Utilizador> map0 = model0.getCatalogoUtilizadores();
      HashMap<String, Transportadora> hashMap1 = new HashMap<String, Transportadora>();
      Integer integer0 = new Integer((-1));
      TShirt tShirt0 = new TShirt();
      hashMap0.put(integer0, tShirt0);
      Model model1 = new Model(localDateTime0, hashMap0, hashMap0, hashMap0, map0, hashMap1, 5.0F);
      assertEquals(1, model1.getNumArtigos());
      
      Mala mala0 = new Mala("2QZ+hVY2K<$%", "2QZ+hVY2K<$%", " - ", integer0, 158.6909F, (-19.846F), true, (-1), (String) null, ">q-Jo/$g.M?Mo", (-1), ">q-Jo/$g.M?Mo", (-1), ">q-Jo/$g.M?Mo", (-1), false, (-1.0F));
      String string0 = model1.addMala(mala0, "2QZ+hVY2K<$%");
      assertEquals(5.0F, model1.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals("null", string0);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Model model0 = new Model();
      Integer integer0 = new Integer(0);
      Mala mala0 = new Mala("", "PALMEIRAS", "", integer0, (-3416.7F), 0.0F, false, 1, (String) null, "PALMEIRAS", 0, "g:H$w(tk&}]x7G`8", 1600.0991F, "", (-20), false, (-1.0F));
      // Undeclared exception!
      try { 
        model0.addMala(mala0, ", premium: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Model model0 = new Model();
      Sapatilha sapatilha0 = new Sapatilha();
      String string0 = model0.addArtigo(sapatilha0);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Model model0 = new Model();
      Transportadora transportadora0 = new Transportadora();
      model0.addTransportadora(transportadora0);
      // Undeclared exception!
      try { 
        model0.addTransportadora(transportadora0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         // Transportadora j\u00E1 existe! Tente novamente.
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Utilizador utilizador0 = new Utilizador("null", "null", "Division by zero in cotangent!", "null");
      Map<Integer, Artigo> map0 = utilizador0.getProdutosVendidos();
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      HashMap<String, Transportadora> hashMap1 = new HashMap<String, Transportadora>();
      Model model0 = new Model(localDateTime0, map0, map0, map0, hashMap0, hashMap1, (-2524.0F));
      Transportadora transportadora0 = new Transportadora();
      model0.addTransportadora(transportadora0);
      boolean boolean0 = model0.checkTransportadoraExiste("");
      assertTrue(boolean0);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Model model0 = new Model();
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Utilizador utilizador0 = new Utilizador();
      hashMap0.put("", utilizador0);
      model0.setCatalogoUtilizadores(hashMap0);
      // Undeclared exception!
      try { 
        model0.addUtilizador(utilizador0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         // Utilizador j\u00E1 existe! Tente novamente.
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Model model0 = new Model();
      Integer integer0 = new Integer((-1));
      Sapatilha sapatilha0 = new Sapatilha(2174, false, "\"?RQISTu_x9V", 2174, true);
      hashMap0.put(integer0, sapatilha0);
      model0.setArtigosVendidos(hashMap0);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Model model0 = new Model();
      Integer integer0 = new Integer((-1));
      TShirt tShirt0 = new TShirt();
      hashMap0.put(integer0, tShirt0);
      model0.setArtigosVendidos(hashMap0);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Model model0 = new Model();
      Integer integer0 = new Integer((-1));
      TShirt tShirt0 = new TShirt();
      hashMap0.put(integer0, tShirt0);
      BiFunction<Object, Object, Mala> biFunction0 = (BiFunction<Object, Object, Mala>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.replaceAll(biFunction0);
      model0.setCatalogoArtigosEncomenda(hashMap0);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Model model0 = new Model();
      Integer integer0 = new Integer((-1));
      Sapatilha sapatilha0 = new Sapatilha(2174, false, "\"?RQISTu_x9V", 2174, true);
      hashMap0.put(integer0, sapatilha0);
      model0.setCatalogoArtigosEncomenda(hashMap0);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Model model0 = new Model();
      Integer integer0 = new Integer((-1927));
      Mala mala0 = new Mala();
      hashMap0.put(integer0, mala0);
      model0.setCatalogoArtigosEncomenda(hashMap0);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Model model0 = new Model();
      Integer integer0 = new Integer((-1));
      TShirt tShirt0 = new TShirt();
      hashMap0.put(integer0, tShirt0);
      model0.setCatalogoArtigosEncomenda(hashMap0);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Model model0 = new Model();
      Integer integer0 = new Integer((-1));
      TShirt tShirt0 = new TShirt();
      hashMap0.put(integer0, tShirt0);
      BiFunction<Object, Object, Mala> biFunction0 = (BiFunction<Object, Object, Mala>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.replaceAll(biFunction0);
      model0.setCatalogoArtigos(hashMap0);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertEquals(0, model0.getNumArtigos());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Model model0 = new Model();
      Integer integer0 = new Integer((-1));
      Sapatilha sapatilha0 = new Sapatilha(2174, false, "\"?RQISTu_x9V", 2174, true);
      hashMap0.put(integer0, sapatilha0);
      model0.setCatalogoArtigos(hashMap0);
      assertEquals(1, model0.getNumArtigos());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Model model0 = new Model();
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Integer integer0 = new Integer((-100));
      Mala mala0 = new Mala("P", "P", "", integer0, 0.0F, 2.0F, false, 123, "", "", (-433), " - ", 0.0F, "", (-100), false, 0.0F);
      hashMap0.put(integer0, mala0);
      model0.setCatalogoArtigos(hashMap0);
      assertEquals(1, model0.getNumArtigos());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Model model0 = new Model();
      Integer integer0 = new Integer((-1));
      TShirt tShirt0 = new TShirt();
      hashMap0.put(integer0, tShirt0);
      model0.setCatalogoArtigos(hashMap0);
      assertEquals(1, model0.getNumArtigos());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Model model0 = new Model();
      Utilizador utilizador0 = new Utilizador("VEHNDA", "-\"'h>=A[", "VEHNDA", "");
      model0.addUtilizador(utilizador0);
      Model model1 = new Model(model0);
      assertEquals(5.0F, model1.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Model model0 = new Model();
      Integer integer0 = new Integer(13);
      model0.addArtigoEncomenda2(integer0);
      model0.getCatalogoArtigos();
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Model model0 = new Model();
      Map<String, Utilizador> map0 = model0.getCatalogoUtilizadores();
      HashMap<String, Transportadora> hashMap1 = new HashMap<String, Transportadora>();
      Transportadora transportadora0 = new Transportadora();
      hashMap1.put("%k'.]7:_!YH", transportadora0);
      Model model1 = new Model(localDateTime0, hashMap0, hashMap0, hashMap0, map0, hashMap1, 5.0F);
      model1.getMaiorTransportadora();
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(5.0F, model1.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      HashMap<String, Utilizador> hashMap1 = new HashMap<String, Utilizador>();
      Utilizador utilizador0 = new Utilizador();
      hashMap1.put("net.objecthunter.exp4j.function.Function", utilizador0);
      Model model0 = null;
      try {
        model0 = new Model(localDateTime0, hashMap0, hashMap0, hashMap0, hashMap1, (Map<String, Transportadora>) null, 837.0396F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      HashMap<String, Utilizador> hashMap1 = new HashMap<String, Utilizador>();
      Integer integer0 = new Integer((-312));
      hashMap0.put(integer0, (Artigo) null);
      Model model0 = null;
      try {
        model0 = new Model(localDateTime0, hashMap0, hashMap0, hashMap0, hashMap1, (Map<String, Transportadora>) null, 837.0396F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Model model0 = new Model();
      Map<String, Utilizador> map0 = model0.getCatalogoUtilizadores();
      HashMap<String, Transportadora> hashMap1 = new HashMap<String, Transportadora>();
      Integer integer0 = new Integer((-1927));
      Mala mala0 = new Mala();
      hashMap0.put(integer0, mala0);
      Model model1 = new Model(localDateTime0, hashMap0, hashMap0, hashMap0, map0, hashMap1, 5.0F);
      Model model2 = new Model(model1);
      assertEquals(1, model2.getNumArtigos());
      assertEquals(5.0F, model1.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(5.0F, model2.getLucro(), 0.01F);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(5.0F, model2.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Model model0 = new Model();
      Utilizador utilizador0 = new Utilizador();
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.PEQUENO;
      Encomenda encomenda0 = new Encomenda(encomenda_TamanhoEmbalagem0, 5.0F);
      Integer integer0 = new Integer((-191));
      Sapatilha sapatilha0 = new Sapatilha("", ", ano da Cole\u00E7\u00E3o: ", "", integer0, 0.5F, (-191), true, 0, "", ", ano da Cole\u00E7\u00E3o: ", 0, "", 960, true, "", (-2527), true);
      // Undeclared exception!
      try { 
        model0.geraFaturaVendedor(utilizador0, encomenda0, sapatilha0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Model model0 = new Model();
      Utilizador utilizador0 = new Utilizador();
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.MEDIO;
      Encomenda encomenda0 = new Encomenda(encomenda_TamanhoEmbalagem0, 1960.9274F);
      model0.geraFaturaComprador(utilizador0, encomenda0);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.initEncomendaUser("8diC:l+5&lwk(@D");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.removeArtigoEncomenda((Integer) null, ">{jUwfb$'u+P}I");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.alterarFormulaTransportadora("l6~X'YJ{o", "\nUtilizador j\u00E1 existe! Tente novamente.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Model model0 = new Model();
      model0.avancar((-1));
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Model model0 = new Model();
      model0.getNumArtigos();
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.getMaiorVendedorValor("dpnc");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Model model0 = new Model();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond((-2988), 170, zoneOffset0);
      model0.setCurrentDate(localDateTime0);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.showFormulaTransportadora("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.getMaiorTransportadoraValor("u7ZM!7p1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Model model0 = new Model();
      model0.getNumTransportadoras();
      assertEquals(5.0F, model0.TAXA_DE_GARANTIA, 0.01F);
      assertEquals(0.0F, model0.getLucro(), 0.01F);
  }
}
