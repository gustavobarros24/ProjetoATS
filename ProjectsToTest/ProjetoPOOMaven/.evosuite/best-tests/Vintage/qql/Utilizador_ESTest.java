/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 15:30:31 GMT 2025
 */

package Vintage.qql;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Vintage.qql.Artigo;
import Vintage.qql.Encomenda;
import Vintage.qql.Fatura;
import Vintage.qql.Mala;
import Vintage.qql.Sapatilha;
import Vintage.qql.TShirt;
import Vintage.qql.Utilizador;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utilizador_ESTest extends Utilizador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("kYM0;C=>dM|vr+s*do", "COMPRA", "kYM0;C=>dM|vr+s*do", "kYM0;C=>dM|vr+s*do");
      Integer integer0 = new Integer(2193);
      Mala mala0 = new Mala();
      mala0.setPrecoFinal(3142.0808F);
      utilizador0.addArtigoProdutosVendidos(integer0, mala0, integer0);
      assertEquals(6890583.0F, utilizador0.getTotalVendas(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("", "", "", "");
      Integer integer0 = new Integer(0);
      utilizador0.setEncomenda();
      utilizador0.removeArtigoEncomenda(integer0);
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setEncomenda();
      Integer integer0 = new Integer(0);
      utilizador0.addArtigoEncomenda(integer0, integer0);
      utilizador0.removeArtigoEncomenda(integer0);
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setTotalVendas(2267.0F);
      float float0 = utilizador0.getTotalVendas();
      assertEquals(2267.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("Vintage.qql.TShirt$Padrao", "Vintage.qql.TShirt$Padrao", "Vintage.qql.TShirt$Padrao", "");
      utilizador0.setTotalVendas((-1172.292F));
      float float0 = utilizador0.getTotalVendas();
      assertEquals((-1172.292F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("", "", "", "QD6,r-zG)&Pe<>u+Tm");
      utilizador0.getProdutosVendidos();
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getMorada());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
      assertEquals("QD6,r-zG)&Pe<>u+Tm", utilizador0.getNIF());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, "Tj[p", "Tj[p");
      String string0 = utilizador0.getNome();
      assertNull(string0);
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getNome();
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("", "", "", (String) null);
      String string0 = utilizador0.getNIF();
      assertNull(string0);
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("", "", "", "");
      utilizador0.getNIF();
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setMorada((String) null);
      utilizador0.getMorada();
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, "", (String) null);
      String string0 = utilizador0.getMorada();
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("w KSv`ecZT8n0'", "w KSv`ecZT8n0'", "w KSv`ecZT8n0'", ", valoriza\u00E7\u00E3o: ");
      utilizador0.setFaturas((List<Fatura>) null);
      utilizador0.getFaturas();
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
      assertEquals("w KSv`ecZT8n0'", utilizador0.getNome());
      assertEquals("w KSv`ecZT8n0'", utilizador0.getEmail());
      assertEquals(", valoriza\u00E7\u00E3o: ", utilizador0.getNIF());
      assertEquals("w KSv`ecZT8n0'", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Fatura.Tipo fatura_Tipo0 = Fatura.Tipo.COMPRA;
      Encomenda encomenda0 = new Encomenda();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Fatura fatura0 = new Fatura(1118.1989F, fatura_Tipo0, encomenda0, localDateTime0, linkedList0);
      utilizador0.addFatura(fatura0);
      utilizador0.getFaturas();
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Integer integer0 = new Integer((-1));
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.MEDIO;
      Encomenda encomenda0 = new Encomenda(encomenda_TamanhoEmbalagem0, 0.0F);
      utilizador0.addEncomendaEncomendasFeitas(integer0, encomenda0);
      utilizador0.getEncomendasFeitas();
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("mJZRL+u;$w", ", ano da Cole\u00E7\u00E3o: ", ", ano da Cole\u00E7\u00E3o: ", "JG:v[G");
      utilizador0.setEncomenda();
      utilizador0.getEncomenda();
      assertEquals("JG:v[G", utilizador0.getNIF());
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
      assertEquals(", ano da Cole\u00E7\u00E3o: ", utilizador0.getMorada());
      assertEquals(", ano da Cole\u00E7\u00E3o: ", utilizador0.getEmail());
      assertEquals("mJZRL+u;$w", utilizador0.getNome());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("", (String) null, "OXvb!*Tw5gZ", "OXvb!*Tw5gZ");
      String string0 = utilizador0.getEmail();
      assertNull(string0);
      assertEquals("OXvb!*Tw5gZ", utilizador0.getNIF());
      assertEquals("OXvb!*Tw5gZ", utilizador0.getMorada());
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
      assertEquals("", utilizador0.getNome());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getEmail();
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("", "", "", "");
      utilizador0.setTotalVendas(234.8F);
      utilizador0.clone();
      assertEquals(234.8F, utilizador0.getTotalVendas(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
      
      utilizador0.setTotalVendas((-1));
      Utilizador utilizador1 = utilizador0.clone();
      assertEquals((-1.0F), utilizador1.getTotalVendas(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setEncomenda();
      Integer integer0 = new Integer(0);
      Integer integer1 = utilizador0.addArtigoEncomenda((Integer) null, integer0);
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setEncomenda();
      Integer integer0 = new Integer(1521);
      Integer integer1 = new Integer((-2688));
      Integer integer2 = utilizador0.addArtigoEncomenda(integer1, integer0);
      assertNotNull(integer2);
      assertEquals((-2688), (int)integer2);
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setEncomenda();
      Integer integer0 = new Integer(18);
      utilizador0.addArtigoEncomenda(integer0, integer0);
      utilizador0.removeArtigoEncomenda(integer0);
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setProdutosVendidos((Map<Integer, Artigo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.qql.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setProdutosAVenda((Map<Integer, Artigo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.qql.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("X\"?<BD4QBt$", "X\"?<BD4QBt$", "Q75YB%FBsLf", "Q75YB%FBsLf");
      utilizador0.setFaturas((List<Fatura>) null);
      Fatura.Tipo fatura_Tipo0 = Fatura.Tipo.COMPRA;
      Encomenda.TamanhoEmbalagem encomenda_TamanhoEmbalagem0 = Encomenda.TamanhoEmbalagem.GRANDE;
      Encomenda encomenda0 = new Encomenda(encomenda_TamanhoEmbalagem0, 0.0F);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Fatura fatura0 = new Fatura(2845.347F, fatura_Tipo0, encomenda0, (LocalDateTime) null, linkedList0);
      // Undeclared exception!
      try { 
        utilizador0.addFatura(fatura0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.qql.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("Vintage.qql.Fatura$Tipo", "Vintage.qql.Fatura$Tipo", "Vintage.qql.Fatura$Tipo", "Vintage.qql.Fatura$Tipo");
      Integer integer0 = new Integer(0);
      Mala mala0 = new Mala("*0K5?=i&4,b37n", "Vintage.qql.Utilizador", "}Mcet;", integer0, 0, 1785.512F, true, 1, "}Mcet;", "Vintage.qql.Fatura$Tipo", 0, "z9>'<^", (-1794.8064F), "", 0, true, 0.0F);
      // Undeclared exception!
      try { 
        utilizador0.addArtigoProdutosVendidos(integer0, mala0, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.qql.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Utilizador utilizador0 = null;
      try {
        utilizador0 = new Utilizador((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.qql.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("\"_y3>b>wB%@HC", "\"_y3>b>wB%@HC", "\"_y3>b>wB%@HC", "\"_y3>b>wB%@HC");
      Integer integer0 = new Integer(1484);
      Mala mala0 = new Mala();
      utilizador0.addArtigoProdutosVendidos(integer0, mala0, integer0);
      utilizador0.getProdutosVendidos();
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("n", "n", "", "");
      Integer integer0 = new Integer(0);
      utilizador0.addArtigoProdutosAVenda(integer0, (Artigo) null);
      utilizador0.getProdutosAVenda();
      assertEquals("", utilizador0.getMorada());
      assertEquals("n", utilizador0.getNome());
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
      assertEquals("", utilizador0.getNIF());
      assertEquals("n", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Integer integer0 = new Integer(0);
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Mala mala0 = new Mala("", "", "", integer0, (-688), (-902.30206F), false, (-1113), "", "Vintage.qql.Utilizador", 2336921, "", (-1), "", (-478), false, (-1022.323F));
      hashMap0.put(integer0, mala0);
      utilizador0.setProdutosAVenda(hashMap0);
      Map<Integer, Artigo> map0 = utilizador0.getProdutosAVenda();
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("w KSv`ecZT8n0'", "w KSv`ecZT8n0'", "w KSv`ecZT8n0'", ", valoriza\u00E7\u00E3o: ");
      String string0 = utilizador0.getNIF();
      assertEquals("w KSv`ecZT8n0'", utilizador0.getMorada());
      assertEquals(", valoriza\u00E7\u00E3o: ", string0);
      assertEquals("w KSv`ecZT8n0'", utilizador0.getEmail());
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
      assertEquals("w KSv`ecZT8n0'", utilizador0.getNome());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("w KSv`ecZT8n0'", "w KSv`ecZT8n0'", "w KSv`ecZT8n0'", ", valoriza\u00E7\u00E3o: ");
      utilizador0.getEncomenda();
      assertEquals(", valoriza\u00E7\u00E3o: ", utilizador0.getNIF());
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
      assertEquals("w KSv`ecZT8n0'", utilizador0.getNome());
      assertEquals("w KSv`ecZT8n0'", utilizador0.getEmail());
      assertEquals("w KSv`ecZT8n0'", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("w KSv`ecZT8n0'", "w KSv`ecZT8n0'", "w KSv`ecZT8n0'", ", valoriza\u00E7\u00E3o: ");
      float float0 = utilizador0.getTotalVendas();
      assertEquals("w KSv`ecZT8n0'", utilizador0.getNome());
      assertEquals("w KSv`ecZT8n0'", utilizador0.getMorada());
      assertEquals(", valoriza\u00E7\u00E3o: ", utilizador0.getNIF());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("w KSv`ecZT8n0'", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("w KSv`ecZT8n0'", "w KSv`ecZT8n0'", "w KSv`ecZT8n0'", ", valoriza\u00E7\u00E3o: ");
      String string0 = utilizador0.getEmail();
      assertEquals(", valoriza\u00E7\u00E3o: ", utilizador0.getNIF());
      assertEquals("w KSv`ecZT8n0'", string0);
      assertEquals("w KSv`ecZT8n0'", utilizador0.getNome());
      assertEquals("w KSv`ecZT8n0'", utilizador0.getMorada());
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("w KSv`ecZT8n0'", "w KSv`ecZT8n0'", "w KSv`ecZT8n0'", ", valoriza\u00E7\u00E3o: ");
      utilizador0.getFaturas();
      assertEquals(", valoriza\u00E7\u00E3o: ", utilizador0.getNIF());
      assertEquals("w KSv`ecZT8n0'", utilizador0.getMorada());
      assertEquals("w KSv`ecZT8n0'", utilizador0.getNome());
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
      assertEquals("w KSv`ecZT8n0'", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("Ha]sB", "Ha]sB", "f~Odc!l2*L.q", "BjXeo");
      String string0 = utilizador0.getNome();
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
      assertEquals("f~Odc!l2*L.q", utilizador0.getMorada());
      assertEquals("BjXeo", utilizador0.getNIF());
      assertEquals("Ha]sB", utilizador0.getEmail());
      assertEquals("Ha]sB", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador(" NHFZ", "H", " NHFZ", "woLke5");
      String string0 = utilizador0.getMorada();
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
      assertEquals(" NHFZ", utilizador0.getNome());
      assertEquals(" NHFZ", string0);
      assertEquals("woLke5", utilizador0.getNIF());
      assertEquals("H", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("mJZRL+u;$w", ", ano da Cole\u00E7\u00E3o: ", ", ano da Cole\u00E7\u00E3o: ", "JG:v[G");
      utilizador0.getEncomendasFeitas();
      assertEquals(", ano da Cole\u00E7\u00E3o: ", utilizador0.getEmail());
      assertEquals("mJZRL+u;$w", utilizador0.getNome());
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
      assertEquals(", ano da Cole\u00E7\u00E3o: ", utilizador0.getMorada());
      assertEquals("JG:v[G", utilizador0.getNIF());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.addFatura((Fatura) null);
      // Undeclared exception!
      try { 
        utilizador0.getTotalVendasPeriodo((LocalDateTime) null, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.qql.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("mJZRL+u;$w", ", ano da Cole\u00E7\u00E3o: ", ", ano da Cole\u00E7\u00E3o: ", "JG:v[G");
      float float0 = utilizador0.getTotalVendasPeriodo((LocalDateTime) null, (LocalDateTime) null);
      assertEquals(", ano da Cole\u00E7\u00E3o: ", utilizador0.getMorada());
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
      assertEquals("mJZRL+u;$w", utilizador0.getNome());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("JG:v[G", utilizador0.getNIF());
      assertEquals(", ano da Cole\u00E7\u00E3o: ", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("", "", "", "QD6,r-zG)&Pe<>u+Tm");
      int int0 = utilizador0.numeroVendasEfetuadasDuranteUmPeriodoTempo((LocalDateTime) null, (LocalDateTime) null);
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
      assertEquals("", utilizador0.getMorada());
      assertEquals("QD6,r-zG)&Pe<>u+Tm", utilizador0.getNIF());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("Av", "Av", "EoC`0&QFj(%mTs", "Av");
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Integer integer0 = new Integer(1);
      hashMap0.put(integer0, (Artigo) null);
      utilizador0.setProdutosVendidos(hashMap0);
      assertEquals("Av", utilizador0.getEmail());
      assertEquals("Av", utilizador0.getNIF());
      assertEquals("Av", utilizador0.getNome());
      assertEquals("EoC`0&QFj(%mTs", utilizador0.getMorada());
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Integer integer0 = new Integer(0);
      Mala mala0 = new Mala("", "=H4pmKI$sn&[su$", "=H4pmKI$sn&[su$", integer0, 0.0F, 83, true, 83, ")0bg^+2'#", ")0bg^+2'#", 83, ")0bg^+2'#", 0.0F, ")0bg^+2'#", 83, true, 83);
      hashMap0.put(integer0, mala0);
      utilizador0.setProdutosVendidos(hashMap0);
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("Av", "Av", "EoC`0&QFj(%mTs", "Av");
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Integer integer0 = new Integer(1);
      hashMap0.put(integer0, (Artigo) null);
      utilizador0.setProdutosAVenda(hashMap0);
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
      assertEquals("Av", utilizador0.getEmail());
      assertEquals("EoC`0&QFj(%mTs", utilizador0.getMorada());
      assertEquals("Av", utilizador0.getNIF());
      assertEquals("Av", utilizador0.getNome());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Integer integer0 = new Integer(1);
      TShirt tShirt0 = new TShirt();
      hashMap0.put(integer0, tShirt0);
      utilizador0.setProdutosAVenda(hashMap0);
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Sapatilha sapatilha0 = new Sapatilha();
      hashMap0.put((Integer) null, sapatilha0);
      utilizador0.setProdutosVendidos(hashMap0);
      Map<Integer, Artigo> map0 = utilizador0.getProdutosVendidos();
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("", "", "", "QD6,r-zG)&Pe<>u+Tm");
      Integer integer0 = new Integer((-3092));
      TShirt tShirt0 = new TShirt();
      utilizador0.addArtigoProdutosAVenda(integer0, tShirt0);
      Map<Integer, Artigo> map0 = utilizador0.getProdutosAVenda();
      utilizador0.setProdutosVendidos(map0);
      Map<Integer, Artigo> map1 = utilizador0.getProdutosVendidos();
      assertEquals("", utilizador0.getMorada());
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
      assertEquals("", utilizador0.getNome());
      assertEquals(1, map1.size());
      assertEquals("QD6,r-zG)&Pe<>u+Tm", utilizador0.getNIF());
      assertEquals("", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("n", "n", "", "");
      Integer integer0 = new Integer((-46));
      utilizador0.addArtigoProdutosAVenda(integer0, (Artigo) null);
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertEquals("n", utilizador1.getEmail());
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
      assertEquals("", utilizador1.getMorada());
      assertEquals("n", utilizador1.getNome());
      assertEquals("", utilizador1.getNIF());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("Av", "Av", "EoC`0&QFj(%mTs", "Av");
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Sapatilha sapatilha0 = new Sapatilha((-727), true, "Av", (-727), true);
      hashMap0.put((Integer) null, sapatilha0);
      utilizador0.setProdutosAVenda(hashMap0);
      Map<Integer, Artigo> map0 = utilizador0.getProdutosAVenda();
      assertEquals("Av", utilizador0.getNIF());
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
      assertEquals("Av", utilizador0.getEmail());
      assertFalse(map0.isEmpty());
      assertEquals("Av", utilizador0.getNome());
      assertEquals("EoC`0&QFj(%mTs", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Mala mala0 = new Mala();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, mala0);
      utilizador0.setProdutosAVenda(hashMap0);
      utilizador0.clone();
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("\"_y3>b>wB%@HC", "\"_y3>b>wB%@HC", "\"_y3>b>wB%@HC", "\"_y3>b>wB%@HC");
      Integer integer0 = new Integer(1484);
      utilizador0.removeEncomendaEncomendasFeitas(integer0);
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setNome("Av");
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("", "", "", "QD6,r-zG)&Pe<>u+Tm");
      assertEquals("", utilizador0.getEmail());
      
      utilizador0.setEmail("");
      assertEquals("QD6,r-zG)&Pe<>u+Tm", utilizador0.getNIF());
      assertEquals("", utilizador0.getMorada());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.addArtigoEncomenda((Integer) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.qql.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("\"_y3>b>wB%@HC", "\"_y3>b>wB%@HC", "\"_y3>b>wB%@HC", "\"_y3>b>wB%@HC");
      Integer integer0 = new Integer(1484);
      // Undeclared exception!
      try { 
        utilizador0.removeArtigoEncomenda(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.qql.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setNIF("");
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Integer integer0 = new Integer(0);
      utilizador0.removeArtigoProdutosVendidos(integer0);
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("\"_y3>b>wB%@HC", "\"_y3>b>wB%@HC", "\"_y3>b>wB%@HC", "\"_y3>b>wB%@HC");
      utilizador0.setEncomendaNull();
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("\"_y3>b>wB%@HC", "\"_y3>b>wB%@HC", "\"_y3>b>wB%@HC", "\"_y3>b>wB%@HC");
      Integer integer0 = new Integer(1484);
      utilizador0.removeArtigoProdutosAVenda(integer0);
      assertEquals(0.0F, utilizador0.getTotalVendas(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.addFatura((Fatura) null);
      // Undeclared exception!
      try { 
        utilizador0.numeroVendasEfetuadasDuranteUmPeriodoTempo((LocalDateTime) null, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.qql.Utilizador", e);
      }
  }
}
