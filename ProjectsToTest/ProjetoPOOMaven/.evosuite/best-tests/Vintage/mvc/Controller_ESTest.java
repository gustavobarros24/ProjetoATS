/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 15:38:01 GMT 2025
 */

package Vintage.mvc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Vintage.mvc.Controller;
import Vintage.mvc.Model;
import Vintage.qql.Artigo;
import Vintage.qql.Transportadora;
import Vintage.qql.Utilizador;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StreamCorruptedException;
import java.time.Clock;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Controller_ESTest extends Controller_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      LocalDateTime localDateTime0 = controller0.getCurrentDateTime();
      // Undeclared exception!
      try { 
        controller0.getMaiorVendedorValorPeriodo("", (LocalDateTime) null, localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      Integer integer0 = new Integer(0);
      Integer integer1 = controller0.addArtigoEncomenda((Integer) null, integer0, "Vintage.mvc.Controller");
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Controller controller0 = new Controller((Model) null);
      // Undeclared exception!
      try { 
        controller0.addTShirt("", "jS\"t)_CNkkl", "", integer0, (-2369), (-405), true, 0, "", "", 0, "", "", 0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid tamanho: 
         //
         verifyException("Vintage.qql.TShirt", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      Integer integer0 = new Integer(1501);
      // Undeclared exception!
      try { 
        controller0.addSapatilha("Suom*", "Suom*", "Hyf%+:c+QqfqoQEYi", integer0, 1501, (-1192.6387F), false, 0, "Suom*", "Vintage.mvc.Controller", 1107, 0, false, "Vintage.mvc.Controller", 1107, true, "Suom*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      // Undeclared exception!
      try { 
        controller0.addSapatilha((String) null, (String) null, (String) null, (Integer) null, 5.0F, (-984.7F), true, 0, (String) null, (String) null, 0, 0, true, (String) null, (-496), true, "Vintage.mvc.Controller");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      Integer integer0 = new Integer(1501);
      // Undeclared exception!
      try { 
        controller0.addSapatilha("Suom*", "Suom*", "Hyf%+:c+QqfqoQEYi", integer0, 1501, (-1192.6387F), false, 0, "Suom*", "Vintage.mvc.Controller", 1107, 0, true, "Vintage.mvc.Controller", 1107, true, "Vintage.mvc.Controller");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        controller0.addSapatilha("Vintage.qql.TShirt$Tamanho", "%j&Mg$KP5YV5G2", "%j&Mg$KP5YV5G2", integer0, 5.0F, 0, false, 0, "", "", 0, 0, false, (String) null, 0, false, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      Integer integer0 = new Integer(6);
      // Undeclared exception!
      try { 
        controller0.addMala("yu(RGqbO%z;}DZ8", (String) null, "yu(RGqbO%z;}DZ8", integer0, 101100.0F, 5.0F, true, 6, "PENDENTE", "", 6, 0.0F, "f", (-827), false, 6, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      controller0.storeState("{^U0n<>3|\" 3,_Uf%");
      assertEquals(0, controller0.getNumTransportadoras());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      controller0.addTransportadora("t>", 5.0F, (-627), 5.0F, 5.0F, 5.0F);
      String string0 = controller0.showTransportadoras();
      assertEquals(" - t>\n", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      String string0 = controller0.addTransportadora("N+s+R(E", 5.0F, (-1902.1F), 5.0F, 0.0F, 0.0F);
      String string1 = controller0.showFormulaTransportadora("N+s+R(E");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      String string0 = controller0.addUtilizador("", "", "", "");
      String string1 = controller0.showFaturas("");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      controller0.addUtilizador("936uI,HJB\"InVuTXXt", "", "", "jfdYa=HymDlH");
      String string0 = controller0.showEncomendasFeitas("");
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      String string0 = controller0.addUtilizador("PEQUENO", "PEQUENO", "HdgEh?", "PEQUENO");
      String string1 = controller0.showEncomenda("PEQUENO");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      controller0.addUtilizador("", "", "", "");
      Integer integer0 = new Integer(2711);
      String string0 = controller0.addMala("", "", "", integer0, 5.0F, 1.0F, false, (-981), "", "AYQyBk&^o=~6szZlx6", 2711, 2711, "", 0, false, 0.0F, "");
      assertEquals("", string0);
      
      String string1 = controller0.showArtigos();
      assertEquals("c\u00F3digo: 2711, nome: , descri\u00E7\u00E3o: , marca: , pre\u00E7o base: 5.0, corre\u00E7\u00E3o de pre\u00E7o: 1.0, novo: false, n\u00FAmero de donos: -981, condi\u00E7\u00E3o: , transportadora: AYQyBk&^o=~6szZlx6, vendedor: , tipo: mala, dimens\u00E3o: 2711.0, material: , ano da Cole\u00E7\u00E3o: 0, premium: false, valoriza\u00E7\u00E3o: 0.0%, stock: 2711\n", string1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      String string0 = controller0.showArtigos();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      String string0 = controller0.addUtilizador("", "", "Vintage.mvc.Controller", "Vintage.mvc.Controller");
      assertEquals("", string0);
      
      String string1 = controller0.getVendasUtilizador("");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      Integer integer0 = new Integer((-23));
      controller0.addArtigoEncomenda2(integer0);
      int int0 = controller0.getNumArtigos();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Controller controller0 = new Controller((Model) null);
      Model model0 = controller0.getModel();
      assertNull(model0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      Integer integer0 = Integer.getInteger((String) null);
      model0.addArtigoEncomenda2(integer0);
      Model model1 = controller0.getModel();
      assertEquals(0, model1.getNumTransportadoras());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Model model0 = new Model();
      Map<Integer, Artigo> map0 = model0.getCatalogoArtigosEncomenda();
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      HashMap<String, Transportadora> hashMap1 = new HashMap<String, Transportadora>();
      Model model1 = new Model(localDateTime0, map0, map0, map0, hashMap0, hashMap1, 5.0F);
      Controller controller0 = new Controller(model1);
      Model model2 = controller0.getModel();
      assertEquals(5.0F, model2.TAXA_DE_GARANTIA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("", "", "", "");
      Map<Integer, Artigo> map0 = utilizador0.getProdutosVendidos();
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      HashMap<String, Transportadora> hashMap1 = new HashMap<String, Transportadora>();
      Model model0 = new Model((LocalDateTime) null, map0, map0, map0, hashMap0, hashMap1, (-2638.9485F));
      Controller controller0 = new Controller(model0);
      Model model1 = controller0.getModel();
      assertEquals(0, model1.getNumTransportadoras());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      controller0.addUtilizador("", "", "", "");
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      float float0 = controller0.getMaiorVendedorValorPeriodo("", localDateTime0, localDateTime0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      controller0.addUtilizador("936uI,HJB\"InVuTXXt", "", "", "jfdYa=HymDlH");
      float float0 = controller0.getMaiorVendedorValor("");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      LocalDateTime localDateTime0 = controller0.getCurrentDateTime();
      controller0.addUtilizador("J6vgJA|gAS]3", "J6vgJA|gAS]3", "J6vgJA|gAS]3", "");
      String string0 = controller0.getMaiorVendedorPeriodo(localDateTime0, localDateTime0);
      assertEquals("J6vgJA|gAS]3", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      Utilizador utilizador0 = new Utilizador("Vintage.qql.Sapatilha", "", "", "");
      model0.addUtilizador(utilizador0);
      String string0 = controller0.getMaiorVendedorPeriodo((LocalDateTime) null, (LocalDateTime) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      controller0.addUtilizador(" - ", " - ", "", "HUMJuk");
      String string0 = controller0.getMaiorVendedor();
      assertEquals(" - ", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      controller0.addUtilizador("", "", "", "");
      String string0 = controller0.getMaiorVendedor();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Model model0 = new Model();
      Map<Integer, Artigo> map0 = model0.getArtigosVendidos();
      Map<String, Utilizador> map1 = model0.getCatalogoUtilizadores();
      HashMap<String, Transportadora> hashMap0 = new HashMap<String, Transportadora>();
      Model model1 = new Model(localDateTime0, map0, map0, map0, map1, hashMap0, 5.0F);
      Controller controller0 = new Controller(model1);
      float float0 = controller0.getLucroVintage();
      assertEquals(5.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("q}{eg", "", "", "");
      Map<Integer, Artigo> map0 = utilizador0.getProdutosVendidos();
      Model model0 = new Model();
      Map<String, Utilizador> map1 = model0.getCatalogoUtilizadores();
      Map<String, Transportadora> map2 = model0.getCatalogoTransportadoras();
      Model model1 = new Model((LocalDateTime) null, map0, map0, map0, map1, map2, (-2733.0F));
      Controller controller0 = new Controller(model1);
      float float0 = controller0.getLucroVintage();
      assertEquals((-2733.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      controller0.addUtilizador("936uI,HJB\"InVuTXXt", "", "", "jfdYa=HymDlH");
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Map<String, Integer> map0 = controller0.getListaMaioresVendedores(localDateTime0, localDateTime0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>(1);
      Model model0 = new Model();
      Map<String, Utilizador> map0 = model0.getCatalogoUtilizadores();
      HashMap<String, Transportadora> hashMap1 = new HashMap<String, Transportadora>();
      Model model1 = new Model((LocalDateTime) null, hashMap0, hashMap0, hashMap0, map0, hashMap1, 0.0F);
      Controller controller0 = new Controller(model1);
      LocalDateTime localDateTime0 = controller0.getCurrentDateTime();
      assertNull(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      controller0.addUtilizador("]", "o9w_+!yU6^", "]", "]");
      boolean boolean0 = controller0.checkUtilizadorTemFaturas("o9w_+!yU6^");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      controller0.addUtilizador("936uI,HJB\"InVuTXXt", "", "", "jfdYa=HymDlH");
      controller0.initEncomendaUser("");
      float float0 = controller0.calcularPrecoFinalEncomenda("");
      assertEquals(5.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      String string0 = controller0.addUtilizador((String) null, (String) null, (String) null, "oap.W =bj;");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      controller0.addTransportadora((String) null, 5.0F, 5.0F, 0.0F, 5.0F, 2207.416F);
      controller0.alterarFormulaTransportadora((String) null, "");
      assertEquals(1, controller0.getNumTransportadoras());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      String string0 = controller0.addTransportadora("", 2882.6785F, 0.0F, 0.2F, 0.0F, 1159.8F);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      Integer integer0 = Integer.getInteger((String) null);
      model0.addArtigoEncomenda2(integer0);
      String string0 = controller0.addMala(", padr\u00E3o: ", "Vintage.mvc.Controller", "dCHj}X&)W~{CRWlK[", integer0, 0.25F, 2.0F, false, 0, ", padr\u00E3o: ", "", 0, 2.0F, "Vintage.mvc.Controller", (-2098), false, 0.0F, (String) null);
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      controller0.addUtilizador("936uI,HJB\"InVuTXXt", "", "", "jfdYa=HymDlH");
      Integer integer0 = new Integer((-2676));
      controller0.addMala("", "", "", integer0, 113.8F, (-2676), false, 0, "", "", 41, 0.0F, "B(lm@)xg#>", (-1835), false, (-1), "");
      Integer integer1 = controller0.addArtigoEncomenda(integer0, integer0, "936uI,HJB\"InVuTXXt");
      assertFalse(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      // Undeclared exception!
      try { 
        controller0.storeState((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        controller0.storeState("HdgEh?");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Controller controller0 = new Controller((Model) null);
      // Undeclared exception!
      try { 
        controller0.startSimulation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      // Undeclared exception!
      try { 
        controller0.showValorTransportadora("OOr`lLIQ;56E", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Controller controller0 = new Controller((Model) null);
      // Undeclared exception!
      try { 
        controller0.showTransportadoras();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("w(-{iX\\zJbSr-");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      try { 
        controller0.setUpReadFromBinaryFile("w(-{iX/zJbSr-");
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 00000000
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      try { 
        controller0.setUpReadFromBinaryFile("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Controller controller0 = new Controller((Model) null);
      // Undeclared exception!
      try { 
        controller0.getNumTransportadoras();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Controller controller0 = new Controller((Model) null);
      // Undeclared exception!
      try { 
        controller0.getNumArtigos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Controller controller0 = new Controller((Model) null);
      // Undeclared exception!
      try { 
        controller0.getLucroVintage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Controller controller0 = new Controller((Model) null);
      // Undeclared exception!
      try { 
        controller0.getListaMaioresVendedores((LocalDateTime) null, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Controller controller0 = new Controller((Model) null);
      // Undeclared exception!
      try { 
        controller0.getCurrentDateTime();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Controller controller0 = new Controller((Model) null);
      // Undeclared exception!
      try { 
        controller0.checkUtilizadorExiste("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Controller controller0 = new Controller((Model) null);
      // Undeclared exception!
      try { 
        controller0.checkTransportadoraExiste("-Yw<:3FAYJ_q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Controller controller0 = new Controller((Model) null);
      // Undeclared exception!
      try { 
        controller0.changeDate((LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Map<Integer, Artigo> map0 = utilizador0.getProdutosAVenda();
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Model model0 = new Model();
      Map<String, Utilizador> map1 = model0.getCatalogoUtilizadores();
      HashMap<String, Transportadora> hashMap1 = new HashMap<String, Transportadora>();
      Model model1 = new Model((LocalDateTime) null, map0, hashMap0, hashMap0, map1, hashMap1, 5.0F);
      Controller controller0 = new Controller(model1);
      // Undeclared exception!
      try { 
        controller0.avancar(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Controller controller0 = new Controller((Model) null);
      // Undeclared exception!
      try { 
        controller0.alterarValorTransportadora(", embalagem: ", 838, 1209.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Controller controller0 = new Controller((Model) null);
      // Undeclared exception!
      try { 
        controller0.addUtilizador("", "", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      controller0.addUtilizador("+bsRXY", "+bsRXY", "+bsRXY", "+bsRXY");
      // Undeclared exception!
      try { 
        controller0.addUtilizador("+bsRXY", "+bsRXY", "Vintage.mvc.Controller", "Vintage.mvc.Controller");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         // Utilizador j\u00E1 existe! Tente novamente.
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Controller controller0 = new Controller((Model) null);
      // Undeclared exception!
      try { 
        controller0.addTransportadora("PEQUENO", 5.0F, 5.0F, 5.0F, (-0.12995537F), (-800.526F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      controller0.addTransportadora("Rnq80?mVtIm\u0002x", (-1.0F), 2625.08F, 2625.08F, 2625.08F, 2625.08F);
      // Undeclared exception!
      try { 
        controller0.addTransportadora("Rnq80?mVtIm\u0002x", 2625.08F, (-1.0F), (-1), 5.0F, (-1.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         // Transportadora j\u00E1 existe! Tente novamente.
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Controller controller0 = new Controller((Model) null);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        controller0.addTShirt("|RO>u]/}%D", "]c*", "|RO>u]/}%D", integer0, (-26.2F), (-1181.6359F), true, 0, "]c*", "]c*", 0, "Vintage.mvc.Controller", "]c*", (-2696), "]c*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid tamanho: Vintage.mvc.Controller
         //
         verifyException("Vintage.qql.TShirt", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Controller controller0 = new Controller((Model) null);
      Integer integer0 = new Integer(1277);
      // Undeclared exception!
      try { 
        controller0.addArtigoEncomenda2(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Controller controller0 = new Controller((Model) null);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        controller0.addArtigoEncomenda(integer0, integer0, "  N~5] y_E=uOI s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Controller controller0 = null;
      try {
        controller0 = new Controller((Controller) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      int int0 = controller0.getNumArtigos();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      Map<String, Integer> map0 = controller0.getListaMaioresVendedores((LocalDateTime) null, (LocalDateTime) null);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      controller0.startSimulation();
      assertEquals(0, controller0.getNumTransportadoras());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      String string0 = controller0.showTransportadoras();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      float float0 = controller0.getLucroVintage();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      boolean boolean0 = controller0.checkTransportadoraExiste("*~T?h'd");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      Integer integer0 = new Integer((-1746));
      // Undeclared exception!
      try { 
        controller0.checkUtilizadorTemEncADevolver(integer0, "{@ TyCB_g/q|q`mn]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      // Undeclared exception!
      try { 
        controller0.getMaiorTransportadoraValor((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      int int0 = controller0.getNumTransportadoras();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      Integer integer0 = Integer.valueOf(1);
      // Undeclared exception!
      try { 
        controller0.devolverEncomenda("", integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      // Undeclared exception!
      try { 
        controller0.initEncomendaUser("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Model model0 = new Model();
      Integer integer0 = new Integer(77);
      Controller controller0 = new Controller(model0);
      // Undeclared exception!
      try { 
        controller0.removeArtigoEncomenda(integer0, "F6bsK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      // Undeclared exception!
      try { 
        controller0.calcularPrecoFinalEncomenda("zvzUeC}kBrzi*vqg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      Integer integer0 = new Integer((-1307));
      // Undeclared exception!
      try { 
        controller0.addTShirt((String) null, "]", "", integer0, 0.0F, 0.0F, false, 2750, "L", ");!uqJN.rVNZ+a+^%t", 170, (String) null, "uwmZ2", 0, "L");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.qql.TShirt", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      LocalDateTime localDateTime0 = controller0.getCurrentDateTime();
      controller0.changeDate(localDateTime0);
      assertEquals(0.0F, controller0.getLucroVintage(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      controller0.alterarValorTransportadora("B", 461, 5.0F);
      assertEquals(0.0F, controller0.getLucroVintage(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      // Undeclared exception!
      try { 
        controller0.getVendasUtilizador(", desconto: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      // Undeclared exception!
      try { 
        controller0.checkUtilizadorEncADevolver("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      // Undeclared exception!
      try { 
        controller0.alterarFormulaTransportadora("S", "S");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      controller0.avancar((-1));
      assertEquals(0, controller0.getNumTransportadoras());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      // Undeclared exception!
      try { 
        controller0.getMaiorVendedorValor("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      controller0.addTransportadora("%", (-1.0F), 2625.08F, 2625.08F, 2625.08F, 2625.08F);
      int int0 = controller0.getNumTransportadoras();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      // Undeclared exception!
      try { 
        controller0.showFormulaTransportadora("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      // Undeclared exception!
      try { 
        controller0.showEncomendasFeitas("=^{6N&F");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      float float0 = controller0.showValorTransportadora("o9w_+!yU6^", (-1307));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Controller controller0 = new Controller((Model) null);
      // Undeclared exception!
      try { 
        controller0.checkEncomendaVazia("Vintage.mvc.Controller");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      boolean boolean0 = controller0.checkUtilizadorExiste("Rnq80?mVtIm\u0002x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Controller controller0 = new Controller((Model) null);
      try { 
        controller0.storeState("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      // Undeclared exception!
      try { 
        controller0.showEncomenda("HdgEh");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      // Undeclared exception!
      try { 
        controller0.getMaiorVendedorPeriodo((LocalDateTime) null, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Controller controller0 = new Controller((Model) null);
      // Undeclared exception!
      try { 
        controller0.showArtigos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Controller controller0 = new Controller((Model) null);
      // Undeclared exception!
      try { 
        controller0.checkUtilizadorTemFaturas("HZc7J,-Te");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Controller", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      // Undeclared exception!
      try { 
        controller0.showFaturas("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      Integer integer0 = new Integer(1501);
      // Undeclared exception!
      try { 
        controller0.addSapatilha("Suom*", "Suom*", "3|NYXRD:m-W}?/[z-?", integer0, 1501, (-1192.6387F), false, 1501, "Suom*", "3|NYXRD:m-W}?/[z-?", 1107, 0, false, "3|NYXRD:m-W}?/[z-?", 1107, false, "Suom*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      Controller controller1 = new Controller(controller0);
      assertFalse(controller1.equals((Object)controller0));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      // Undeclared exception!
      try { 
        controller0.finalizarCompra("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      // Undeclared exception!
      try { 
        controller0.setUpReadFromBinaryFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      // Undeclared exception!
      try { 
        controller0.getMaiorVendedor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Model model0 = new Model();
      Controller controller0 = new Controller(model0);
      // Undeclared exception!
      try { 
        controller0.getMaiorTransportadora();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Vintage.mvc.Model", e);
      }
  }
}
