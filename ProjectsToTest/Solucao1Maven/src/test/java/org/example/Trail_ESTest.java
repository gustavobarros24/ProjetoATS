/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 11:42:40 GMT 2025
 */

package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.example.Trail;
import org.example.Utilizador;
import org.example.UtilizadorAmador;
import org.example.UtilizadorPraticanteOcasional;
import org.example.UtilizadorProfissional;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Trail_ESTest extends Trail_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Month month0 = Month.JANUARY;
      LocalDate localDate0 = MockLocalDate.of(5, month0, 3);
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Trail trail0 = new Trail(localDateTime0, localTime0, 3, 0.0, 5);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("?'Q,a<='!EcE=,>3[", "\nNome: ", "?'Q,a<='!EcE=,>3[", 5, 5, 3, localDate0, '-');
      Trail trail1 = (Trail)trail0.geraAtividade(utilizadorProfissional0, 5);
      assertEquals(4.4, trail1.getDistancia(), 0.01);
      assertEquals(0, trail1.getFreqCardiaca());
      assertEquals(0.0, trail1.getAltimetria(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Trail trail0 = new Trail();
      assertEquals(1.15, trail0.getFatorHard(), 0.01);
      
      trail0.setAltimetria(2000.0);
      double double0 = trail0.getFatorHard();
      assertEquals(1.25, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalTime localTime0 = MockLocalTime.now(clock0);
      Trail trail0 = new Trail((LocalDateTime) null, localTime0, (-2935), (-2935), 1000.0);
      double double0 = trail0.getFatorHard();
      assertEquals(1.15, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Trail trail0 = new Trail();
      trail0.setProximoCodigo(0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1840);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nAltimetria: 0.0 metros\nTipo de atividade: Trail\n", "hksDZo", "hksDZo", (-1), 0, 1840, localDate0, '\"');
      Trail trail1 = (Trail)trail0.geraAtividade(utilizadorAmador0, 0);
      assertEquals(0.0, trail1.getDistancia(), 0.01);
      assertTrue(trail1.equals((Object)trail0));
      assertEquals(0.0, trail1.getAltimetria(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      Trail trail0 = new Trail(localDateTime0, localTime0, (-3638), (-4812.782156184177), (-2403.20366));
      trail0.setProximoCodigo((-1958));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Trail trail1 = (Trail)trail0.geraAtividade(utilizadorAmador0, (-2403.20366));
      assertEquals(0, trail1.getFreqCardiaca());
      assertEquals((-4.7244640256E9), trail1.getDistancia(), 0.01);
      assertEquals(0.0, trail1.getAltimetria(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Month month0 = Month.JANUARY;
      LocalDate localDate0 = MockLocalDate.of(5, month0, 3);
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Trail trail0 = new Trail(localDateTime0, localTime0, 3, 0.0, 5);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("?'Q,a<='!EcE=,>3[", "\nNome: ", "?'Q,a<='!EcE=,>3[", 5, 5, 3, localDate0, '-');
      double double0 = trail0.consumoCalorias(utilizadorProfissional0);
      assertEquals(61013.705734667965, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Month month0 = Month.SEPTEMBER;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(7, month0, 7, 7, 7);
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      Trail trail0 = new Trail(localDateTime0, localTime0, 1465, 7, (-1.0));
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("org.example.Trail", (String) null, "org.example.Trail", (-2146961740), 4, 1465, localDate0, 'I');
      double double0 = trail0.consumoCalorias(utilizadorProfissional0);
      assertEquals((-1.838316305945838E10), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(1L);
      Trail trail0 = new Trail((LocalDateTime) null, localTime0, 2465, 2465, (-3113.6859396));
      // Undeclared exception!
      try { 
        trail0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Trail trail0 = new Trail();
      trail0.setDataRealizacao((LocalDateTime) null);
      Object object0 = trail0.clone();
      // Undeclared exception!
      try { 
        trail0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Trail trail0 = new Trail((LocalDateTime) null, (LocalTime) null, (-4783), (-4783), (-4783));
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("org.example.Trail", " anos\nGenero: ", " anos\nGenero: ", (-4783), (-4783), (-4783), localDate0, 'q');
      // Undeclared exception!
      try { 
        trail0.consumoCalorias(utilizadorProfissional0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.AtivDistancia", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Trail trail0 = null;
      try {
        trail0 = new Trail((Trail) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Trail trail0 = new Trail((LocalDateTime) null, (LocalTime) null, 162, 162, 1283);
      double double0 = trail0.getFatorHard();
      assertEquals(1.25, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Trail trail0 = new Trail();
      boolean boolean0 = trail0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Trail trail0 = new Trail();
      boolean boolean0 = trail0.equals(trail0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Month month0 = Month.DECEMBER;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(7, month0, 7, 7, 7, 7, 7);
      LocalTime localTime0 = MockLocalTime.of(7, 7);
      Trail trail0 = new Trail(localDateTime0, localTime0, 7, 7, 7);
      boolean boolean0 = trail0.equals(month0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Trail trail0 = new Trail();
      trail0.setAltimetria(3036.5);
      double double0 = trail0.getFatorHard();
      assertEquals(1.35, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Month month0 = Month.DECEMBER;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(7, month0, 7, 7, 7, 7, 7);
      LocalTime localTime0 = MockLocalTime.of(7, 7);
      Trail trail0 = new Trail(localDateTime0, localTime0, 7, 7, 7);
      assertEquals(1.15, trail0.getFatorHard(), 0.01);
      
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      trail0.setAltimetria(1547.6156310892864);
      double double0 = trail0.consumoCalorias(utilizadorProfissional0);
      assertEquals(1.25, trail0.getFatorHard(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Trail trail0 = new Trail();
      // Undeclared exception!
      try { 
        trail0.geraAtividade((Utilizador) null, (-4162.728702960316));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Trail", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Trail trail0 = new Trail();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        trail0.consumoCalorias(utilizadorPraticanteOcasional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Trail trail0 = new Trail();
      String string0 = trail0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nAltimetria: 0.0 metros\nTipo de atividade: Trail\n", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Trail trail0 = new Trail((LocalDateTime) null, (LocalTime) null, (-4783), (-4783), (-4783));
      Trail trail1 = new Trail(trail0);
      assertEquals((-4783.0), trail1.getDistancia(), 0.01);
  }
}
