/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 11:43:38 GMT 2025
 */

package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.example.Abdominais;
import org.example.BenchPress;
import org.example.Flexoes;
import org.example.LegPress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtivRepeticoes_ESTest extends AtivRepeticoes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      Abdominais abdominais1 = new Abdominais(abdominais0);
      abdominais1.setRepeticoes(18);
      boolean boolean0 = abdominais1.equals(abdominais0);
      assertEquals(18, abdominais1.getRepeticoes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      String string0 = benchPress0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Bench press\n", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      abdominais0.setRepeticoes(18);
      int int0 = abdominais0.getRepeticoes();
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(0L);
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, 7, (-1856));
      int int0 = abdominais0.getRepeticoes();
      assertEquals((-1856), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1800L);
      Flexoes flexoes0 = new Flexoes(localDateTime0, localTime0, 1, 1);
      double double0 = flexoes0.getFatorRepeticoes(1.0, 0);
      assertEquals(-0.0, double0, 0.01);
      assertEquals(1, flexoes0.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(zoneId0);
      LocalTime localTime0 = MockLocalTime.now(zoneId0);
      BenchPress benchPress0 = new BenchPress(localDateTime0, localTime0, 0, 2, 3.0);
      double double0 = benchPress0.getFatorRepeticoes(2556.815, (-4674.34315664));
      assertEquals(2, benchPress0.getRepeticoes());
      assertEquals(1.1951430698044503E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(zoneId0);
      LocalTime localTime0 = MockLocalTime.now(zoneId0);
      BenchPress benchPress0 = new BenchPress(localDateTime0, localTime0, 0, 2, 3.0);
      double double0 = benchPress0.getFatorRepeticoes(3.0, 1699);
      assertEquals((-5097.0), double0, 0.01);
      assertEquals(2, benchPress0.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      legPress0.equals(legPress0);
      assertEquals(0, legPress0.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      benchPress0.setDataRealizacao((LocalDateTime) null);
      // Undeclared exception!
      try { 
        benchPress0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      benchPress0.setTempo((LocalTime) null);
      // Undeclared exception!
      try { 
        benchPress0.getFatorRepeticoes((-1.0), (-1165.27698621));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      legPress0.setTempo((LocalTime) null);
      LegPress legPress1 = new LegPress(legPress0);
      // Undeclared exception!
      try { 
        legPress0.equals(legPress1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      int int0 = abdominais0.getRepeticoes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      LegPress legPress1 = new LegPress();
      assertTrue(legPress1.equals((Object)legPress0));
      
      legPress1.setFreqCardiaca((-701));
      boolean boolean0 = legPress0.equals(legPress1);
      assertFalse(legPress1.equals((Object)legPress0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      Abdominais abdominais1 = new Abdominais(abdominais0);
      boolean boolean0 = abdominais0.equals(abdominais1);
      assertTrue(boolean0);
      assertEquals(0, abdominais1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      // Undeclared exception!
      try { 
        benchPress0.getFatorRepeticoes((-1.0), (-1165.27698621));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.example.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      Abdominais abdominais1 = new Abdominais(abdominais0);
      abdominais0.setRepeticoes(220);
      boolean boolean0 = abdominais1.equals(abdominais0);
      assertEquals(220, abdominais0.getRepeticoes());
      assertFalse(boolean0);
  }
}
