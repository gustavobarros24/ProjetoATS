/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 11:49:42 GMT 2025
 */

package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.example.Ciclismo;
import org.example.Corrida;
import org.example.Trail;
import org.example.Utilizador;
import org.example.UtilizadorAmador;
import org.example.UtilizadorProfissional;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Ciclismo_ESTest extends Ciclismo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      Trail trail0 = new Trail();
      trail0.setProximoCodigo(0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Ciclismo ciclismo1 = (Ciclismo)ciclismo0.geraAtividade(utilizadorAmador0, (-2846.214242106203));
      assertEquals(0, ciclismo1.getFreqCardiaca());
      assertEquals((-2.2548578304E10), ciclismo1.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      Trail trail0 = new Trail();
      trail0.setProximoCodigo((-17));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Ciclismo ciclismo1 = (Ciclismo)ciclismo0.geraAtividade(utilizadorAmador0, (-2846.214242106203));
      assertEquals((-2.2548578304E10), ciclismo1.getDistancia(), 0.01);
      assertEquals(0, ciclismo1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-1507));
      Clock clock0 = MockClock.system(zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now(clock0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Ciclismo ciclismo0 = new Ciclismo(localDateTime0, localTime0, (-1507), 0.0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      double double0 = ciclismo0.consumoCalorias(utilizadorAmador0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      Ciclismo ciclismo0 = new Ciclismo(localDateTime0, localTime0, 3802, 3802);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      System.setCurrentTimeMillis(3802);
      double double0 = ciclismo0.consumoCalorias(utilizadorAmador0);
      assertEquals(1062.800673611111, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(7L);
      Ciclismo ciclismo0 = new Ciclismo((LocalDateTime) null, localTime0, 4149, 0.4);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.setPeso(4338.22);
      double double0 = ciclismo0.consumoCalorias(utilizadorProfissional0);
      assertEquals((-9.462742375000005), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      ciclismo0.setDataRealizacao((LocalDateTime) null);
      // Undeclared exception!
      try { 
        ciclismo0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      // Undeclared exception!
      try { 
        ciclismo0.geraAtividade((Utilizador) null, 2204.942515618);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Ciclismo", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      ciclismo0.setDataRealizacao((LocalDateTime) null);
      Object object0 = ciclismo0.clone();
      // Undeclared exception!
      try { 
        object0.equals(ciclismo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(0L);
      Ciclismo ciclismo0 = new Ciclismo(localDateTime0, localTime0, (-3350), 0.8);
      // Undeclared exception!
      try { 
        ciclismo0.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Ciclismo", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      Ciclismo ciclismo1 = new Ciclismo(ciclismo0);
      assertEquals(0.0, ciclismo1.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.of(3, 3);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Ciclismo ciclismo0 = new Ciclismo(localDateTime0, localTime0, 3, 3);
      Object object0 = ciclismo0.clone();
      ciclismo0.equals(object0);
      assertNotSame(object0, ciclismo0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      boolean boolean0 = ciclismo0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.of(3, 3);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Ciclismo ciclismo0 = new Ciclismo(localDateTime0, localTime0, 3, 3);
      boolean boolean0 = ciclismo0.equals(ciclismo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.of(3, 3);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Ciclismo ciclismo0 = new Ciclismo(localDateTime0, localTime0, 3, 3);
      Corrida corrida0 = new Corrida();
      boolean boolean0 = ciclismo0.equals(corrida0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      Period period0 = Period.ofMonths((-1));
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "", (String) null, 0, 0, (-1), localDate0, '[');
      // Undeclared exception!
      try { 
        ciclismo0.consumoCalorias(utilizadorProfissional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      String string0 = ciclismo0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nTipo de atividade: Ciclismo\n", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      Period period0 = Period.ofMonths((-1));
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "", (String) null, 0, 0, (-1), localDate0, '[');
      Ciclismo ciclismo1 = (Ciclismo)ciclismo0.geraAtividade(utilizadorProfissional0, (-2893.68658));
      assertEquals(4.6669371E7, ciclismo1.getDistancia(), 0.01);
      assertEquals(0, ciclismo1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Ciclismo ciclismo0 = null;
      try {
        ciclismo0 = new Ciclismo((Ciclismo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }
}
