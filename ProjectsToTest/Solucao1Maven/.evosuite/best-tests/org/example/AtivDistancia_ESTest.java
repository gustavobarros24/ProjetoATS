/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 11:45:35 GMT 2025
 */

package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.example.Btt;
import org.example.Ciclismo;
import org.example.Corrida;
import org.example.Trail;
import org.example.UtilizadorAmador;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtivDistancia_ESTest extends AtivDistancia_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      Corrida corrida0 = new Corrida(localDateTime0, localTime0, 2150, 0.0);
      double double0 = corrida0.getVelocidade();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      Clock clock0 = MockClock.tickSeconds(zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now(clock0);
      Trail trail0 = new Trail((LocalDateTime) null, localTime0, 0, 1.0, 1.0);
      double double0 = trail0.getVelocidade();
      assertEquals(1.364610199096628E-5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Corrida corrida0 = new Corrida();
      Corrida corrida1 = (Corrida)corrida0.geraAtividade(utilizadorAmador0, (-3149.0));
      double double0 = corrida1.getVelocidade();
      assertEquals((-63201.84109589041), double0, 0.01);
      assertEquals(0.0, corrida0.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond((-3651L), 0, zoneOffset0);
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      Ciclismo ciclismo0 = new Ciclismo(localDateTime0, localTime0, 0, (-3651L));
      double double0 = ciclismo0.getFatorVelocidade((-593.684692468), 0);
      assertEquals((-3651.0), ciclismo0.getDistancia(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(1, 4);
      Clock clock0 = MockClock.tickSeconds(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(4);
      Ciclismo ciclismo0 = new Ciclismo(localDateTime0, localTime0, (-1), 1);
      double double0 = ciclismo0.getFatorVelocidade((-166.973904), 1);
      assertEquals(167.223904, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.of(0, 0, 0, 0);
      Ciclismo ciclismo0 = new Ciclismo(localDateTime0, localTime0, 1, 1);
      double double0 = ciclismo0.getFatorVelocidade(0.0, (-62.7115378806124));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      double double0 = corrida0.getDistancia();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(0L);
      Corrida corrida0 = new Corrida(localDateTime0, localTime0, 0, 0L);
      corrida0.setDistancia(51.56219);
      double double0 = corrida0.getDistancia();
      assertEquals(51.56219, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Btt btt0 = new Btt();
      btt0.equals(btt0);
      assertEquals(0.0, btt0.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Trail trail0 = new Trail();
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(0L);
      Ciclismo ciclismo0 = new Ciclismo(localDateTime0, localTime0, (-1021), (-1021));
      trail0.equals(ciclismo0);
      assertEquals((-1021.0), ciclismo0.getDistancia(), 0.01);
      assertEquals(0.0, trail0.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      ciclismo0.setDataRealizacao((LocalDateTime) null);
      // Undeclared exception!
      try { 
        ciclismo0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Btt btt0 = new Btt(localDateTime0, (LocalTime) null, (-194), (-194), 1.0);
      // Undeclared exception!
      try { 
        btt0.getVelocidade();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.AtivDistancia", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Btt btt0 = new Btt();
      Btt btt1 = new Btt();
      btt1.setTempo((LocalTime) null);
      // Undeclared exception!
      try { 
        btt1.equals(btt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Btt btt0 = new Btt(localDateTime0, (LocalTime) null, (-194), (-194), 1.0);
      double double0 = btt0.getDistancia();
      assertEquals((-194.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Btt btt0 = new Btt();
      LocalTime localTime0 = MockLocalTime.now();
      Btt btt1 = new Btt((LocalDateTime) null, localTime0, 1186, 1186, Double.NaN);
      btt0.equals(btt1);
      assertEquals(0.0, btt0.getDistancia(), 0.01);
      assertEquals(1186.0, btt1.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Btt btt0 = new Btt();
      Btt btt1 = new Btt();
      boolean boolean0 = btt1.equals(btt0);
      assertEquals(0.0, btt1.getDistancia(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      Ciclismo ciclismo1 = new Ciclismo(ciclismo0);
      ciclismo0.setDistancia((-267.7967876658614));
      boolean boolean0 = ciclismo0.equals(ciclismo1);
      assertEquals((-267.7967876658614), ciclismo0.getDistancia(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Corrida corrida0 = new Corrida(localDateTime0, (LocalTime) null, 6, 6);
      // Undeclared exception!
      try { 
        corrida0.getFatorVelocidade(2977.1, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.AtivDistancia", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      String string0 = ciclismo0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nTipo de atividade: Ciclismo\n", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      Ciclismo ciclismo1 = (Ciclismo)ciclismo0.clone();
      ciclismo1.setDistancia((-824.61494));
      boolean boolean0 = ciclismo0.equals(ciclismo1);
      assertEquals((-824.61494), ciclismo1.getDistancia(), 0.01);
      assertFalse(boolean0);
  }
}
