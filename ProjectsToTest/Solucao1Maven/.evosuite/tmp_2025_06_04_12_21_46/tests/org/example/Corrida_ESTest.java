/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 11:46:24 GMT 2025
 */

package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.OffsetDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.MockOffsetDateTime;
import org.example.Corrida;
import org.example.Trail;
import org.example.Utilizador;
import org.example.UtilizadorAmador;
import org.example.UtilizadorPraticanteOcasional;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Corrida_ESTest extends Corrida_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.of(7, 7, 7);
      Corrida corrida0 = new Corrida((LocalDateTime) null, localTime0, 620, 7);
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "", "", (-382), (-417), (-1), localDate0, 'n');
      Corrida corrida1 = (Corrida)corrida0.geraAtividade(utilizadorPraticanteOcasional0, (-417));
      assertEquals(1896.4, corrida1.getDistancia(), 0.01);
      assertEquals(0, corrida1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      corrida0.setProximoCodigo(0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2271L));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "W^IA{", "p3v", (-1), (-1), (-1), localDate0, 'q');
      Corrida corrida1 = (Corrida)corrida0.geraAtividade(utilizadorAmador0, (-2271L));
      assertEquals((-226006.00000000003), corrida1.getDistancia(), 0.01);
      assertEquals(0, corrida1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(53L);
      Corrida corrida0 = new Corrida(localDateTime0, localTime0, (-2232), 0.0);
      corrida0.setProximoCodigo((-2232));
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      Corrida corrida1 = (Corrida)corrida0.geraAtividade(utilizadorPraticanteOcasional0, (-2232));
      assertEquals(0, corrida1.getFreqCardiaca());
      assertEquals((-4.7244640256E9), corrida1.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      Corrida corrida0 = new Corrida((LocalDateTime) null, localTime0, 7, 7);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      double double0 = corrida0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.of(7, 7, 7);
      Corrida corrida0 = new Corrida((LocalDateTime) null, localTime0, 620, 7);
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "", "", (-382), (-417), (-1), localDate0, 'n');
      double double0 = corrida0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals(336.3342937500003, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes((-1), 0);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0L, 1, zoneOffset0);
      OffsetDateTime offsetDateTime0 = MockOffsetDateTime.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.from(offsetDateTime0);
      Corrida corrida0 = new Corrida(localDateTime0, localTime0, 1, 502.58884066814);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("d", "d", "", (-1), 1, 1, localDate0, '4');
      double double0 = corrida0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals((-45.335971980982556), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(0L);
      Corrida corrida0 = new Corrida((LocalDateTime) null, localTime0, (-3245), (-3245));
      // Undeclared exception!
      try { 
        corrida0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("B+f0nt;~9~xg", "org.example.LegPress", "org.example.LegPress", 0, (-1195), (-1195), (LocalDate) null, 'W');
      // Undeclared exception!
      try { 
        corrida0.geraAtividade(utilizadorPraticanteOcasional0, (-2976.01487353));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      // Undeclared exception!
      try { 
        corrida0.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Corrida", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2271L));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "W^IA{", "p3v", (-1), (-1), (-1), localDate0, 'q');
      // Undeclared exception!
      try { 
        corrida0.consumoCalorias(utilizadorAmador0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Corrida corrida0 = null;
      try {
        corrida0 = new Corrida((Corrida) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      Corrida corrida0 = new Corrida((LocalDateTime) null, localTime0, 7, 7);
      Trail trail0 = new Trail();
      boolean boolean0 = corrida0.equals(trail0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      boolean boolean0 = corrida0.equals(corrida0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(0L);
      Corrida corrida0 = new Corrida((LocalDateTime) null, localTime0, (-3245), (-3245));
      boolean boolean0 = corrida0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      Object object0 = corrida0.clone();
      boolean boolean0 = corrida0.equals(object0);
      assertTrue(boolean0);
      assertNotSame(object0, corrida0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(0L);
      Corrida corrida0 = new Corrida((LocalDateTime) null, localTime0, (-3245), (-3245));
      Corrida corrida1 = new Corrida(corrida0);
      // Undeclared exception!
      try { 
        corrida1.equals(corrida0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      String string0 = corrida0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nTipo de atividade: Corrida\n", string0);
  }
}
