/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 11:37:47 GMT 2025
 */

package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.example.Btt;
import org.example.Trail;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtivDistAltimetria_ESTest extends AtivDistAltimetria_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Btt btt0 = new Btt();
      Object object0 = btt0.clone();
      btt0.setAltimetria(454.38710934);
      boolean boolean0 = btt0.equals(object0);
      assertEquals(0.22719355467, btt0.getFatorAltimetria(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Btt btt0 = new Btt();
      String string0 = btt0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nAltimetria: 0.0 metros\nTipo de atividade: BTT\n", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(5, 5);
      Clock clock0 = MockClock.tickSeconds(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Btt btt0 = new Btt(localDateTime0, (LocalTime) null, 5, 5, 354.89);
      double double0 = btt0.getFatorAltimetria();
      assertEquals(0.177445, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(5, 5);
      Clock clock0 = MockClock.tickSeconds(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Btt btt0 = new Btt(localDateTime0, (LocalTime) null, 5, 5, 354.89);
      btt0.setAltimetria((-1.0));
      double double0 = btt0.getFatorAltimetria();
      assertEquals((-1.0), btt0.getAltimetria(), 0.01);
      assertEquals((-5.0E-4), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Trail trail0 = new Trail();
      double double0 = trail0.getAltimetria();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(5, 5);
      Clock clock0 = MockClock.tickSeconds(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Btt btt0 = new Btt(localDateTime0, (LocalTime) null, 5, 5, 354.89);
      btt0.setAltimetria((-1.0));
      double double0 = btt0.getAltimetria();
      assertEquals((-5.0E-4), btt0.getFatorAltimetria(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Trail trail0 = new Trail();
      trail0.equals(trail0);
      assertEquals(0.0, trail0.getAltimetria(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(5, 5);
      Clock clock0 = MockClock.tickSeconds(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Btt btt0 = new Btt(localDateTime0, (LocalTime) null, 5, 5, 354.89);
      double double0 = btt0.getAltimetria();
      assertEquals(354.89, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Trail trail0 = new Trail();
      trail0.setDistancia(5442.289101913008);
      Trail trail1 = new Trail();
      boolean boolean0 = trail0.equals(trail1);
      assertEquals(0.0, trail1.getFatorAltimetria(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Btt btt0 = new Btt();
      Btt btt1 = new Btt(btt0);
      boolean boolean0 = btt0.equals(btt1);
      assertTrue(boolean0);
      assertEquals(0.0, btt1.getFatorAltimetria(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Btt btt0 = new Btt();
      Btt btt1 = new Btt();
      btt1.setAltimetria(496.1565924171517);
      boolean boolean0 = btt0.equals(btt1);
      assertEquals(0.24807829620857588, btt1.getFatorAltimetria(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Trail trail0 = new Trail();
      double double0 = trail0.getFatorAltimetria();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Trail trail0 = new Trail(localDateTime0, (LocalTime) null, 0, 0, 1.15);
      Object object0 = trail0.clone();
      // Undeclared exception!
      try { 
        trail0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Btt btt0 = new Btt((LocalDateTime) null, (LocalTime) null, 0, 0, 0.0);
      // Undeclared exception!
      try { 
        btt0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }
}
