/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 11:34:17 GMT 2025
 */

package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.LocalDate;
import java.time.Month;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.time.chrono.JapaneseDate;
import java.util.LinkedList;
import java.util.List;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.example.Abdominais;
import org.example.Atividade;
import org.example.BenchPress;
import org.example.Btt;
import org.example.LegPress;
import org.example.PlanoTreino;
import org.example.Utilizador;
import org.example.UtilizadorAmador;
import org.example.UtilizadorPraticanteOcasional;
import org.example.UtilizadorProfissional;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utilizador_ESTest extends Utilizador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1491L));
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = (UtilizadorPraticanteOcasional)utilizadorPraticanteOcasional0.utilizadorNumPeriodo(localDate0, localDate0);
      utilizadorPraticanteOcasional1.setGenero('X');
      boolean boolean0 = utilizadorPraticanteOcasional0.equals(utilizadorPraticanteOcasional1);
      assertEquals('X', utilizadorPraticanteOcasional1.getGenero());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      utilizadorProfissional1.setAltura((-3019));
      boolean boolean0 = utilizadorProfissional1.equals(utilizadorProfissional0);
      assertEquals((-3019), utilizadorProfissional1.getAltura());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      utilizadorProfissional0.setPeso((-830.304685945));
      boolean boolean0 = utilizadorProfissional1.equals(utilizadorProfissional0);
      assertEquals((-830.304685945), utilizadorProfissional0.getPeso(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      LocalDate localDate0 = MockLocalDate.of(5, 1, 1);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = new UtilizadorPraticanteOcasional(utilizadorPraticanteOcasional0, localDate0, localDate0);
      utilizadorPraticanteOcasional0.setFreqCardiaca(5);
      boolean boolean0 = utilizadorPraticanteOcasional1.equals(utilizadorPraticanteOcasional0);
      assertEquals(5, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      utilizadorProfissional1.setCodUtilizador(77);
      boolean boolean0 = utilizadorProfissional1.equals(utilizadorProfissional0);
      assertEquals(77, utilizadorProfissional1.getCodUtilizador());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Month month0 = Month.MARCH;
      LocalDate localDate0 = MockLocalDate.of((-2274), month0, 10);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "JQ ", "", 3, (-19), 3, localDate0, 'e');
      Btt btt0 = new Btt();
      Btt btt1 = (Btt)btt0.geraAtividade(utilizadorAmador0, 1000.0);
      assertEquals((-19.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals("JQ ", utilizadorAmador0.getMorada());
      assertEquals(3, utilizadorAmador0.getAltura());
      assertEquals('e', utilizadorAmador0.getGenero());
      assertEquals(3, utilizadorAmador0.getFreqCardiaca());
      assertEquals(4263.0, btt1.getDistancia(), 0.01);
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      LocalDate localDate0 = MockLocalDate.now();
      LocalDate localDate1 = MockLocalDate.ofYearDay(107, 107);
      // Undeclared exception!
      try { 
        utilizadorAmador0.planoTreinoMaisCalorias(localDate0, localDate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1497L));
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate1 = MockLocalDate.now(zoneId0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("5 Mz=t7|+vSPr/hL", "\nPeso: ", "5 Mz=t7|+vSPr/hL", 0, 0, 0, localDate0, ';');
      utilizadorProfissional0.allMetrosAltimetria(localDate1, localDate0);
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals("5 Mz=t7|+vSPr/hL", utilizadorProfissional0.getNome());
      assertEquals(';', utilizadorProfissional0.getGenero());
      assertEquals("5 Mz=t7|+vSPr/hL", utilizadorProfissional0.getEmail());
      assertEquals("\nPeso: ", utilizadorProfissional0.getMorada());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Period period0 = Period.ofDays((-376));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("R%5", "", "Tt$uNFTW!ySoBea=jHS", (-376), (-1195), (-1195), localDate0, 'O');
      LocalDate localDate1 = MockLocalDate.ofEpochDay(606L);
      double double0 = utilizadorProfissional0.allKmsDistancia(localDate0, localDate1);
      assertEquals("R%5", utilizadorProfissional0.getNome());
      assertEquals('O', utilizadorProfissional0.getGenero());
      assertEquals(0.0, double0, 0.01);
      assertEquals("Tt$uNFTW!ySoBea=jHS", utilizadorProfissional0.getEmail());
      assertEquals("", utilizadorProfissional0.getMorada());
      assertEquals((-376), utilizadorProfissional0.getFreqCardiaca());
      assertEquals((-1195), utilizadorProfissional0.getAltura());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals((-1195.0), utilizadorProfissional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Period period0 = Period.ofDays(6);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(6);
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      LocalDate localDate1 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      utilizadorAmador0.numeroAtividades(localDate0, localDate1);
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      LocalDate localDate1 = MockIsoChronology.dateNow(isoChronology0);
      double double0 = utilizadorPraticanteOcasional0.totalCaloriasDispendidas(localDate0, localDate1);
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(0.0, double0, 0.01);
      assertEquals('\u0000', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals(0, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("N", "\nAtividades e suas itera\u00E7oes: \n", "/pa{UodG", 0, 2473, 0, localDate0, 'I');
      LegPress legPress0 = new LegPress();
      utilizadorAmador0.addAtividadePlanoTreino(1017, legPress0, 0);
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals('I', utilizadorAmador0.getGenero());
      assertEquals("\nAtividades e suas itera\u00E7oes: \n", utilizadorAmador0.getMorada());
      assertEquals(2473.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals("/pa{UodG", utilizadorAmador0.getEmail());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals("N", utilizadorAmador0.getNome());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = new PlanoTreino();
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      Btt btt0 = new Btt();
      utilizadorAmador0.addAtividadePlanoTreino((-8), btt0, (-8));
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = (UtilizadorProfissional)utilizadorProfissional0.utilizadorNumPeriodo(localDate0, localDate0);
      assertEquals(0, utilizadorProfissional1.getAltura());
      assertTrue(utilizadorProfissional1.equals((Object)utilizadorProfissional0));
      assertEquals(0, utilizadorProfissional1.getFreqCardiaca());
      assertEquals('\u0000', utilizadorProfissional1.getGenero());
      assertEquals(0, utilizadorProfissional1.getCodUtilizador());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = new PlanoTreino();
      LocalDate localDate0 = MockLocalDate.now();
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      LocalDate localDate1 = MockLocalDate.ofYearDay(107, 107);
      List<PlanoTreino> list0 = utilizadorAmador0.planosTreinos(localDate1, localDate0);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("3", "", "", 1, 70, 500, localDate0, 'x');
      double double0 = utilizadorAmador0.getPeso();
      assertEquals('x', utilizadorAmador0.getGenero());
      assertEquals(70.0, double0, 0.01);
      assertEquals("", utilizadorAmador0.getMorada());
      assertEquals(1, utilizadorAmador0.getFreqCardiaca());
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals(500, utilizadorAmador0.getAltura());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals("3", utilizadorAmador0.getNome());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.setPeso((-1774.452492860522));
      double double0 = utilizadorProfissional0.getPeso();
      assertEquals((-1774.452492860522), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.setNome("<");
      utilizadorAmador0.getNome();
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.getNome();
      assertEquals(0, utilizadorProfissional0.getCodUtilizador());
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(0, utilizadorProfissional0.getAltura());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.getMorada();
      assertEquals(0, utilizadorProfissional0.getCodUtilizador());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Month month0 = Month.AUGUST;
      LocalDate localDate0 = MockLocalDate.of(0, month0, 7);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "", 0, 0, 7, localDate0, '<');
      int int0 = utilizadorAmador0.getIdade();
      assertEquals('<', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(2014, int0);
      assertEquals(7, utilizadorAmador0.getAltura());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      System.setCurrentTimeMillis(1L);
      int int0 = utilizadorAmador0.getIdade();
      assertEquals((-44), int0);
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      char char0 = utilizadorAmador0.getGenero();
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals('\u0000', char0);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("org.example.BicepCurls", "org.example.BicepCurls", "?Zd,-N+p=VZ; PCFU", 13, 2991, 2991, localDate0, '1');
      char char0 = utilizadorProfissional0.getGenero();
      assertEquals("org.example.BicepCurls", utilizadorProfissional0.getMorada());
      assertEquals("org.example.BicepCurls", utilizadorProfissional0.getNome());
      assertEquals(13, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(2991, utilizadorProfissional0.getAltura());
      assertEquals('1', char0);
      assertEquals("?Zd,-N+p=VZ; PCFU", utilizadorProfissional0.getEmail());
      assertEquals(2991.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      int int0 = utilizadorProfissional0.getFreqCardiaca();
      assertEquals(0, int0);
      assertEquals(0, utilizadorProfissional0.getCodUtilizador());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(5);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("<<sg)}(eFl", "<<sg)}(eFl", "<<sg)}(eFl", (-1228), 5, 5, localDate0, 'V');
      int int0 = utilizadorProfissional0.getFreqCardiaca();
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(5, utilizadorProfissional0.getAltura());
      assertEquals((-1228), int0);
      assertEquals('V', utilizadorProfissional0.getGenero());
      assertEquals(5.0, utilizadorProfissional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("N", "/pa{UodG", "N", 5, 3133, 191, localDate0, 'I');
      utilizadorPraticanteOcasional0.getFatorMultiplicativo();
      assertEquals('I', utilizadorPraticanteOcasional0.getGenero());
      assertEquals("N", utilizadorPraticanteOcasional0.getEmail());
      assertEquals(3133.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals("/pa{UodG", utilizadorPraticanteOcasional0.getMorada());
      assertEquals("N", utilizadorPraticanteOcasional0.getNome());
      assertEquals(191, utilizadorPraticanteOcasional0.getAltura());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(5, utilizadorPraticanteOcasional0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((String) null, (String) null, (String) null, 1523, 1523, 5, localDate0, '$');
      utilizadorPraticanteOcasional0.getEmail();
      assertEquals(1523.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals('$', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(5, utilizadorPraticanteOcasional0.getAltura());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(1523, utilizadorPraticanteOcasional0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1497L));
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("5 Mz=t7|+vSPr/hL", "\nPeso: ", "5 Mz=t7|+vSPr/hL", 0, 0, 0, localDate0, ';');
      String string0 = utilizadorProfissional0.getEmail();
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(';', utilizadorProfissional0.getGenero());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals("5 Mz=t7|+vSPr/hL", utilizadorProfissional0.getNome());
      assertEquals("5 Mz=t7|+vSPr/hL", string0);
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals("\nPeso: ", utilizadorProfissional0.getMorada());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("org.example.PlanoTreino$AtividadeIteracoes", "org.example.PlanoTreino$AtividadeIteracoes", "3", 5, 3394, 0, localDate0, ' ');
      int int0 = utilizadorProfissional0.getCodUtilizador();
      assertEquals(5, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(3394.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(1, int0);
      assertEquals(' ', utilizadorProfissional0.getGenero());
      assertEquals("3", utilizadorProfissional0.getEmail());
      assertEquals("org.example.PlanoTreino$AtividadeIteracoes", utilizadorProfissional0.getNome());
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals("org.example.PlanoTreino$AtividadeIteracoes", utilizadorProfissional0.getMorada());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.setCodUtilizador((-1870));
      int int0 = utilizadorPraticanteOcasional0.getCodUtilizador();
      assertEquals((-1870), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      double double0 = utilizadorAmador0.getBMR();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador(":$Mw.EBu7$MD48RL4h", "4h_lD", "", (-1), (-1), (-1), localDate0, 'Q');
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      utilizadorAmador0.getAtividadesPlanoTreino();
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals("4h_lD", utilizadorAmador0.getMorada());
      assertEquals(":$Mw.EBu7$MD48RL4h", utilizadorAmador0.getNome());
      assertEquals((-1), utilizadorAmador0.getFreqCardiaca());
      assertEquals('Q', utilizadorAmador0.getGenero());
      assertEquals((-1.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals((-1), utilizadorAmador0.getAltura());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      Btt btt0 = new Btt();
      utilizadorProfissional0.addAtividade(btt0);
      utilizadorProfissional0.getAtividadesIsoladas();
      assertEquals(0, utilizadorProfissional0.getCodUtilizador());
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      int int0 = utilizadorProfissional0.getAltura();
      assertEquals(0, int0);
      assertEquals(0, utilizadorProfissional0.getCodUtilizador());
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofYearDay(3328, 70);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "Kc(=N/BbISDr>F&9#}+", "", 70, 70, 3, localDate0, 'N');
      int int0 = utilizadorProfissional0.getAltura();
      assertEquals(3, int0);
      assertEquals("", utilizadorProfissional0.getNome());
      assertEquals(70, utilizadorProfissional0.getFreqCardiaca());
      assertEquals("Kc(=N/BbISDr>F&9#}+", utilizadorProfissional0.getMorada());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals("", utilizadorProfissional0.getEmail());
      assertEquals('N', utilizadorProfissional0.getGenero());
      assertEquals(70.0, utilizadorProfissional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Period period0 = Period.ofDays(6);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(6);
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) isoChronology0);
      utilizadorAmador0.atividadesIsoladas(localDate0, localDate0, predicate0);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      Btt btt0 = new Btt();
      utilizadorProfissional0.addAtividade(btt0);
      Period period0 = Period.ofYears(0);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      List<Atividade> list0 = utilizadorProfissional0.allAtividades(localDate0, localDate0);
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
      assertEquals(0, utilizadorProfissional0.getCodUtilizador());
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Period period0 = Period.ofDays(1681);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      // Undeclared exception!
      try { 
        utilizadorAmador0.utilizadorNumPeriodo(localDate0, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      // Undeclared exception!
      try { 
        utilizadorProfissional0.totalCaloriasDispendidas((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("\n", "\n", "\n", 1277, (-1053), 0, (LocalDate) null, 'c');
      // Undeclared exception!
      try { 
        utilizadorAmador0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      // Undeclared exception!
      try { 
        utilizadorAmador0.numeroAtividades((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("B0!_oQ", "c0", "B0!_oQ", 0, 0, 0, localDate0, '8');
      Abdominais abdominais0 = new Abdominais();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) abdominais0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      BiFunction<Atividade, Utilizador, UtilizadorAmador> biFunction0 = (BiFunction<Atividade, Utilizador, UtilizadorAmador>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        utilizadorAmador0.infoDasAtividadesUtilizadorNumPeriodoQueRespeitamP(localDate0, (LocalDate) null, predicate0, biFunction0, (Utilizador) utilizadorProfissional0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) utilizadorAmador0);
      // Undeclared exception!
      try { 
        utilizadorAmador0.infoDasAtividadesNumPeriodoQueRespeitamP((LocalDate) null, (LocalDate) null, predicate0, (Function<Atividade, LinkedList<UtilizadorProfissional>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("-h^v:8$Nd)&,IRi", "-h^v:8$Nd)&,IRi", "g+oP,5/", (-2923), (-2923), (-2923), (LocalDate) null, 'c');
      // Undeclared exception!
      try { 
        utilizadorProfissional0.getIdade();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional(".#C>,Ws:G2Dks-", "mm6;iog+:xvJMx", ".#C>,Ws:G2Dks-", 3040, 2352, 2352, (LocalDate) null, 'V');
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.getBMR();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      utilizadorProfissional1.setDataNascimento((LocalDate) null);
      // Undeclared exception!
      try { 
        utilizadorProfissional1.equals(utilizadorProfissional0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      LocalDate localDate0 = MockLocalDate.from(japaneseDate0);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) utilizadorProfissional0);
      // Undeclared exception!
      try { 
        utilizadorProfissional0.atividadesNumPeriodoQueRespeitamP(localDate0, (LocalDate) null, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      // Undeclared exception!
      try { 
        utilizadorAmador0.allMetrosAltimetria((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      // Undeclared exception!
      try { 
        utilizadorProfissional0.allKmsDistancia((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      // Undeclared exception!
      try { 
        utilizadorAmador0.addPlanoTreino((PlanoTreino) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.addAtividadePlanoTreino(0, (Atividade) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.PlanoTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.addAtividade((Atividade) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) isoChronology0);
      utilizadorAmador0.atividadesNumPeriodoQueRespeitamP(localDate0, localDate0, predicate0);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Period period0 = Period.ofDays(70);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      List<Atividade> list0 = utilizadorPraticanteOcasional0.getAtividadesIsoladas();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("R%5", "R%5", "Tt$uNFTW!ySoBea=jHS", 70, 2869, 2869, localDate0, 'c');
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) list0);
      utilizadorProfissional0.infoDasAtividadesNumPeriodoQueRespeitamP(localDate0, localDate0, predicate0, (Function<Atividade, BenchPress>) null);
      assertEquals(0, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals("R%5", utilizadorProfissional0.getMorada());
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals("R%5", utilizadorProfissional0.getNome());
      assertEquals(70, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(2869, utilizadorProfissional0.getAltura());
      assertEquals(2869.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals('c', utilizadorProfissional0.getGenero());
      assertEquals('\u0000', utilizadorPraticanteOcasional0.getGenero());
      assertEquals("Tt$uNFTW!ySoBea=jHS", utilizadorProfissional0.getEmail());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador(":$Mw.EBu7$MD48RL4h", "4h_lD", "", (-1), (-1), (-1), localDate0, 'Q');
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      PlanoTreino planoTreino1 = utilizadorAmador0.getPlanoTreinoId(1);
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals((-1), utilizadorAmador0.getAltura());
      assertEquals("4h_lD", utilizadorAmador0.getMorada());
      assertEquals((-1.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals((-1), utilizadorAmador0.getFreqCardiaca());
      assertEquals('Q', utilizadorAmador0.getGenero());
      assertEquals(":$Mw.EBu7$MD48RL4h", utilizadorAmador0.getNome());
      assertEquals(1, planoTreino1.getCodPlano());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(3);
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional((String) null, "jE/", (String) null, 70, 3, 3, localDate0, ')');
      String string0 = utilizadorProfissional0.getNome();
      assertEquals(70, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(')', utilizadorProfissional0.getGenero());
      assertEquals(3.0, utilizadorProfissional0.getPeso(), 0.01);
      assertNull(string0);
      assertEquals(3, utilizadorProfissional0.getAltura());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.getEmail();
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getAltura());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "\nAtividades: \n", "", 0, (-1120), 0, (LocalDate) null, 'w');
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) "\nAtividades: \n");
      // Undeclared exception!
      try { 
        utilizadorPraticanteOcasional0.atividadesIsoladas((LocalDate) null, (LocalDate) null, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      int int0 = utilizadorAmador0.getCodUtilizador();
      assertEquals(0, int0);
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("org.example.BicepCurls", "org.example.BicepCurls", "?Zd,-N+p=VZ; PCFU", 13, 2991, 2991, localDate0, '1');
      int int0 = utilizadorProfissional0.getIdade();
      assertEquals('1', utilizadorProfissional0.getGenero());
      assertEquals("?Zd,-N+p=VZ; PCFU", utilizadorProfissional0.getEmail());
      assertEquals(13, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(2991, utilizadorProfissional0.getAltura());
      assertEquals(0, int0);
      assertEquals("org.example.BicepCurls", utilizadorProfissional0.getNome());
      assertEquals("org.example.BicepCurls", utilizadorProfissional0.getMorada());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals(2991.0, utilizadorProfissional0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      utilizadorAmador0.planosTreinos(localDate0, localDate0);
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("N", "/pa{UodG", "N", 5, 3133, 191, localDate0, 'I');
      char char0 = utilizadorPraticanteOcasional0.getGenero();
      assertEquals('I', char0);
      assertEquals("/pa{UodG", utilizadorPraticanteOcasional0.getMorada());
      assertEquals(3133.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals("N", utilizadorPraticanteOcasional0.getNome());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals(191, utilizadorPraticanteOcasional0.getAltura());
      assertEquals(5, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals("N", utilizadorPraticanteOcasional0.getEmail());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(5128);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("", "", "", 5128, 5128, (-3058), localDate0, 'E');
      int int0 = utilizadorProfissional0.getAltura();
      assertEquals(5128, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(5128.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals((-3058), int0);
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals('E', utilizadorProfissional0.getGenero());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("N", "/pa{UodG", "N", 5, 3133, 191, localDate0, 'I');
      int int0 = utilizadorPraticanteOcasional0.getFreqCardiaca();
      assertEquals('I', utilizadorPraticanteOcasional0.getGenero());
      assertEquals("N", utilizadorPraticanteOcasional0.getEmail());
      assertEquals(5, int0);
      assertEquals("N", utilizadorPraticanteOcasional0.getNome());
      assertEquals("/pa{UodG", utilizadorPraticanteOcasional0.getMorada());
      assertEquals(3133.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals(191, utilizadorPraticanteOcasional0.getAltura());
      assertEquals(1, utilizadorPraticanteOcasional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador(":$Mw.EBu7$MD48RL4h", "4h_lD", "", (-1), (-1), (-1), localDate0, 'Q');
      utilizadorAmador0.getAtividadesPlanoTreino();
      assertEquals("", utilizadorAmador0.getEmail());
      assertEquals('Q', utilizadorAmador0.getGenero());
      assertEquals((-1.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals((-1), utilizadorAmador0.getAltura());
      assertEquals("4h_lD", utilizadorAmador0.getMorada());
      assertEquals(":$Mw.EBu7$MD48RL4h", utilizadorAmador0.getNome());
      assertEquals((-1), utilizadorAmador0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("org.example.BicepCurls", "org.example.BicepCurls", "?Zd,-N+p=VZ; PCFU", 13, 2991, 2991, localDate0, '1');
      String string0 = utilizadorProfissional0.getMorada();
      assertEquals(2991.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals('1', utilizadorProfissional0.getGenero());
      assertEquals(2991, utilizadorProfissional0.getAltura());
      assertEquals(13, utilizadorProfissional0.getFreqCardiaca());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals("?Zd,-N+p=VZ; PCFU", utilizadorProfissional0.getEmail());
      assertEquals("org.example.BicepCurls", utilizadorProfissional0.getNome());
      assertEquals("org.example.BicepCurls", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      double double0 = utilizadorPraticanteOcasional0.getPeso();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, utilizadorPraticanteOcasional0.getCodUtilizador());
      assertEquals('\u0000', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.getDataNascimento();
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      utilizadorProfissional1.setGenero('g');
      boolean boolean0 = utilizadorProfissional1.equals(utilizadorProfissional0);
      assertEquals('g', utilizadorProfissional1.getGenero());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      utilizadorProfissional1.setAltura(2);
      boolean boolean0 = utilizadorProfissional1.equals(utilizadorProfissional0);
      assertEquals(2, utilizadorProfissional1.getAltura());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      utilizadorProfissional0.setPeso(2);
      boolean boolean0 = utilizadorProfissional1.equals(utilizadorProfissional0);
      assertEquals(2.0, utilizadorProfissional0.getPeso(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional();
      utilizadorProfissional1.setFreqCardiaca(124);
      boolean boolean0 = utilizadorProfissional1.equals(utilizadorProfissional0);
      assertEquals(124, utilizadorProfissional1.getFreqCardiaca());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      assertTrue(utilizadorProfissional1.equals((Object)utilizadorProfissional0));
      
      utilizadorProfissional0.setEmail("Z}dsYF`K<Vto,8II");
      boolean boolean0 = utilizadorProfissional0.equals(utilizadorProfissional1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      UtilizadorProfissional utilizadorProfissional1 = new UtilizadorProfissional(utilizadorProfissional0);
      assertTrue(utilizadorProfissional1.equals((Object)utilizadorProfissional0));
      
      utilizadorProfissional0.setMorada((String) null);
      boolean boolean0 = utilizadorProfissional1.equals(utilizadorProfissional0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("Utilizador\nCodigo de Utilizador: 0\nNome: \nMorada: \nEmail: \nFrequencia Cardiaca: 0 bpm\nPeso: 0.0 kilos\nAltura: 0 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: \u0000\nAtividades: \n\nPlanos de treino: \n\nTipo de Utilizador: Profissional\n", "\nAtividades e suas itera\u00E7oes: \n", "Utilizador\nCodigo de Utilizador: 0\nNome: \nMorada: \nEmail: \nFrequencia Cardiaca: 0 bpm\nPeso: 0.0 kilos\nAltura: 0 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: \u0000\nAtividades: \n\nPlanos de treino: \n\nTipo de Utilizador: Profissional\n", (-2445), (-2445), 0, localDate0, 'p');
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional1 = new UtilizadorPraticanteOcasional("\nAtividades e suas itera\u00E7oes: \n", "\nAtividades e suas itera\u00E7oes: \n", "\nAtividades e suas itera\u00E7oes: \n", 0, 0, 0, localDate0, 'p');
      boolean boolean0 = utilizadorPraticanteOcasional0.equals(utilizadorPraticanteOcasional1);
      assertEquals((-2445.0), utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals("Utilizador\nCodigo de Utilizador: 0\nNome: \nMorada: \nEmail: \nFrequencia Cardiaca: 0 bpm\nPeso: 0.0 kilos\nAltura: 0 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: \u0000\nAtividades: \n\nPlanos de treino: \n\nTipo de Utilizador: Profissional\n", utilizadorPraticanteOcasional0.getEmail());
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals("Utilizador\nCodigo de Utilizador: 0\nNome: \nMorada: \nEmail: \nFrequencia Cardiaca: 0 bpm\nPeso: 0.0 kilos\nAltura: 0 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: \u0000\nAtividades: \n\nPlanos de treino: \n\nTipo de Utilizador: Profissional\n", utilizadorPraticanteOcasional0.getNome());
      assertEquals('p', utilizadorPraticanteOcasional1.getGenero());
      assertFalse(boolean0);
      assertEquals(2, utilizadorPraticanteOcasional1.getCodUtilizador());
      assertEquals("\nAtividades e suas itera\u00E7oes: \n", utilizadorPraticanteOcasional0.getMorada());
      assertEquals((-2445), utilizadorPraticanteOcasional0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      UtilizadorAmador utilizadorAmador1 = (UtilizadorAmador)utilizadorAmador0.clone();
      boolean boolean0 = utilizadorAmador1.equals(utilizadorAmador0);
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals('\u0000', utilizadorAmador1.getGenero());
      assertEquals(0, utilizadorAmador1.getCodUtilizador());
      assertEquals(0, utilizadorAmador1.getAltura());
      assertTrue(utilizadorAmador0.equals((Object)utilizadorAmador1));
      assertEquals(0, utilizadorAmador1.getFreqCardiaca());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Object object0 = utilizadorAmador0.clone();
      assertTrue(object0.equals((Object)utilizadorAmador0));
      
      utilizadorAmador0.setNome("Utilizador\nCodigo de Utilizador: 0\nNome: \nMorada: \nEmail: \nFrequencia Cardiaca: 0 bpm\nPeso: 0.0 kilos\nAltura: 0 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: \u0000\nAtividades: \n\nPlanos de treino: \n\nTipo de Utilizador: Amador\n");
      boolean boolean0 = utilizadorAmador0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = new PlanoTreino();
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      String string0 = utilizadorAmador0.toString();
      assertEquals("Utilizador\nCodigo de Utilizador: 0\nNome: \nMorada: \nEmail: \nFrequencia Cardiaca: 0 bpm\nPeso: 0.0 kilos\nAltura: 0 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: \u0000\nAtividades: \n\nPlanos de treino: \nPlano de Treino\nCodigo de Plano de Treino: 0\nData de realiza\u00E7ao: 2014-02-14\nAtividades e suas itera\u00E7oes: \n\nTipo de Utilizador: Amador\n", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.addAtividade(abdominais0);
      String string0 = utilizadorProfissional0.toString();
      assertEquals("Utilizador\nCodigo de Utilizador: 0\nNome: \nMorada: \nEmail: \nFrequencia Cardiaca: 0 bpm\nPeso: 0.0 kilos\nAltura: 0 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: \u0000\nAtividades: \nAtividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nTipo de atividade: Abdominais\n\nPlanos de treino: \n\nTipo de Utilizador: Profissional\n", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      String string0 = utilizadorAmador0.toString();
      assertEquals("Utilizador\nCodigo de Utilizador: 0\nNome: \nMorada: \nEmail: \nFrequencia Cardiaca: 0 bpm\nPeso: 0.0 kilos\nAltura: 0 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: \u0000\nAtividades: \n\nPlanos de treino: \n\nTipo de Utilizador: Amador\n", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Period period0 = Period.ofMonths(1);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      PlanoTreino planoTreino0 = new PlanoTreino();
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      List<Atividade> list0 = utilizadorAmador0.allAtividades(localDate0, localDate0);
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, list0.size());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("N0!_r3", "c0", "N0!_r3", (-758), (-758), (-758), localDate0, '8');
      Abdominais abdominais0 = new Abdominais();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) abdominais0);
      BiFunction<Atividade, Utilizador, Object> biFunction0 = (BiFunction<Atividade, Utilizador, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorAmador0.infoDasAtividadesUtilizadorNumPeriodoQueRespeitamP(localDate0, localDate0, predicate0, biFunction0, (Utilizador) utilizadorProfissional0);
      assertEquals((-758), utilizadorAmador0.getFreqCardiaca());
      assertEquals((-758), utilizadorAmador0.getAltura());
      assertEquals("c0", utilizadorAmador0.getMorada());
      assertEquals(1, utilizadorAmador0.getCodUtilizador());
      assertEquals('\u0000', utilizadorProfissional0.getGenero());
      assertEquals("N0!_r3", utilizadorAmador0.getEmail());
      assertEquals('8', utilizadorAmador0.getGenero());
      assertEquals("N0!_r3", utilizadorAmador0.getNome());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertEquals(0, utilizadorProfissional0.getAltura());
      assertEquals(0, utilizadorProfissional0.getCodUtilizador());
      assertEquals((-758.0), utilizadorAmador0.getPeso(), 0.01);
      assertEquals(0, utilizadorProfissional0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = new PlanoTreino();
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      utilizadorAmador0.getPlanoTreinoId(2180);
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
      assertEquals('\u0000', utilizadorAmador0.getGenero());
      assertEquals(0, utilizadorAmador0.getFreqCardiaca());
      assertEquals(0, utilizadorAmador0.getAltura());
      assertEquals(0, utilizadorAmador0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      Btt btt0 = new Btt();
      utilizadorProfissional0.addAtividade(btt0);
      UtilizadorProfissional utilizadorProfissional1 = (UtilizadorProfissional)utilizadorProfissional0.clone();
      assertEquals(0, utilizadorProfissional1.getAltura());
      assertEquals(0, utilizadorProfissional1.getCodUtilizador());
      assertEquals('\u0000', utilizadorProfissional1.getGenero());
      assertEquals(0, utilizadorProfissional1.getFreqCardiaca());
      assertEquals(0.0, utilizadorProfissional0.getPeso(), 0.01);
      assertTrue(utilizadorProfissional1.equals((Object)utilizadorProfissional0));
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Period period0 = Period.ofDays(70);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("R%5", "R%5", "Tt$uNFTW!ySoBea=jHS", 70, 2869, 2869, localDate0, 'c');
      double double0 = utilizadorProfissional0.getBMR();
      assertEquals(46621.25, double0, 0.01);
      assertEquals(70, utilizadorProfissional0.getFreqCardiaca());
      assertEquals("Tt$uNFTW!ySoBea=jHS", utilizadorProfissional0.getEmail());
      assertEquals(1, utilizadorProfissional0.getCodUtilizador());
      assertEquals("R%5", utilizadorProfissional0.getMorada());
      assertEquals('c', utilizadorProfissional0.getGenero());
      assertEquals("R%5", utilizadorProfissional0.getNome());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      utilizadorAmador0.setGenero('F');
      double double0 = utilizadorAmador0.getBMR();
      assertEquals('F', utilizadorAmador0.getGenero());
      assertEquals((-161.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.setProximoCodigo(3198);
      assertEquals(0, utilizadorPraticanteOcasional0.getAltura());
      assertEquals(0, utilizadorPraticanteOcasional0.getFreqCardiaca());
      assertEquals(0.0, utilizadorPraticanteOcasional0.getPeso(), 0.01);
      assertEquals('\u0000', utilizadorPraticanteOcasional0.getGenero());
      assertEquals(0, utilizadorPraticanteOcasional0.getCodUtilizador());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      PlanoTreino planoTreino0 = new PlanoTreino();
      utilizadorAmador0.addPlanoTreino(planoTreino0);
      UtilizadorAmador utilizadorAmador1 = (UtilizadorAmador)utilizadorAmador0.clone();
      assertTrue(utilizadorAmador1.equals((Object)utilizadorAmador0));
      assertEquals(0, utilizadorAmador1.getAltura());
      assertEquals(0, utilizadorAmador1.getFreqCardiaca());
      assertEquals('\u0000', utilizadorAmador1.getGenero());
      assertEquals(0, utilizadorAmador1.getCodUtilizador());
      assertEquals(0.0, utilizadorAmador0.getPeso(), 0.01);
  }
}
