/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 11:38:46 GMT 2025
 */

package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.example.Atividade;
import org.example.LegPress;
import org.example.Utilizador;
import org.example.UtilizadorAmador;
import org.example.UtilizadorPraticanteOcasional;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LegPress_ESTest extends LegPress_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Month month0 = Month.SEPTEMBER;
      LocalDate localDate0 = MockLocalDate.of(7, month0, 7);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(7);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, 1767, 1767, (-1912.81671108884));
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("Atividade\nId: 1\nData e hora: 07/09/0007 00:00:07\nDura\u00E7ao: 00:00:07\nFrequencia Cardiaca: 1767 bpm\nRepeti\u00E7oes: 1767\nPeso: -1912.81671108884 kilos\nTipo de atividade: Leg press\n", ",jK/Z", "Atividade\nId: 1\nData e hora: 07/09/0007 00:00:07\nDura\u00E7ao: 00:00:07\nFrequencia Cardiaca: 1767 bpm\nRepeti\u00E7oes: 1767\nPeso: -1912.81671108884 kilos\nTipo de atividade: Leg press\n", 2708, 1255, 1767, localDate0, '9');
      utilizadorPraticanteOcasional0.addAtividade(legPress0);
      LegPress legPress1 = (LegPress)legPress0.geraAtividade(utilizadorPraticanteOcasional0, 0.25);
      assertEquals(0, legPress1.getRepeticoes());
      assertEquals((-1530.253368871072), legPress1.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      legPress0.setProximoCodigo(0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      Atividade atividade0 = legPress0.geraAtividade(utilizadorPraticanteOcasional0, 545);
      assertTrue(atividade0.equals((Object)legPress0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Month month0 = Month.SEPTEMBER;
      LocalDate localDate0 = MockLocalDate.of(7, month0, 7);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(7);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, 1767, 1767, (-1912.81671108884));
      legPress0.setProximoCodigo((-3421));
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("Atividade\nId: 1\nData e hora: 07/09/0007 00:00:07\nDura\u00E7ao: 00:00:07\nFrequencia Cardiaca: 1767 bpm\nRepeti\u00E7oes: 1767\nPeso: -1912.81671108884 kilos\nTipo de atividade: Leg press\n", ",jK/Z", "Atividade\nId: 1\nData e hora: 07/09/0007 00:00:07\nDura\u00E7ao: 00:00:07\nFrequencia Cardiaca: 1767 bpm\nRepeti\u00E7oes: 1767\nPeso: -1912.81671108884 kilos\nTipo de atividade: Leg press\n", 2708, 1255, 1767, localDate0, '9');
      LegPress legPress1 = (LegPress)legPress0.geraAtividade(utilizadorPraticanteOcasional0, 0.25);
      assertEquals(0, legPress1.getRepeticoes());
      assertEquals(1255.0, legPress1.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(0, 4, 4);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, (-1), 0, (-1));
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "|E@w(mpbU", "|E@w(mpbU", 0, (-1), 4, localDate0, '\'');
      double double0 = legPress0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals(17.81135416666666, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Month month0 = Month.SEPTEMBER;
      LocalDate localDate0 = MockLocalDate.of(7, month0, 7);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(7);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, 1767, 1767, (-1912.81671108884));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("4XczzHZF?4//{DrL{", "Atividade\nId: 1\nData e hora: 07/09/0007 00:00:07\nDura\u00E7ao: 00:00:07\nFrequencia Cardiaca: 1767 bpm\nRepeti\u00E7oes: 1767\nPeso: -1912.81671108884 kilos\nTipo de atividade: Leg press\n", "Atividade\nId: 1\nData e hora: 07/09/0007 00:00:07\nDura\u00E7ao: 00:00:07\nFrequencia Cardiaca: 1767 bpm\nRepeti\u00E7oes: 1767\nPeso: -1912.81671108884 kilos\nTipo de atividade: Leg press\n", 2708, (-2146367701), 2914, localDate0, '9');
      double double0 = legPress0.consumoCalorias(utilizadorAmador0);
      assertEquals((-3.526596746569745E8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.of(1, 1, 1);
      LegPress legPress0 = new LegPress((LocalDateTime) null, localTime0, 41, 1, 0.0);
      // Undeclared exception!
      try { 
        legPress0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      // Undeclared exception!
      try { 
        legPress0.geraAtividade((Utilizador) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.LegPress", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LegPress legPress0 = new LegPress((LocalDateTime) null, (LocalTime) null, 5, 0, 0);
      LegPress legPress1 = new LegPress(legPress0);
      // Undeclared exception!
      try { 
        legPress0.equals(legPress1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      // Undeclared exception!
      try { 
        legPress0.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.LegPress", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        legPress0.consumoCalorias(utilizadorPraticanteOcasional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.example.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LegPress legPress0 = null;
      try {
        legPress0 = new LegPress((LegPress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      LegPress legPress1 = new LegPress(legPress0);
      boolean boolean0 = legPress0.equals(legPress1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      boolean boolean0 = legPress0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      boolean boolean0 = legPress0.equals(legPress0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.of(8, 8, 8);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, 8, 8, 8);
      boolean boolean0 = legPress0.equals(localDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      LocalTime localTime0 = MockLocalTime.of(8, 8, 8);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, 8, 8, 8);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("Atividade\nId: 2\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Leg press\n", "Atividade\nId: 2\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Leg press\n", "Atividade\nId: 2\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Leg press\n", 8, 8, 8, localDate0, 'K');
      utilizadorPraticanteOcasional0.addAtividade(legPress0);
      LegPress legPress1 = (LegPress)legPress0.geraAtividade(utilizadorPraticanteOcasional0, 8);
      assertEquals(6.4, legPress1.getPeso(), 0.01);
      assertEquals(265, legPress1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.of(8, 8, 8);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, 8, 8, 8);
      String string0 = legPress0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 08:08:08\nFrequencia Cardiaca: 8 bpm\nRepeti\u00E7oes: 8\nPeso: 8.0 kilos\nTipo de atividade: Leg press\n", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      Object object0 = legPress0.clone();
      assertNotSame(object0, legPress0);
  }
}
