/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 11:40:43 GMT 2025
 */

package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.example.Btt;
import org.example.Utilizador;
import org.example.UtilizadorAmador;
import org.example.UtilizadorPraticanteOcasional;
import org.example.UtilizadorProfissional;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Btt_ESTest extends Btt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Btt btt0 = new Btt();
      btt0.setAltimetria(1000.0);
      double double0 = btt0.getFatorHard();
      assertEquals(1.05, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Period period0 = Period.ofMonths(0);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      LocalTime localTime0 = MockLocalTime.of(0, 0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Btt btt0 = new Btt(localDateTime0, localTime0, 1, 0, 0.0);
      String string0 = btt0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 00:00:00\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 1 bpm\nDistancia: 0.0 metros\nAltimetria: 0.0 metros\nTipo de atividade: BTT\n", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Btt btt0 = new Btt();
      btt0.setProximoCodigo(0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Btt btt1 = (Btt)btt0.geraAtividade(utilizadorAmador0, 1585.057956023363);
      assertEquals(0.0, btt1.getAltimetria(), 0.01);
      assertEquals(0, btt1.getFreqCardiaca());
      assertEquals(2.25485782935E10, btt1.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Btt btt0 = new Btt();
      Period period0 = Period.ofYears((-1649));
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(1);
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((String) null, "org.example.BenchPress", "org.example.BenchPress", (-1649), (-6940), 1, localDate0, '&');
      btt0.setProximoCodigo((-2144577716));
      Btt btt1 = (Btt)btt0.geraAtividade(utilizadorPraticanteOcasional0, 0.11);
      assertTrue(btt1.equals((Object)btt0));
      assertEquals(0.0, btt1.getFatorAltimetria(), 0.01);
      assertEquals(0.0, btt1.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.of(22, 22, 22);
      Btt btt0 = new Btt((LocalDateTime) null, localTime0, 22, 1972.36659899, 22);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("!k)c.Ncmpw p)Xq$C", "org.example.Btt", "7^XhZf[JnN}z8{", 22, (-2144577716), (-2144577716), localDate0, '<');
      double double0 = btt0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals(9.936716849325189E10, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.of(22, 22, 22);
      Btt btt0 = new Btt((LocalDateTime) null, localTime0, 22, 1972.36659899, 2000.0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("!k)c.Ncmpw p)Xq$C", "org.example.Btt", "7^XhZf[JnN}z8{", 22, (-2144577716), (-2144577716), localDate0, '<');
      double double0 = btt0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals((-2.606552604393645E11), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.of(22, 22, 22);
      Btt btt0 = new Btt((LocalDateTime) null, localTime0, 22, 1972.36659899, 22);
      // Undeclared exception!
      try { 
        btt0.geraAtividade((Utilizador) null, 1972.36659899);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Btt", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Btt btt0 = new Btt((LocalDateTime) null, (LocalTime) null, 1223, 1082.825762912225, 1223);
      Btt btt1 = new Btt((LocalDateTime) null, (LocalTime) null, (-2144577716), (-2143.0942243), (-9.0));
      // Undeclared exception!
      try { 
        btt0.equals(btt1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Btt btt0 = new Btt();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        btt0.consumoCalorias(utilizadorPraticanteOcasional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Btt btt0 = null;
      try {
        btt0 = new Btt((Btt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Btt btt0 = new Btt();
      boolean boolean0 = btt0.equals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nAltimetria: 0.0 metros\nTipo de atividade: BTT\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.of(6, 6);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(6, 6, 6, 6, 6, 6, 6);
      Btt btt0 = new Btt(localDateTime0, localTime0, 6, 6, 6);
      Btt btt1 = new Btt(btt0);
      boolean boolean0 = btt0.equals(btt1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.of(6, 6);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(6, 6, 6, 6, 6, 6, 6);
      Btt btt0 = new Btt(localDateTime0, localTime0, 6, 6, 6);
      boolean boolean0 = btt0.equals(btt0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Btt btt0 = new Btt((LocalDateTime) null, (LocalTime) null, 1206, 1206, 1206);
      boolean boolean0 = btt0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      Btt btt0 = new Btt((LocalDateTime) null, localTime0, 11, 11, 2002.2127662065554);
      double double0 = btt0.getFatorHard();
      assertEquals(1.2500000000000002, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Btt btt0 = new Btt((LocalDateTime) null, (LocalTime) null, 1206, 1206, 1206);
      double double0 = btt0.getFatorHard();
      assertEquals(1.1500000000000001, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.of(6, 6);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(6, 6, 6, 6, 6, 6, 6);
      Btt btt0 = new Btt(localDateTime0, localTime0, 6, 6, 6);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      double double0 = btt0.consumoCalorias(utilizadorProfissional0);
      assertEquals(-0.0, double0, 0.01);
      assertEquals(1.05, btt0.getFatorHard(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Btt btt0 = new Btt();
      // Undeclared exception!
      try { 
        btt0.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Btt", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Btt btt0 = new Btt((LocalDateTime) null, (LocalTime) null, (-1298), (-1298), 1016.602201778);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      Btt btt1 = (Btt)btt0.geraAtividade(utilizadorPraticanteOcasional0, 1.0);
      assertEquals(2.25485782935E10, btt1.getDistancia(), 0.01);
      assertEquals(0, btt1.getFreqCardiaca());
      assertEquals(0.0, btt1.getFatorAltimetria(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Btt btt0 = new Btt((LocalDateTime) null, (LocalTime) null, (-1298), (-1298), 1016.602201778);
      // Undeclared exception!
      try { 
        btt0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Btt btt0 = new Btt((LocalDateTime) null, (LocalTime) null, (-1298), (-1298), 1016.602201778);
      Object object0 = btt0.clone();
      assertNotSame(object0, btt0);
  }
}
