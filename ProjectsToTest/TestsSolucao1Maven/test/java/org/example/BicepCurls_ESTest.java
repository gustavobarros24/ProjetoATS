/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 11:44:37 GMT 2025
 */

package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.example.Atividade;
import org.example.BicepCurls;
import org.example.Utilizador;
import org.example.UtilizadorPraticanteOcasional;
import org.example.UtilizadorProfissional;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BicepCurls_ESTest extends BicepCurls_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, (LocalTime) null, 1, (-6103), (-6103));
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "", "", (-229), (-6103), (-229), localDate0, 'd');
      utilizadorPraticanteOcasional0.addAtividade(bicepCurls0);
      BicepCurls bicepCurls1 = (BicepCurls)bicepCurls0.geraAtividade(utilizadorPraticanteOcasional0, 1);
      assertEquals(0, bicepCurls1.getRepeticoes());
      assertEquals((-4882.400000000001), bicepCurls1.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, (LocalTime) null, 1, 1, 1);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.addAtividade(bicepCurls0);
      BicepCurls bicepCurls1 = (BicepCurls)bicepCurls0.geraAtividade(utilizadorPraticanteOcasional0, 1);
      assertEquals(0, bicepCurls1.getRepeticoes());
      assertEquals(0.8, bicepCurls1.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      bicepCurls0.setProximoCodigo(0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      Atividade atividade0 = bicepCurls0.geraAtividade(utilizadorPraticanteOcasional0, 334);
      assertTrue(atividade0.equals((Object)bicepCurls0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      bicepCurls0.setProximoCodigo((-449));
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1105L);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional((String) null, "Utilizador\nCodigo de Utilizador: ", "Utilizador\nCodigo de Utilizador: ", (-449), 1, 1, localDate0, '2');
      BicepCurls bicepCurls1 = (BicepCurls)bicepCurls0.geraAtividade(utilizadorPraticanteOcasional0, (-449));
      assertEquals(1.0, bicepCurls1.getPeso(), 0.01);
      assertEquals((-8766), bicepCurls1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(2415L, 1, zoneOffset0);
      LocalTime localTime0 = MockLocalTime.of(1, 1);
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, 1, 1, (-0.08000000000000002));
      Period period0 = Period.of(1, 1, 1);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("Gly\"bjYWXQ=^%", "Gly\"bjYWXQ=^%", "Gly\"bjYWXQ=^%", 1, 1, 1, localDate0, 'R');
      double double0 = bicepCurls0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals(1.4813680555555555, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(5);
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, 70, 1769, 2749.0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      System.setCurrentTimeMillis(1L);
      double double0 = bicepCurls0.consumoCalorias(utilizadorProfissional0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(7L);
      BicepCurls bicepCurls0 = new BicepCurls((LocalDateTime) null, localTime0, 82, 82, 82);
      // Undeclared exception!
      try { 
        bicepCurls0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      // Undeclared exception!
      try { 
        bicepCurls0.geraAtividade((Utilizador) null, 2051.188);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.BicepCurls", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.of(1917, 1, 1, 1, 1, 7, 7);
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, (LocalTime) null, 3, 7, 7);
      BicepCurls bicepCurls1 = new BicepCurls(bicepCurls0);
      // Undeclared exception!
      try { 
        bicepCurls1.equals(bicepCurls0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      // Undeclared exception!
      try { 
        bicepCurls0.consumoCalorias(utilizadorProfissional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.example.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BicepCurls bicepCurls0 = null;
      try {
        bicepCurls0 = new BicepCurls((BicepCurls) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      BicepCurls bicepCurls1 = new BicepCurls(bicepCurls0);
      boolean boolean0 = bicepCurls1.equals(bicepCurls0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.of(1917, 1, 1, 1, 1, 7, 7);
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, (LocalTime) null, 3, 7, 7);
      boolean boolean0 = bicepCurls0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      boolean boolean0 = bicepCurls0.equals(bicepCurls0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      Period period0 = Period.ZERO;
      boolean boolean0 = bicepCurls0.equals(period0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, (LocalTime) null, 1, 1, 1);
      String string0 = bicepCurls0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: null\nFrequencia Cardiaca: 1 bpm\nRepeti\u00E7oes: 1\nPeso: 1.0 kilos\nTipo de atividade: Bicep curls\n", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, (LocalTime) null, 1, (-6103), (-6103));
      Object object0 = bicepCurls0.clone();
      assertNotSame(object0, bicepCurls0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, (LocalTime) null, 1, (-6103), (-6103));
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("", "", "", (-229), (-6103), (-229), localDate0, 'd');
      // Undeclared exception!
      try { 
        bicepCurls0.consumoCalorias(utilizadorPraticanteOcasional0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.AtivRepeticoes", e);
      }
  }
}
