/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 11:32:17 GMT 2025
 */

package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.chrono.IsoChronology;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.example.Atividade;
import org.example.BenchPress;
import org.example.BicepCurls;
import org.example.Btt;
import org.example.Ciclismo;
import org.example.Flexoes;
import org.example.LegPress;
import org.example.PlanoTreino;
import org.example.Trail;
import org.example.UtilizadorAmador;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PlanoTreino_ESTest extends PlanoTreino_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      LocalDate localDate0 = MockLocalDate.now();
      LocalDate localDate1 = planoTreino0.getDataRealizacao();
      planoTreino0.planoTreinoNumPeriodo(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1149L);
      planoTreino0.setDataRealizacao(localDate0);
      PlanoTreino planoTreino1 = new PlanoTreino(localDate0);
      planoTreino0.compareTo(planoTreino1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "iB(`kqNCJ7^", "iB(`kqNCJ7^", 0, 183, 183, localDate0, 'r');
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(183);
      PlanoTreino planoTreino1 = utilizadorAmador0.getPlanoTreinoId(963);
      planoTreino0.compareTo(planoTreino1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Period period0 = Period.ofWeeks((-888));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("\nData de realiza\u00E7ao: ", ">", "\nData de realiza\u00E7ao: ", (-888), (-888), 4979, localDate0, 'R');
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(729);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      Btt btt0 = new Btt();
      linkedList0.add((Atividade) btt0);
      linkedList0.add((Atividade) btt0);
      linkedList0.add((Atividade) btt0);
      // Undeclared exception!
      try { 
        planoTreino0.geraPlanoTreino(utilizadorAmador0, linkedList0, 5, 5, (-1054.30379865868), localDate0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1149L);
      Ciclismo ciclismo0 = new Ciclismo();
      planoTreino0.addAtividade(ciclismo0, (-4144));
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) localDate0);
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1149L);
      LocalDate localDate1 = MockLocalDate.now();
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) localDate0);
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate1, predicate0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      Period period0 = Period.between(localDate0, localDate0);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate1 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("dd/MM/yyyy", "7_kf}C\"vum21", "dd/MM/yyyy", 0, 0, 0, localDate1, '%');
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(0);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0, localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino((LocalDate) null);
      planoTreino0.getDataRealizacao();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.getCodPlano();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.getAtividades();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "iB(`kqNCJ7^", "iB(`kqNCJ7^", 0, 183, 183, localDate0, 'r');
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(183);
      PlanoTreino planoTreino1 = new PlanoTreino(localDate0);
      planoTreino0.compareTo(planoTreino1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino((LocalDate) null);
      // Undeclared exception!
      try { 
        planoTreino0.planoTreinoNumPeriodo((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      // Undeclared exception!
      try { 
        planoTreino0.getAtividadesNumPeriodo((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      // Undeclared exception!
      try { 
        planoTreino0.compareTo((PlanoTreino) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.PlanoTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      ZoneId zoneId0 = ZoneId.systemDefault();
      Clock clock0 = MockClock.tickMinutes(zoneId0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      BenchPress benchPress0 = new BenchPress(localDateTime0, (LocalTime) null, 5, 5, 5);
      planoTreino0.addAtividade(benchPress0, 6);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      // Undeclared exception!
      try { 
        planoTreino0.caloriasDispendidas(utilizadorAmador0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "\nNome: ", (-860), 334, (-860), (LocalDate) null, '#');
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId((-860));
      // Undeclared exception!
      try { 
        planoTreino0.atividadesQueRespeitamP((LocalDate) null, (LocalDate) null, (Predicate<Atividade>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      // Undeclared exception!
      try { 
        planoTreino0.addAtividade((Atividade) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.PlanoTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      PlanoTreino planoTreino1 = null;
      try {
        planoTreino1 = new PlanoTreino(planoTreino0, (LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PlanoTreino planoTreino0 = null;
      try {
        planoTreino0 = new PlanoTreino((PlanoTreino) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.PlanoTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      LegPress legPress0 = new LegPress();
      planoTreino0.addAtividade(legPress0, 0);
      planoTreino0.getAtividades();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      LegPress legPress0 = new LegPress();
      planoTreino0.addAtividade(legPress0, 0);
      planoTreino0.getAtividadesNumPeriodo(localDate0, localDate0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      PlanoTreino planoTreino1 = new PlanoTreino(planoTreino0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      planoTreino0.getCodPlano();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino((LocalDate) null);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      BicepCurls bicepCurls0 = new BicepCurls(localDateTime0, localTime0, 0, 0, (-1.0));
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, bicepCurls0);
      planoTreino_AtividadeIteracoes0.clone();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      LegPress legPress0 = new LegPress();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, legPress0);
      planoTreino_AtividadeIteracoes0.getAtividade();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Ciclismo ciclismo0 = new Ciclismo();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, ciclismo0);
      planoTreino_AtividadeIteracoes0.getIteracoes();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Ciclismo ciclismo0 = new Ciclismo();
      planoTreino0.addAtividade(ciclismo0, 0);
      planoTreino0.toString();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Period period0 = Period.ofWeeks((-888));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("\nData de realiza\u00E7ao: ", ">", "\nData de realiza\u00E7ao: ", (-888), (-888), 4979, localDate0, 'R');
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(729);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      linkedList0.offer((Atividade) null);
      // Undeclared exception!
      try { 
        planoTreino0.geraPlanoTreino(utilizadorAmador0, linkedList0, 'R', 'R', (-1054.30379865868), localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.PlanoTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Period period0 = Period.ofWeeks((-888));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("\nData de realiza\u00E7ao: ", ">", "\nData de realiza\u00E7ao: ", (-888), (-888), 4979, localDate0, 'R');
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(729);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      Flexoes flexoes0 = new Flexoes();
      linkedList0.add((Atividade) flexoes0);
      planoTreino0.geraPlanoTreino(utilizadorAmador0, linkedList0, 18, 18, (-1054.30379865868), localDate0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      LocalDate localDate0 = MockLocalDate.now();
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId((-1588));
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) null);
      UnaryOperator<Atividade> unaryOperator0 = UnaryOperator.identity();
      List<Atividade> list0 = utilizadorAmador0.infoDasAtividadesNumPeriodoQueRespeitamP(localDate0, localDate0, predicate0, (Function<Atividade, Atividade>) unaryOperator0);
      // Undeclared exception!
      planoTreino0.geraPlanoTreino(utilizadorAmador0, list0, 0, 3, 0.0, localDate0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Period period0 = Period.ofWeeks((-888));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("\nData de realiza\u00E7ao: ", "E", "\nData de realiza\u00E7ao: ", (-888), (-888), 4979, localDate0, 'R');
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(729);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      Btt btt0 = new Btt();
      linkedList0.add((Atividade) btt0);
      planoTreino0.geraPlanoTreino(utilizadorAmador0, linkedList0, (-35), (-35), (-1054.30379865868), localDate0);
      assertEquals(0, planoTreino0.getCodPlano());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Period period0 = Period.ofWeeks((-888));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("\nData de realiza\u00E7ao: ", ">", "\nData de realiza\u00E7ao: ", (-888), (-888), 4979, localDate0, 'R');
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(729);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      Btt btt0 = new Btt();
      linkedList0.add((Atividade) btt0);
      // Undeclared exception!
      try { 
        planoTreino0.geraPlanoTreino(utilizadorAmador0, linkedList0, 18, 18, (-1054.30379865868), localDate0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Period period0 = Period.ofWeeks((-888));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("\nData de realiza\u00E7ao: ", ">", "\nData de realiza\u00E7ao: ", (-888), (-888), 4979, localDate0, 'R');
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(729);
      LinkedList<Atividade> linkedList0 = new LinkedList<Atividade>();
      Trail trail0 = new Trail();
      linkedList0.add((Atividade) trail0);
      Btt btt0 = new Btt();
      linkedList0.add((Atividade) btt0);
      linkedList0.add((Atividade) btt0);
      linkedList0.add((Atividade) btt0);
      // Undeclared exception!
      try { 
        planoTreino0.geraPlanoTreino(utilizadorAmador0, linkedList0, 'R', 'R', (-1054.30379865868), localDate0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Ciclismo ciclismo0 = new Ciclismo();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      planoTreino0.addAtividade(ciclismo0, 0);
      // Undeclared exception!
      try { 
        planoTreino0.caloriasDispendidas(utilizadorAmador0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Period period0 = Period.ofWeeks((-888));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("\nData de realiza\u00E7ao: ", ">", "\nData de realiza\u00E7ao: ", (-888), (-888), 4979, localDate0, 'R');
      PlanoTreino planoTreino0 = utilizadorAmador0.getPlanoTreinoId(729);
      double double0 = planoTreino0.caloriasDispendidas(utilizadorAmador0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, planoTreino0.getCodPlano());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      LocalDate localDate0 = MockLocalDate.now();
      Ciclismo ciclismo0 = new Ciclismo();
      planoTreino0.addAtividade(ciclismo0, 25);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) localDate0);
      Predicate<Atividade> predicate1 = predicate0.negate();
      List<Atividade> list0 = planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate1);
      assertTrue(list0.isEmpty());
      assertEquals(0, planoTreino0.getCodPlano());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      LocalDate localDate0 = MockLocalDate.now();
      Ciclismo ciclismo0 = new Ciclismo();
      planoTreino0.addAtividade(ciclismo0, 25);
      Predicate<Atividade> predicate0 = Predicate.isEqual((Object) localDate0);
      planoTreino0.atividadesQueRespeitamP(localDate0, localDate0, predicate0);
      assertEquals(0, planoTreino0.getCodPlano());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Ciclismo ciclismo0 = new Ciclismo();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes((-41), ciclismo0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      boolean boolean0 = planoTreino_AtividadeIteracoes0.equals(planoTreino_AtividadeIteracoes1);
      assertTrue(boolean0);
      assertEquals((-41), planoTreino_AtividadeIteracoes1.getIteracoes());
      assertEquals(0, planoTreino0.getCodPlano());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(22, (Atividade) null);
      boolean boolean0 = planoTreino_AtividadeIteracoes0.equals(planoTreino0);
      assertFalse(boolean0);
      assertEquals(0, planoTreino0.getCodPlano());
      assertEquals(22, planoTreino_AtividadeIteracoes0.getIteracoes());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(22, (Atividade) null);
      boolean boolean0 = planoTreino_AtividadeIteracoes0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(22, planoTreino_AtividadeIteracoes0.getIteracoes());
      assertEquals(0, planoTreino0.getCodPlano());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Ciclismo ciclismo0 = new Ciclismo();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes((-41), ciclismo0);
      boolean boolean0 = planoTreino_AtividadeIteracoes0.equals(planoTreino_AtividadeIteracoes0);
      assertEquals(0, planoTreino0.getCodPlano());
      assertTrue(boolean0);
      assertEquals((-41), planoTreino_AtividadeIteracoes0.getIteracoes());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      Ciclismo ciclismo0 = new Ciclismo();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, ciclismo0);
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes1 = planoTreino0.new AtividadeIteracoes(planoTreino_AtividadeIteracoes0);
      assertTrue(planoTreino_AtividadeIteracoes1.equals((Object)planoTreino_AtividadeIteracoes0));
      
      Flexoes flexoes0 = new Flexoes();
      planoTreino_AtividadeIteracoes0.setAtividade(flexoes0);
      boolean boolean0 = planoTreino_AtividadeIteracoes0.equals(planoTreino_AtividadeIteracoes1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      planoTreino0.setProximoCodigo(5);
      assertEquals(0, planoTreino0.getCodPlano());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PlanoTreino planoTreino0 = new PlanoTreino();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1149L);
      planoTreino0.setDataRealizacao(localDate0);
      PlanoTreino planoTreino1 = new PlanoTreino();
      int int0 = planoTreino0.compareTo(planoTreino1);
      assertEquals((-41), int0);
      assertEquals(0, planoTreino1.getCodPlano());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      LegPress legPress0 = new LegPress();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, legPress0);
      planoTreino_AtividadeIteracoes0.setIteracoes(3622);
      assertEquals(3622, planoTreino_AtividadeIteracoes0.getIteracoes());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      LegPress legPress0 = new LegPress();
      PlanoTreino.AtividadeIteracoes planoTreino_AtividadeIteracoes0 = planoTreino0.new AtividadeIteracoes(0, legPress0);
      String string0 = planoTreino_AtividadeIteracoes0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Leg press\nIteracoes: 0\n", string0);
      assertEquals(1, planoTreino0.getCodPlano());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      PlanoTreino planoTreino0 = new PlanoTreino(localDate0);
      LegPress legPress0 = new LegPress();
      planoTreino0.addAtividade(legPress0, 0);
      PlanoTreino planoTreino1 = (PlanoTreino)planoTreino0.clone();
      assertEquals(1, planoTreino1.getCodPlano());
      assertEquals(1, planoTreino0.getCodPlano());
      assertNotSame(planoTreino1, planoTreino0);
  }
}
