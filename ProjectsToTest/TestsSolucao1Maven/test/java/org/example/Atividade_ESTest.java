/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 11:36:49 GMT 2025
 */

package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.example.Abdominais;
import org.example.Atividade;
import org.example.BenchPress;
import org.example.BicepCurls;
import org.example.Btt;
import org.example.Ciclismo;
import org.example.Corrida;
import org.example.Flexoes;
import org.example.LegPress;
import org.example.Trail;
import org.example.Utilizador;
import org.example.UtilizadorAmador;
import org.example.UtilizadorPraticanteOcasional;
import org.example.UtilizadorProfissional;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Atividade_ESTest extends Atividade_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Month month0 = Month.OCTOBER;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(10, month0, 10, 10, 10, 0, 0);
      Flexoes flexoes0 = new Flexoes(localDateTime0, (LocalTime) null, (-3715), 0);
      Trail trail0 = new Trail();
      int int0 = trail0.compareTo((Atividade) flexoes0);
      assertEquals(2, trail0.getCodAtividade());
      assertEquals(2004, int0);
      assertEquals(0, trail0.getFreqCardiaca());
      assertEquals((-3715), flexoes0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      Abdominais abdominais1 = new Abdominais(abdominais0);
      abdominais1.setFreqCardiaca((-1));
      boolean boolean0 = abdominais0.equals(abdominais1);
      assertEquals((-1), abdominais1.getFreqCardiaca());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      String string0 = ciclismo0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nDistancia: 0.0 metros\nTipo de atividade: Ciclismo\n", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Btt btt0 = new Btt();
      btt0.getTempo();
      assertEquals(0, btt0.getFreqCardiaca());
      assertEquals(1, btt0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.of(0, 0, 0);
      Corrida corrida0 = new Corrida((LocalDateTime) null, localTime0, 2038, 0);
      int int0 = corrida0.getFreqCardiaca();
      assertEquals(2038, int0);
      assertEquals(1, corrida0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Trail trail0 = new Trail();
      trail0.setFreqCardiaca((-4197));
      int int0 = trail0.getFreqCardiaca();
      assertEquals((-4197), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.of(1, 1, 1, 1, 1);
      Abdominais abdominais0 = new Abdominais(localDateTime0, (LocalTime) null, 1, 1);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("ksg.XoyK[Ov", "ksg.XoyK[Ov", "ksg.XoyK[Ov", 3121, (-432), 1, localDate0, '/');
      double double0 = abdominais0.getFatorFreqCardiaca(utilizadorPraticanteOcasional0);
      assertEquals(1, abdominais0.getCodAtividade());
      assertEquals(1247.6000000000001, double0, 0.01);
      assertEquals(1, abdominais0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      benchPress0.setFreqCardiaca(1508);
      double double0 = benchPress0.getFatorFreqCardiaca(utilizadorProfissional0);
      assertEquals(1508, benchPress0.getFreqCardiaca());
      assertEquals((-0.8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Month month0 = Month.OCTOBER;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(10, month0, 10, 10, 10, 10, 0);
      Abdominais abdominais0 = new Abdominais(localDateTime0, (LocalTime) null, (-3715), 0);
      abdominais0.setProximoCodigo((-2004));
      assertEquals(1, abdominais0.getCodAtividade());
      assertEquals((-3715), abdominais0.getFreqCardiaca());
      
      Ciclismo ciclismo0 = new Ciclismo();
      int int0 = ciclismo0.getCodAtividade();
      assertEquals(0, ciclismo0.getFreqCardiaca());
      assertEquals((-2004), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Trail trail0 = new Trail();
      trail0.setProximoCodigo(0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      Atividade atividade0 = trail0.geraAtividade(utilizadorPraticanteOcasional0, 0);
      assertEquals(1, trail0.getCodAtividade());
      assertEquals(0, atividade0.getCodAtividade());
      assertTrue(atividade0.equals((Object)trail0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(zoneId0);
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(0L);
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, 0, (-1224), 4769.41391);
      Ciclismo ciclismo0 = new Ciclismo(localDateTime0, localTime0, (-1726), 1392.1262253);
      ciclismo0.setProximoCodigo((-1726));
      assertEquals(2, ciclismo0.getCodAtividade());
      assertEquals((-1726), ciclismo0.getFreqCardiaca());
      
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Atividade atividade0 = legPress0.geraAtividade(utilizadorAmador0, 4769.41391);
      assertEquals((-1726), atividade0.getCodAtividade());
      assertEquals(0, atividade0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      legPress0.equals(legPress0);
      assertEquals(1, legPress0.getCodAtividade());
      assertEquals(0, legPress0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Month month0 = Month.OCTOBER;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(10, month0, 10, 10, 10, 0, 0);
      Flexoes flexoes0 = new Flexoes(localDateTime0, (LocalTime) null, (-3715), 0);
      flexoes0.equals((Object) null);
      assertEquals(1, flexoes0.getCodAtividade());
      assertEquals((-3715), flexoes0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      Ciclismo ciclismo0 = new Ciclismo((LocalDateTime) null, localTime0, (-695), 2.0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      double double0 = ciclismo0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals(-0.0, double0, 0.01);
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals((-695), ciclismo0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.of(1, 1);
      Corrida corrida0 = new Corrida(localDateTime0, localTime0, (-413), 0.0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("(elUMvq", "(elUMvq", "(elUMvq", (-353), 4, (-161), localDate0, 'D');
      double double0 = corrida0.consumoCalorias(utilizadorAmador0);
      assertEquals((-413), corrida0.getFreqCardiaca());
      assertEquals(1, corrida0.getCodAtividade());
      assertEquals(92.99619444444446, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      int int0 = flexoes0.compareTo((Atividade) flexoes0);
      assertEquals(0, flexoes0.getFreqCardiaca());
      assertEquals(0, int0);
      assertEquals(1, flexoes0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      LegPress legPress1 = new LegPress();
      int int0 = legPress1.compareTo((Atividade) legPress0);
      assertEquals(0, legPress1.getFreqCardiaca());
      assertEquals(1, int0);
      assertEquals(2, legPress1.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      Ciclismo ciclismo1 = (Ciclismo)ciclismo0.clone();
      assertEquals(0, ciclismo1.getFreqCardiaca());
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(1, ciclismo1.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        bicepCurls0.getFatorFreqCardiaca(utilizadorPraticanteOcasional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      // Undeclared exception!
      try { 
        corrida0.geraAtividade((Utilizador) null, (-3049.442));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Corrida", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      Corrida corrida1 = new Corrida();
      corrida0.setDataRealizacao((LocalDateTime) null);
      // Undeclared exception!
      try { 
        corrida0.equals(corrida1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      // Undeclared exception!
      try { 
        corrida0.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Corrida", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      // Undeclared exception!
      try { 
        legPress0.consumoCalorias(utilizadorAmador0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.example.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Btt btt0 = new Btt();
      // Undeclared exception!
      try { 
        btt0.compareTo((Atividade) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Btt btt0 = new Btt((LocalDateTime) null, (LocalTime) null, 110, 110, 4636.59871898);
      btt0.getTempo();
      assertEquals(1, btt0.getCodAtividade());
      assertEquals(110, btt0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      int int0 = flexoes0.getCodAtividade();
      assertEquals(0, flexoes0.getFreqCardiaca());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Ciclismo ciclismo0 = new Ciclismo();
      int int0 = ciclismo0.getFreqCardiaca();
      assertEquals(1, ciclismo0.getCodAtividade());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      corrida0.getDataRealizacao();
      assertEquals(0, corrida0.getFreqCardiaca());
      assertEquals(1, corrida0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      Flexoes flexoes0 = new Flexoes();
      int int0 = abdominais0.compareTo((Atividade) flexoes0);
      assertEquals((-1), int0);
      assertEquals(0, flexoes0.getFreqCardiaca());
      assertEquals(2, flexoes0.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.of(1, 1, 1, 1, 1);
      Abdominais abdominais0 = new Abdominais(localDateTime0, (LocalTime) null, 1, 1);
      Trail trail0 = new Trail();
      int int0 = abdominais0.compareTo((Atividade) trail0);
      assertEquals(0, trail0.getFreqCardiaca());
      assertEquals(2, trail0.getCodAtividade());
      assertEquals(1, abdominais0.getFreqCardiaca());
      assertEquals((-2013), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      Corrida corrida1 = new Corrida(corrida0);
      assertTrue(corrida1.equals((Object)corrida0));
      
      corrida0.setDataRealizacao((LocalDateTime) null);
      boolean boolean0 = corrida1.equals(corrida0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      LocalTime localTime0 = MockLocalTime.now();
      corrida0.setTempo(localTime0);
      Corrida corrida1 = new Corrida();
      boolean boolean0 = corrida0.equals(corrida1);
      assertFalse(boolean0);
      assertEquals(0, corrida1.getFreqCardiaca());
      assertEquals(2, corrida1.getCodAtividade());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      Abdominais abdominais1 = new Abdominais();
      abdominais1.setFreqCardiaca((-1));
      boolean boolean0 = abdominais1.equals(abdominais0);
      assertEquals((-1), abdominais1.getFreqCardiaca());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      BicepCurls bicepCurls0 = new BicepCurls();
      Atividade atividade0 = bicepCurls0.geraAtividade(utilizadorPraticanteOcasional0, 1489);
      assertEquals(2, atividade0.getCodAtividade());
      assertTrue(atividade0.equals((Object)bicepCurls0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Corrida corrida0 = new Corrida();
      corrida0.setDataRealizacao((LocalDateTime) null);
      corrida0.getDataRealizacao();
      assertEquals(1, corrida0.getCodAtividade());
      assertEquals(0, corrida0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Btt btt0 = new Btt();
      // Undeclared exception!
      try { 
        btt0.getFatorFreqCardiaca((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais((LocalDateTime) null, (LocalTime) null, 1996, 1260);
      // Undeclared exception!
      try { 
        abdominais0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      Abdominais abdominais1 = new Abdominais();
      boolean boolean0 = abdominais1.equals(abdominais0);
      assertTrue(boolean0);
      assertEquals(0, abdominais1.getFreqCardiaca());
      assertEquals(2, abdominais1.getCodAtividade());
  }
}
