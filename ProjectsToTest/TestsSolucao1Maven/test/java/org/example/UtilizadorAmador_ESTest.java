/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 11:50:30 GMT 2025
 */

package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.example.UtilizadorAmador;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UtilizadorAmador_ESTest extends UtilizadorAmador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Period period0 = Period.ofMonths(0);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate1 = MockIsoChronology.dateNow(isoChronology0, zoneId0);
      Object object0 = utilizadorAmador0.utilizadorNumPeriodo(localDate0, localDate1);
      assertNotSame(object0, utilizadorAmador0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("`:8J'fVC{%q", "`:8J'fVC{%q", "`:8J'fVC{%q", 1, 0, 1, (LocalDate) null, 'M');
      // Undeclared exception!
      try { 
        utilizadorAmador0.utilizadorNumPeriodo((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("F$(GK=*HTwhO.H", "F$(GK=*HTwhO.H", "F$(GK=*HTwhO.H", 4149, 77, 0, (LocalDate) null, 'B');
      // Undeclared exception!
      try { 
        utilizadorAmador0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("", "", "\nTipo de atividade: Trail\n", 0, 3, 43, (LocalDate) null, 'v');
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0);
      // Undeclared exception!
      try { 
        utilizadorAmador1.equals(utilizadorAmador0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("&a=", "&a=", "&a=", 6, 2014, (-1149), (LocalDate) null, '}');
      UtilizadorAmador utilizadorAmador1 = null;
      try {
        utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0, (LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = null;
      try {
        utilizadorAmador0 = new UtilizadorAmador((UtilizadorAmador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Period period0 = Period.of(355, (-1), (-1));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorAmador utilizadorAmador1 = new UtilizadorAmador(utilizadorAmador0, localDate0, localDate0);
      assertEquals(0, utilizadorAmador1.getAltura());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      boolean boolean0 = utilizadorAmador0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("!*O&W,e40|", "!*O&W,e40|", "!*O&W,e40|", (-59), (-59), (-59), localDate0, 'U');
      boolean boolean0 = utilizadorAmador0.equals(utilizadorAmador0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("!*O&W,e40|", "!*O&W,e40|", "!*O&W,e40|", (-59), (-59), (-59), localDate0, 'U');
      String string0 = utilizadorAmador0.toString();
      assertEquals("Utilizador\nCodigo de Utilizador: 1\nNome: !*O&W,e40|\nMorada: !*O&W,e40|\nEmail: !*O&W,e40|\nFrequencia Cardiaca: -59 bpm\nPeso: -59.0 kilos\nAltura: -59 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: U\nAtividades: \n\nPlanos de treino: \n\nTipo de Utilizador: Amador\n", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("!*O&W,e40|", "!*O&W,e40|", "!*O&W,e40|", (-59), (-59), (-59), localDate0, 'U');
      double double0 = utilizadorAmador0.getFatorMultiplicativo();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      boolean boolean0 = utilizadorAmador0.equals("Q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("!*O&W,e40|", "!*O&W,e40|", "!*O&W,e40|", (-59), (-59), (-59), localDate0, 'U');
      Object object0 = utilizadorAmador0.clone();
      assertNotSame(object0, utilizadorAmador0);
  }
}
