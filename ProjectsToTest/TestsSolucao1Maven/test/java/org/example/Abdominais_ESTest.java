/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 11:47:14 GMT 2025
 */

package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Period;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.example.Abdominais;
import org.example.LegPress;
import org.example.Utilizador;
import org.example.UtilizadorAmador;
import org.example.UtilizadorPraticanteOcasional;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Abdominais_ESTest extends Abdominais_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, 10, 10);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.setPeso((-149.386673697192));
      Abdominais abdominais1 = (Abdominais)abdominais0.geraAtividade(utilizadorPraticanteOcasional0, (-0.47330716133625295));
      assertEquals(0, abdominais1.getFreqCardiaca());
      assertEquals(7, abdominais1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, 0, (-1530));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      LegPress legPress0 = new LegPress(localDateTime0, localTime0, (-1530), (-1530), (-567525.1185));
      legPress0.setProximoCodigo(0);
      Abdominais abdominais1 = (Abdominais)abdominais0.geraAtividade(utilizadorAmador0, (-1836.601529));
      assertEquals(0, abdominais1.getFreqCardiaca());
      assertEquals(Integer.MIN_VALUE, abdominais1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      LegPress legPress0 = new LegPress();
      legPress0.setProximoCodigo((-3691));
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      Abdominais abdominais1 = (Abdominais)abdominais0.geraAtividade(utilizadorAmador0, 2316.0);
      assertEquals(Integer.MAX_VALUE, abdominais1.getRepeticoes());
      assertEquals(0, abdominais1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, 10, 10);
      Period period0 = Period.ofDays(10);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 10 bpm\nRepeti\u00E7oes: 10\nTipo de atividade: Abdominais\n", "org.example.Abdominais", "", 10, 1101, 0, localDate0, 'S');
      double double0 = abdominais0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals(18209.565156250002, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, 10, 10);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      utilizadorPraticanteOcasional0.setPeso((-149.386673697192));
      double double0 = abdominais0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals((-950.2781975003409), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.of(0, 0, 0);
      Abdominais abdominais0 = new Abdominais((LocalDateTime) null, localTime0, (-1), 0);
      // Undeclared exception!
      try { 
        abdominais0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      Abdominais abdominais1 = new Abdominais();
      abdominais0.setDataRealizacao((LocalDateTime) null);
      // Undeclared exception!
      try { 
        abdominais0.equals(abdominais1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      // Undeclared exception!
      try { 
        abdominais0.consumoCalorias((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Abdominais", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      // Undeclared exception!
      try { 
        abdominais0.consumoCalorias(utilizadorAmador0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.example.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Abdominais abdominais0 = null;
      try {
        abdominais0 = new Abdominais((Abdominais) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, 10, 10);
      Abdominais abdominais1 = new Abdominais(abdominais0);
      assertEquals(10, abdominais1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      boolean boolean0 = abdominais0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      boolean boolean0 = abdominais0.equals(abdominais0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, 10, 10);
      boolean boolean0 = abdominais0.equals(localTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, 10, 10);
      Object object0 = abdominais0.clone();
      boolean boolean0 = abdominais0.equals(object0);
      assertNotSame(object0, abdominais0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, 10, 10);
      String string0 = abdominais0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: 10 bpm\nRepeti\u00E7oes: 10\nTipo de atividade: Abdominais\n", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      Abdominais abdominais0 = new Abdominais(localDateTime0, localTime0, 10, 10);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      double double0 = abdominais0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Abdominais abdominais0 = new Abdominais();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("$Vl6SZcOY-yV", "$Vl6SZcOY-yV", (String) null, 0, 2062, 0, (LocalDate) null, '`');
      // Undeclared exception!
      try { 
        abdominais0.geraAtividade(utilizadorAmador0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Utilizador", e);
      }
  }
}
