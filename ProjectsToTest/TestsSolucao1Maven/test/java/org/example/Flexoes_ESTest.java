/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 11:48:52 GMT 2025
 */

package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.example.Atividade;
import org.example.Flexoes;
import org.example.Utilizador;
import org.example.UtilizadorAmador;
import org.example.UtilizadorPraticanteOcasional;
import org.example.UtilizadorProfissional;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Flexoes_ESTest extends Flexoes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds((-9), (-9), (-9));
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Flexoes flexoes0 = new Flexoes(localDateTime0, localTime0, (-9), 3555);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("<`Mt_nQ d\"!Gi?", "Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: -9 bpm\nRepeti\u00E7oes: 3555\nTipo de atividade: Flex\u00F5es\n", "=(`_G", 3555, 0, (-9), localDate0, ':');
      Flexoes flexoes1 = (Flexoes)flexoes0.geraAtividade(utilizadorProfissional0, (-9));
      assertEquals(0, flexoes1.getFreqCardiaca());
      assertEquals(2633, flexoes1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      utilizadorProfissional0.setAltura(1);
      Atividade atividade0 = flexoes0.geraAtividade(utilizadorProfissional0, 0.0);
      assertTrue(atividade0.equals((Object)flexoes0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador();
      flexoes0.setProximoCodigo(0);
      Flexoes flexoes1 = (Flexoes)flexoes0.geraAtividade(utilizadorAmador0, (-1834.59494749304));
      assertEquals(0, flexoes1.getFreqCardiaca());
      assertEquals(Integer.MIN_VALUE, flexoes1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      flexoes0.setProximoCodigo((-2614));
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      Flexoes flexoes1 = (Flexoes)flexoes0.geraAtividade(utilizadorPraticanteOcasional0, 8.0);
      assertEquals(Integer.MAX_VALUE, flexoes1.getRepeticoes());
      assertEquals(0, flexoes1.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Flexoes flexoes0 = new Flexoes(localDateTime0, localTime0, 5, 0);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      double double0 = flexoes0.consumoCalorias(utilizadorProfissional0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(1);
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      Flexoes flexoes0 = new Flexoes((LocalDateTime) null, localTime0, 1, 1);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("\nTipo de atividade: Flex\u00F5es\n", "+01:00", "I7M/2Bjo/6^{kBvJP @", 70, (-1092), 6, localDate0, 'P');
      double double0 = flexoes0.consumoCalorias(utilizadorPraticanteOcasional0);
      assertEquals((-960848.8275585937), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes((LocalDateTime) null, (LocalTime) null, (-1366), (-1366));
      // Undeclared exception!
      try { 
        flexoes0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      // Undeclared exception!
      try { 
        flexoes0.geraAtividade((Utilizador) null, 1476.39042);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Flexoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Flexoes flexoes0 = new Flexoes(localDateTime0, (LocalTime) null, 1, 1);
      Object object0 = flexoes0.clone();
      // Undeclared exception!
      try { 
        flexoes0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes((LocalDateTime) null, (LocalTime) null, 1, (-832));
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional();
      // Undeclared exception!
      try { 
        flexoes0.consumoCalorias(utilizadorPraticanteOcasional0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional();
      // Undeclared exception!
      try { 
        flexoes0.consumoCalorias(utilizadorProfissional0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.example.AtivRepeticoes", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Flexoes flexoes0 = null;
      try {
        flexoes0 = new Flexoes((Flexoes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes((LocalDateTime) null, (LocalTime) null, (-1366), (-1366));
      Flexoes flexoes1 = new Flexoes(flexoes0);
      assertEquals((-1366), flexoes1.getRepeticoes());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds((-9), (-9), (-9));
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Flexoes flexoes0 = new Flexoes(localDateTime0, localTime0, (-9), 3555);
      Object object0 = flexoes0.clone();
      flexoes0.equals(object0);
      assertNotSame(object0, flexoes0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      boolean boolean0 = flexoes0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds((-9), (-9), (-9));
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Flexoes flexoes0 = new Flexoes(localDateTime0, localTime0, (-9), 3555);
      boolean boolean0 = flexoes0.equals(flexoes0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.now();
      Flexoes flexoes0 = new Flexoes(localDateTime0, localTime0, (-1251), (-1251));
      boolean boolean0 = flexoes0.equals(localTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds((-9), (-9), (-9));
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      Flexoes flexoes0 = new Flexoes(localDateTime0, localTime0, (-9), 3555);
      UtilizadorProfissional utilizadorProfissional0 = new UtilizadorProfissional("<`Mt_nQ d\"!Gi?", "Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 20:21:21.320\nFrequencia Cardiaca: -9 bpm\nRepeti\u00E7oes: 3555\nTipo de atividade: Flex\u00F5es\n", "=(`_G", 3555, 0, (-9), localDate0, ':');
      double double0 = flexoes0.consumoCalorias(utilizadorProfissional0);
      assertEquals(26282.879492187498, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Flexoes flexoes0 = new Flexoes();
      String string0 = flexoes0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nTipo de atividade: Flex\u00F5es\n", string0);
  }
}
