/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 11:39:44 GMT 2025
 */

package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.example.BenchPress;
import org.example.BicepCurls;
import org.example.LegPress;
import org.example.Utilizador;
import org.example.UtilizadorAmador;
import org.example.UtilizadorPraticanteOcasional;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtivRepsPeso_ESTest extends AtivRepsPeso_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      BenchPress benchPress1 = new BenchPress(benchPress0);
      benchPress1.setPeso((-2851.3));
      boolean boolean0 = benchPress1.equals(benchPress0);
      assertEquals((-2851.3), benchPress1.getPeso(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      bicepCurls0.setPeso(1288.5890446582935);
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 1.0 kilos\nTipo de atividade: Bicep curls\n", "Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 1.0 kilos\nTipo de atividade: Bicep curls\n", "\nTipo de atividade: Ciclismo\n", 3297, 3297, (-206), localDate0, 'H');
      double double0 = bicepCurls0.getFatorPeso(utilizadorPraticanteOcasional0, (-206), (-41.211));
      assertEquals(1288.5890446582935, bicepCurls0.getPeso(), 0.01);
      assertEquals((-8505.572776802976), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      String string0 = bicepCurls0.toString();
      assertEquals("Atividade\nId: 1\nData e hora: 14/02/2014 20:21:21\nDura\u00E7ao: 00:00\nFrequencia Cardiaca: 0 bpm\nRepeti\u00E7oes: 0\nPeso: 0.0 kilos\nTipo de atividade: Bicep curls\n", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      bicepCurls0.setPeso(1288.5890446582935);
      double double0 = bicepCurls0.getPeso();
      assertEquals(1288.5890446582935, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      benchPress0.setPeso((-2851.3));
      double double0 = benchPress0.getPeso();
      assertEquals((-2851.3), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      UtilizadorAmador utilizadorAmador0 = new UtilizadorAmador("g}", "QhPP=8>", "QhPP=8>", 0, (-287), 0, localDate0, '!');
      BicepCurls bicepCurls0 = new BicepCurls();
      double double0 = bicepCurls0.getFatorPeso(utilizadorAmador0, 0, 0);
      assertEquals(0.0, bicepCurls0.getPeso(), 0.01);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      LocalDate localDate0 = MockLocalDate.ofYearDay(897, 1);
      UtilizadorPraticanteOcasional utilizadorPraticanteOcasional0 = new UtilizadorPraticanteOcasional("\nAtividades e suas itera\u00E7oes: \n", "org.example.AtivRepsPeso", "\nAtividades e suas itera\u00E7oes: \n", (-2758), 4, (-2758), localDate0, ']');
      double double0 = bicepCurls0.getFatorPeso(utilizadorPraticanteOcasional0, (-859.97739351), 897);
      assertEquals(771399.72197847, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LegPress legPress0 = new LegPress();
      legPress0.equals(legPress0);
      assertEquals(0.0, legPress0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalTime localTime0 = MockLocalTime.now(zoneId0);
      BicepCurls bicepCurls0 = new BicepCurls((LocalDateTime) null, localTime0, 70, 70, 70);
      BicepCurls bicepCurls1 = new BicepCurls(bicepCurls0);
      // Undeclared exception!
      try { 
        bicepCurls1.equals(bicepCurls0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      double double0 = benchPress0.getPeso();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      BenchPress benchPress1 = new BenchPress(benchPress0);
      benchPress1.setPeso(654.0);
      boolean boolean0 = benchPress1.equals(benchPress0);
      assertEquals(654.0, benchPress1.getPeso(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      BenchPress benchPress1 = new BenchPress();
      boolean boolean0 = benchPress0.equals(benchPress1);
      assertTrue(boolean0);
      assertEquals(0.0, benchPress1.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BenchPress benchPress0 = new BenchPress();
      BenchPress benchPress1 = new BenchPress();
      assertTrue(benchPress1.equals((Object)benchPress0));
      
      benchPress1.setFreqCardiaca(2144314164);
      boolean boolean0 = benchPress1.equals(benchPress0);
      assertFalse(benchPress1.equals((Object)benchPress0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BicepCurls bicepCurls0 = new BicepCurls();
      // Undeclared exception!
      try { 
        bicepCurls0.getFatorPeso((Utilizador) null, 5044.0, 579L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.AtivRepsPeso", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.of(0, 0);
      BenchPress benchPress0 = new BenchPress((LocalDateTime) null, localTime0, 0, (-287), 0);
      // Undeclared exception!
      try { 
        benchPress0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }
}
