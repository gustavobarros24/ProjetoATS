/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 04 11:29:57 GMT 2025
 */

package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StreamCorruptedException;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.util.List;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.example.Atividade;
import org.example.BenchPress;
import org.example.Btt;
import org.example.Flexoes;
import org.example.GestorDesportivo;
import org.example.LegPress;
import org.example.PlanoTreino;
import org.example.Utilizador;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GestorDesportivo_ESTest extends GestorDesportivo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Period period0 = Period.ofMonths((-2045));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      LocalDate localDate1 = MockLocalDate.ofEpochDay(1356L);
      // Undeclared exception!
      try { 
        gestorDesportivo0.metrosAltimetria(0, localDate1, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Month month0 = Month.OCTOBER;
      LocalDate localDate1 = MockLocalDate.of(1245, month0, 6);
      // Undeclared exception!
      try { 
        gestorDesportivo0.kmsPercorridos(1245, localDate0, localDate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivRepsPesoPlano((-1082), (-1082), localDateTime0, localTime0, (-1082), 765, (-2760.140087), 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalTime localTime0 = MockLocalTime.of(1, 1, 1);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivRepsPesoPlano(77, 1, (LocalDateTime) null, localTime0, (-807), 0, 1, 2036);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivRepPlano((-1082), (-1082), localDateTime0, localTime0, (-1082), 1181, 1181);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.of(1, 1);
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivRepPlano((-161), 1, (LocalDateTime) null, localTime0, 1161, 1, (-1047));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(5);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivDistAltPlano((-92), (-1), localDateTime0, localTime0, 0, (-145), 1.15, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(240);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivDistAltPlano((-4121), 638, localDateTime0, localTime0, (-4121), 0.2, (-2648.695), 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivDistPlano(0, 0, localDateTime0, localTime0, 0, (-3010.080771), (-2031));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(731);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivDistPlano(5, 731, (LocalDateTime) null, localTime0, (-4511), 0.5, (-4511));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.registaAtividade(0, 995);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalTime localTime0 = MockLocalTime.of(1, 1, 1);
      int int0 = gestorDesportivo0.addAtivRepsPeso((LocalDateTime) null, localTime0, (-1681), (-1681), 1, 7);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalTime localTime0 = MockLocalTime.of(1, 1, 1);
      int int0 = gestorDesportivo0.addAtivRepsPeso((LocalDateTime) null, localTime0, (-1681), 7, 1, (-1355));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.now(clock0);
      int int0 = gestorDesportivo0.addAtivRep(localDateTime0, localTime0, (-145), (-4511), 6);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(240);
      int int0 = gestorDesportivo0.addAtivRep(localDateTime0, localTime0, 5, 2147483645, (-2202));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      int int0 = gestorDesportivo0.addAtivDistAlt(localDateTime0, localTime0, (-1082), 505.83078219, 0.0, 8);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int int0 = gestorDesportivo0.addAtivDistAlt((LocalDateTime) null, localTime0, (-2196), (-3271), 0.0, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Period period0 = Period.ofYears(611);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      int int0 = gestorDesportivo0.addUtilizador("", "", "iFs|gs", 5, 1691, (-4544), localDate0, 'm', 3);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Period period0 = Period.ofYears(0);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      int int0 = gestorDesportivo0.addUtilizador((String) null, "\"T~,Zx.jTjzI/K(-", "", 857, 4929, (-3590), localDate0, 'I', (-1));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Period period0 = Period.ofYears((-155));
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, zoneId0);
      int int0 = gestorDesportivo0.addUtilizador("org.example.AtivRepeticoes", "org.example.AtivRepeticoes", "org.example.AtivRepeticoes", (-1612), (-49), 0, localDate0, 'O', 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      LocalDate localDate0 = MockLocalDate.from(localDateTime0);
      int int0 = gestorDesportivo0.addUtilizador("Nao existe plano de treino com este codigo\n", "GEY/=~TS]6D", "Nao existe plano de treino com este codigo\n", (-835), 9, 1, localDate0, '3', 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.now();
      Month month0 = Month.DECEMBER;
      LocalDate localDate1 = MockLocalDate.of(395, month0, 10);
      // Undeclared exception!
      try { 
        gestorDesportivo0.maisCaloriasGastas(localDate0, localDate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.of(7, 7, 7);
      // Undeclared exception!
      try { 
        gestorDesportivo0.maisAtividades((LocalDate) null, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Period period0 = Period.ofYears(611);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      gestorDesportivo0.addUtilizador("", "J5`{q<j", "iFs|gs", 611, 611, 10, localDate0, 'm', 9);
      gestorDesportivo0.atualizaInfo(localDate0);
      Utilizador utilizador0 = gestorDesportivo0.maisCaloriasGastas(localDate0, localDate0);
      assertEquals("J5`{q<j", utilizador0.getMorada());
      assertEquals(611.0, utilizador0.getPeso(), 0.01);
      assertEquals('m', utilizador0.getGenero());
      assertEquals(10, utilizador0.getAltura());
      assertEquals(611, utilizador0.getFreqCardiaca());
      assertEquals("", utilizador0.getNome());
      assertEquals("iFs|gs", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Period period0 = Period.ofYears(611);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      gestorDesportivo0.addUtilizador("", "J5`{q<j", "iFs|gs", 611, 611, 10, localDate0, 'm', 9);
      gestorDesportivo0.atualizaInfo(localDate0);
      Utilizador utilizador0 = gestorDesportivo0.maisAtividades(localDate0, localDate0);
      assertEquals(611.0, utilizador0.getPeso(), 0.01);
      assertEquals(10, utilizador0.getAltura());
      assertEquals("iFs|gs", utilizador0.getEmail());
      assertEquals("J5`{q<j", utilizador0.getMorada());
      assertEquals('m', utilizador0.getGenero());
      assertEquals("", utilizador0.getNome());
      assertEquals(611, utilizador0.getFreqCardiaca());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[0];
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.listaAtividades((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.guardaEstado((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      try { 
        gestorDesportivo0.guardaEstado("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[4];
      // Undeclared exception!
      gestorDesportivo0.geraPlanoTreinoUtilizador(1923, intArray0, 0, 1923, 1923, (LocalDate) null);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[5];
      // Undeclared exception!
      try { 
        gestorDesportivo0.geraPlanoTreinoUtilizador(5, intArray0, 5, 5, (-1640.73161), (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.PlanoTreino", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[0];
      LocalDate localDate0 = MockLocalDate.now();
      // Undeclared exception!
      try { 
        gestorDesportivo0.geraPlanoTreinoUtilizador(3, intArray0, 3, 3, 3, localDate0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.carregaEstado((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Nao existe plano de treino com este codigo\n");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      try { 
        gestorDesportivo0.carregaEstado("Nao existe plano de treino com este codigo\n");
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 00000000
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("H!gqyA%=q'RC9");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      try { 
        gestorDesportivo0.carregaEstado("H!gqyA%=q'RC9");
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Period period0 = Period.ofYears(611);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      gestorDesportivo0.addUtilizador("", "J5`{q<j", "iFs|gs", 611, 611, 10, localDate0, 'm', 9);
      // Undeclared exception!
      try { 
        gestorDesportivo0.atualizaInfo((LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // date
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.atividadesUtilizador((-145));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.atividadesExecutadasUtilizador(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(6, list0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<BenchPress> class0 = BenchPress.class;
      double double0 = gestorDesportivo0.recordDouble(class0, (Function<Atividade, Double>) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<Flexoes> class0 = Flexoes.class;
      int int0 = gestorDesportivo0.recordInt(class0, (Function<Atividade, Integer>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[8];
      intArray0[7] = 9;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(8, list0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[15];
      intArray0[2] = 8;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(15, list0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[8];
      intArray0[6] = 7;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(8, list0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[8];
      intArray0[7] = 6;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(8, list0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[8];
      intArray0[2] = 5;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(8, list0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[8];
      intArray0[4] = 4;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(8, list0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[8];
      intArray0[2] = 3;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(8, list0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[8];
      intArray0[5] = 2;
      List<Atividade> list0 = gestorDesportivo0.listaAtividades(intArray0);
      assertEquals(8, list0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      int[] intArray0 = new int[18];
      intArray0[0] = 1;
      LocalDate localDate0 = MockLocalDate.ofEpochDay(7L);
      gestorDesportivo0.geraPlanoTreinoUtilizador(1, intArray0, (-125), (-855), 1, localDate0);
      assertEquals(18, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Period period0 = Period.ofYears(611);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      gestorDesportivo0.addUtilizador("", "J5`{q<j", "iFs|gs", 611, 611, 10, localDate0, 'm', 9);
      gestorDesportivo0.atualizaInfo(localDate0);
      String string0 = gestorDesportivo0.mostraInfo();
      assertEquals("Utilizador\nCodigo de Utilizador: 1\nNome: \nMorada: J5`{q<j\nEmail: iFs|gs\nFrequencia Cardiaca: 611 bpm\nPeso: 611.0 kilos\nAltura: 10 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: m\nAtividades: \n\nPlanos de treino: \n\nTipo de Utilizador: Praticante Ocasional\n", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      String string0 = gestorDesportivo0.mostraInfo();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(7);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivRepsPesoPlano((-585), (-585), localDateTime0, localTime0, 7, 7, 7, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.from(localDateTime0);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivRepsPesoPlano((-1082), (-1082), localDateTime0, localTime0, (-1082), 765, (-2760.140087), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalTime localTime0 = MockLocalTime.now();
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivDistAltPlano(3, 1, (LocalDateTime) null, localTime0, (-2380), 2, (-216.1), (-92));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(0L);
      // Undeclared exception!
      try { 
        gestorDesportivo0.addAtivDistPlano((-1695), (-1695), localDateTime0, localTime0, 1807, 1807, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalTime localTime0 = MockLocalTime.now();
      int int0 = gestorDesportivo0.addAtivRepsPeso((LocalDateTime) null, localTime0, 8, 8, 8, 8);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalTime localTime0 = MockLocalTime.of(1, 1, 1);
      Integer integer0 = new Integer(7);
      gestorDesportivo0.addAtivRepsPeso((LocalDateTime) null, localTime0, 1, 7, 1, (int) integer0);
      // Undeclared exception!
      try { 
        gestorDesportivo0.estadoAtualizado();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalTime localTime0 = MockLocalTime.now();
      int int0 = gestorDesportivo0.addAtivDistAlt((LocalDateTime) null, localTime0, 3, 0.0, (-266.91520698), 3);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(0);
      int int0 = gestorDesportivo0.addAtivDist((LocalDateTime) null, localTime0, 1923, 0, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalTime localTime0 = MockLocalTime.now(clock0);
      int int0 = gestorDesportivo0.addAtivDist(localDateTime0, localTime0, (-145), (-1782.7471774101143), (-4511));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      boolean boolean0 = gestorDesportivo0.existePlano((-49));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalTime localTime0 = MockLocalTime.now();
      gestorDesportivo0.addAtivRepsPeso((LocalDateTime) null, localTime0, (-92), 3, 0.0, 6294);
      boolean boolean0 = gestorDesportivo0.existeAtividade(1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      boolean boolean0 = gestorDesportivo0.existeAtividade(554);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Period period0 = Period.ofYears(611);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      gestorDesportivo0.addUtilizador("", "J5`{q<j", "iFs|gs", 611, 611, 10, localDate0, 'm', 9);
      boolean boolean0 = gestorDesportivo0.existeUtilizador(1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      boolean boolean0 = gestorDesportivo0.existeUtilizador((-1838));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-3051L));
      gestorDesportivo0.addPlanoTreino(localDate0);
      String string0 = gestorDesportivo0.showPlanoTreino(1);
      assertEquals("Plano de Treino\nCodigo de Plano de Treino: 1\nData de realiza\u00E7ao: 1961-08-25\nAtividades e suas itera\u00E7oes: \n", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      String string0 = gestorDesportivo0.showPlanoTreino(859);
      assertEquals("Nao existe plano de treino com este codigo\n", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalTime localTime0 = MockLocalTime.of(1, 1, 1);
      gestorDesportivo0.addAtivRep((LocalDateTime) null, localTime0, (-1681), 1336, (-1681));
      // Undeclared exception!
      try { 
        gestorDesportivo0.showAtividade(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Atividade", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      String string0 = gestorDesportivo0.showAtividade(1);
      assertEquals("Nao existe atividade com este codigo\n", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.now();
      gestorDesportivo0.addUtilizador((String) null, (String) null, "\nIdade: ", 0, 1, 1, localDate0, '#', 1);
      String string0 = gestorDesportivo0.showUtilizador(1);
      assertEquals("Utilizador\nCodigo de Utilizador: 1\nNome: null\nMorada: null\nEmail: \nIdade: \nFrequencia Cardiaca: 0 bpm\nPeso: 1.0 kilos\nAltura: 1 centimetros\nData de nascimento 14/02/2014\nIdade: 0 anos\nGenero: #\nAtividades: \n\nPlanos de treino: \n\nTipo de Utilizador: Amador\n", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      String string0 = gestorDesportivo0.showUtilizador((-49));
      assertEquals("Nao existe utilizador com este codigo\n", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      String string0 = gestorDesportivo0.atividadeMaisRealizada();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      PlanoTreino planoTreino0 = gestorDesportivo0.planoTreinoMaisCalorias(localDate0);
      assertNull(planoTreino0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Period period0 = Period.ofYears(611);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      gestorDesportivo0.addUtilizador("", "J5`{q<j", "iFs|gs", 611, 611, 10, localDate0, 'm', 9);
      gestorDesportivo0.atualizaInfo(localDate0);
      // Undeclared exception!
      try { 
        gestorDesportivo0.planoTreinoMaisCalorias(localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.now();
      gestorDesportivo0.addPlanoTreino(localDate0);
      gestorDesportivo0.estadoAtualizado();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalTime localTime0 = MockLocalTime.now();
      gestorDesportivo0.addAtivRepsPeso((LocalDateTime) null, localTime0, (-92), 3, 0.0, 6294);
      gestorDesportivo0.estadoAtualizado();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      LocalDate localDate0 = MockLocalDate.now();
      gestorDesportivo0.addUtilizador((String) null, (String) null, "\nIdade: ", 0, 1, 1, localDate0, '#', 1);
      gestorDesportivo0.estadoAtualizado();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<Btt> class0 = Btt.class;
      double double0 = gestorDesportivo0.recordMaisDistancia(class0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      try { 
        gestorDesportivo0.carregaEstado("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<Integer> class0 = Integer.class;
      double double0 = gestorDesportivo0.recordMaisVelocidade(class0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      try { 
        gestorDesportivo0.guardaEstado("[6t|7/gJcu]?q!oNwJ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<LegPress> class0 = LegPress.class;
      int int0 = gestorDesportivo0.recordMaisRepeticoes(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<Double> class0 = Double.class;
      double double0 = gestorDesportivo0.recordMaisCalorias(class0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      // Undeclared exception!
      try { 
        gestorDesportivo0.registaPlanoTreino(0, (-2107));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.GestorDesportivo", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<Double> class0 = Double.class;
      int int0 = gestorDesportivo0.recordMaisTempo(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<Btt> class0 = Btt.class;
      double double0 = gestorDesportivo0.recordMaisPeso(class0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      GestorDesportivo gestorDesportivo0 = new GestorDesportivo();
      Class<BenchPress> class0 = BenchPress.class;
      double double0 = gestorDesportivo0.recordMaiorAltimetria(class0);
      assertEquals(0.0, double0, 0.01);
  }
}
